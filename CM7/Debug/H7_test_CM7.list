
H7_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e59c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800e840  0800e840  0001e840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed94  0800ed94  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed94  0800ed94  0001ed94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed9c  0800ed9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed9c  0800ed9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eda0  0800eda0  0001eda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800eda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d8c  240001e4  0800ef88  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  24004f70  0800ef88  00024f70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037253  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005afa  00000000  00000000  00057465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  0005cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc8  00000000  00000000  0005edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004352e  00000000  00000000  00060ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025723  00000000  00000000  000a3fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001af0f1  00000000  00000000  000c9709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002787fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f60  00000000  00000000  00278850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e824 	.word	0x0800e824

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800e824 	.word	0x0800e824

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t*)ch,sizeof(uint8_t),0);
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 ,0xFFFF);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x20>)
 80007ce:	f006 fe01 	bl	80073d4 <HAL_UART_Transmit>
	return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24004d90 	.word	0x24004d90

080007e0 <_write>:

int _write(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len;DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e009      	b.n	8000806 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	60ba      	str	r2, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffde 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len;DataIdx++)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	dbf1      	blt.n	80007f2 <_write+0x12>
	}
	return len;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800081e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000822:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000824:	bf00      	nop
 8000826:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <main+0x108>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <main+0x24>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf4      	bgt.n	8000826 <main+0xe>
  if ( timeout < 0 )
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da01      	bge.n	8000846 <main+0x2e>
  {
  Error_Handler();
 8000842:	f000 fb0d 	bl	8000e60 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fe75 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f885 	bl	8000958 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <main+0x108>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a32      	ldr	r2, [pc, #200]	; (8000920 <main+0x108>)
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <main+0x108>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800086c:	2000      	movs	r0, #0
 800086e:	f003 fce1 	bl	8004234 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f003 fcf7 	bl	8004268 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000880:	bf00      	nop
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <main+0x108>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <main+0x80>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dcf4      	bgt.n	8000882 <main+0x6a>
if ( timeout < 0 )
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da01      	bge.n	80008a2 <main+0x8a>
{
Error_Handler();
 800089e:	f000 fadf 	bl	8000e60 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 f9dd 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 f9b3 	bl	8000c10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 f965 	bl	8000b78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008ae:	f000 f8e3 	bl	8000a78 <MX_I2C1_Init>
  MX_CRC_Init();
 80008b2:	f000 f8bf 	bl	8000a34 <MX_CRC_Init>
  MX_I2C4_Init();
 80008b6:	f000 f91f 	bl	8000af8 <MX_I2C4_Init>
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  //HAL_UART_Receive_DMA(&huart1,rx_buffer,255);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008ba:	f008 fa5b 	bl	8008d74 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of KeyPress_Sema_FromISR */
  KeyPress_Sema_FromISRHandle = osSemaphoreNew(1, 1, &KeyPress_Sema_FromISR_attributes);
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <main+0x10c>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	2001      	movs	r0, #1
 80008c4:	f008 fb71 	bl	8008faa <osSemaphoreNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <main+0x110>)
 80008cc:	6013      	str	r3, [r2, #0]

  /* creation of Key_Sema_AfterShake */
  Key_Sema_AfterShakeHandle = osSemaphoreNew(1, 1, &Key_Sema_AfterShake_attributes);
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <main+0x114>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	2001      	movs	r0, #1
 80008d4:	f008 fb69 	bl	8008faa <osSemaphoreNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <main+0x118>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* creation of KeyRelease_Sema_FromISR */
  KeyRelease_Sema_FromISRHandle = osSemaphoreNew(1, 1, &KeyRelease_Sema_FromISR_attributes);
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <main+0x11c>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2001      	movs	r0, #1
 80008e4:	f008 fb61 	bl	8008faa <osSemaphoreNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <main+0x120>)
 80008ec:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DataQueue */
  DataQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &DataQueue_attributes);
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <main+0x124>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	2010      	movs	r0, #16
 80008f4:	f008 fc26 	bl	8009144 <osMessageQueueNew>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <main+0x128>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* creation of KeyMonitorTask */
  //KeyMonitorTaskHandle = osThreadNew(KeyMonitorTask_Function, NULL, &KeyMonitorTask_attributes);

  /* creation of KeyState */
  KeyStateHandle = osThreadNew(KeyState_Function, NULL, &KeyState_attributes);
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <main+0x12c>)
 8000900:	2100      	movs	r1, #0
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <main+0x130>)
 8000904:	f008 fa80 	bl	8008e08 <osThreadNew>
 8000908:	4603      	mov	r3, r0
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <main+0x134>)
 800090c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of key_pk3 */
  key_pk3Handle = osEventFlagsNew(&key_pk3_attributes);
 800090e:	4810      	ldr	r0, [pc, #64]	; (8000950 <main+0x138>)
 8000910:	f008 fb0c 	bl	8008f2c <osEventFlagsNew>
 8000914:	4603      	mov	r3, r0
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <main+0x13c>)
 8000918:	6013      	str	r3, [r2, #0]
  //sensor2 = MPU6050_t_INIT(&hi2c4);
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800091a:	f008 fa4f 	bl	8008dbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x106>
 8000920:	58024400 	.word	0x58024400
 8000924:	0800e940 	.word	0x0800e940
 8000928:	24004e2c 	.word	0x24004e2c
 800092c:	0800e950 	.word	0x0800e950
 8000930:	24004ecc 	.word	0x24004ecc
 8000934:	0800e960 	.word	0x0800e960
 8000938:	24004c2c 	.word	0x24004c2c
 800093c:	0800e928 	.word	0x0800e928
 8000940:	24004e38 	.word	0x24004e38
 8000944:	0800e904 	.word	0x0800e904
 8000948:	08000ded 	.word	0x08000ded
 800094c:	24004e40 	.word	0x24004e40
 8000950:	0800e970 	.word	0x0800e970
 8000954:	24004ec8 	.word	0x24004ec8

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	; 0x70
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	224c      	movs	r2, #76	; 0x4c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00b fbbc 	bl	800c0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2220      	movs	r2, #32
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00b fbb6 	bl	800c0e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000978:	2004      	movs	r0, #4
 800097a:	f003 fdd5 	bl	8004528 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <SystemClock_Config+0xd4>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <SystemClock_Config+0xd4>)
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <SystemClock_Config+0xd4>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <SystemClock_Config+0xd8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <SystemClock_Config+0xd8>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <SystemClock_Config+0xd8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b0:	bf00      	nop
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <SystemClock_Config+0xd8>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009be:	d1f8      	bne.n	80009b2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fe01 	bl	80045dc <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009e0:	f000 fa3e 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	233f      	movs	r3, #63	; 0x3f
 80009e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f9f7 	bl	8004dfc <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a14:	f000 fa24 	bl	8000e60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f004 fba2 	bl	8005168 <HAL_RCC_MCOConfig>
}
 8000a24:	bf00      	nop
 8000a26:	3770      	adds	r7, #112	; 0x70
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800

08000a34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <MX_CRC_Init+0x40>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_CRC_Init+0x3c>)
 8000a5e:	f000 fed5 	bl	800180c <HAL_CRC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a68:	f000 f9fa 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	24004c7c 	.word	0x24004c7c
 8000a74:	58024c00 	.word	0x58024c00

08000a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C1_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <MX_I2C1_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ab4:	f003 fc10 	bl	80042d8 <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 f9cf 	bl	8000e60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ac6:	f003 fc97 	bl	80043f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 f9c6 	bl	8000e60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ad8:	f003 fcd9 	bl	800448e <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 f9bd 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24004c30 	.word	0x24004c30
 8000af0:	40005400 	.word	0x40005400
 8000af4:	10707dbc 	.word	0x10707dbc

08000af8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <MX_I2C4_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <MX_I2C4_Init+0x7c>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b34:	f003 fbd0 	bl	80042d8 <HAL_I2C_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b3e:	f000 f98f 	bl	8000e60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b46:	f003 fc57 	bl	80043f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 f986 	bl	8000e60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_I2C4_Init+0x74>)
 8000b58:	f003 fc99 	bl	800448e <HAL_I2CEx_ConfigDigitalFilter>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 f97d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24004be0 	.word	0x24004be0
 8000b70:	58001c00 	.word	0x58001c00
 8000b74:	10707dbc 	.word	0x10707dbc

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_USART1_UART_Init+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f006 fbb7 	bl	8007334 <HAL_UART_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f000 f948 	bl	8000e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bd4:	f007 ffbf 	bl	8008b56 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bde:	f000 f93f 	bl	8000e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000be6:	f007 fff4 	bl	8008bd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 f936 	bl	8000e60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f007 ff75 	bl	8008ae4 <HAL_UARTEx_DisableFifoMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f92e 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //HAL_UART_Receive_IT(&huart1,&rxbuffer,1);
  /* USER CODE END USART1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24004d90 	.word	0x24004d90
 8000c0c:	40011000 	.word	0x40011000

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_DMA_Init+0x4c>)
 8000c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_DMA_Init+0x4c>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_DMA_Init+0x4c>)
 8000c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2105      	movs	r1, #5
 8000c38:	200b      	movs	r0, #11
 8000c3a:	f000 fdbf 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f000 fdd6 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2105      	movs	r1, #5
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f000 fdb7 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f000 fdce 	bl	80017f0 <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a51      	ldr	r2, [pc, #324]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a4a      	ldr	r2, [pc, #296]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b44      	ldr	r3, [pc, #272]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cd0:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a3b      	ldr	r2, [pc, #236]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_GPIO_Init+0x164>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0x168>)
 8000d50:	f003 fa32 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000d54:	2308      	movs	r3, #8
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_GPIO_Init+0x16c>)
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0x170>)
 8000d68:	f003 f85e 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_GPIO_Init+0x174>)
 8000d8a:	f003 f84d 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000d8e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <MX_GPIO_Init+0x168>)
 8000da8:	f003 f83e 	bl	8003e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2105      	movs	r1, #5
 8000db0:	2009      	movs	r0, #9
 8000db2:	f000 fd03 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000db6:	2009      	movs	r0, #9
 8000db8:	f000 fd1a 	bl	80017f0 <HAL_NVIC_EnableIRQ>

}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58022000 	.word	0x58022000
 8000dcc:	11310000 	.word	0x11310000
 8000dd0:	58022800 	.word	0x58022800
 8000dd4:	58020000 	.word	0x58020000

08000dd8 <HAL_UART_TxCpltCallback>:
	//HAL_UART_Transmit_DMA(&huart1,rx_buffer,4);
	//HAL_UART_Receive_DMA(&huart1,rx_buffer,4);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <KeyState_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyState_Function */
void KeyState_Function(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyState_Function */
  //HAL_UART_Receive_DMA(&huart1,rx_buffer,255);
  shared_ptr->buffer[0]=0;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <KeyState_Function+0x48>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  shared_ptr->buffer[1]=0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <KeyState_Function+0x48>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	705a      	strb	r2, [r3, #1]
  shared_ptr->buffer[2]=0;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <KeyState_Function+0x48>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	709a      	strb	r2, [r3, #2]
  shared_ptr->buffer[3]=0;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <KeyState_Function+0x48>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	70da      	strb	r2, [r3, #3]
//	{
//		HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_12);
//		HAL_UART_Transmit(&huart1,(uint8_t*)shared_ptr->buffer,4,0xFFFF);
//	}
	//HAL_UART_Receive(&huart1,(uint8_t*)shared_ptr->buffer,4,0xFFFF);
	HAL_UART_Receive(&huart1,(uint8_t*)shared_ptr->buffer,1,0);
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <KeyState_Function+0x48>)
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	2201      	movs	r2, #1
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <KeyState_Function+0x4c>)
 8000e16:	f006 fb73 	bl	8007500 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1,(uint8_t*)shared_ptr->buffer,1,0xFFFF);
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <KeyState_Function+0x48>)
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e22:	2201      	movs	r2, #1
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <KeyState_Function+0x4c>)
 8000e26:	f006 fad5 	bl	80073d4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f000 fbdd 	bl	80015ec <HAL_Delay>
	HAL_UART_Receive(&huart1,(uint8_t*)shared_ptr->buffer,1,0);
 8000e32:	e7eb      	b.n	8000e0c <KeyState_Function+0x20>
 8000e34:	38001000 	.word	0x38001000
 8000e38:	24004d90 	.word	0x24004d90

08000e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4e:	f000 fbad 	bl	80015ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010000 	.word	0x40010000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_MspInit+0x48>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x48>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x48>)
 8000e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	210f      	movs	r1, #15
 8000e94:	f06f 0001 	mvn.w	r0, #1
 8000e98:	f000 fc90 	bl	80017bc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2105      	movs	r1, #5
 8000ea0:	207d      	movs	r0, #125	; 0x7d
 8000ea2:	f000 fc8b 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000ea6:	207d      	movs	r0, #125	; 0x7d
 8000ea8:	f000 fca2 	bl	80017f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_CRC_MspInit+0x3c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10e      	bne.n	8000ee8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000ed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58024c00 	.word	0x58024c00
 8000ef8:	58024400 	.word	0x58024400

08000efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0bc      	sub	sp, #240	; 0xf0
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	22c0      	movs	r2, #192	; 0xc0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00b f8e1 	bl	800c0e4 <memset>
  if(hi2c->Instance==I2C1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a49      	ldr	r2, [pc, #292]	; (800104c <HAL_I2C_MspInit+0x150>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d143      	bne.n	8000fb4 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fb96 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f46:	f7ff ff8b 	bl	8000e60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a3f      	ldr	r2, [pc, #252]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f82:	2304      	movs	r3, #4
 8000f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4831      	ldr	r0, [pc, #196]	; (8001054 <HAL_I2C_MspInit+0x158>)
 8000f90:	f002 ff4a 	bl	8003e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000fb2:	e047      	b.n	8001044 <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <HAL_I2C_MspInit+0x15c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d142      	bne.n	8001044 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fb4d 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8000fd8:	f7ff ff42 	bl	8000e60 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ffa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001014:	2304      	movs	r3, #4
 8001016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101e:	4619      	mov	r1, r3
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <HAL_I2C_MspInit+0x160>)
 8001022:	f002 ff01 	bl	8003e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x154>)
 800102e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001032:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0x154>)
 8001038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	37f0      	adds	r7, #240	; 0xf0
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	58024400 	.word	0x58024400
 8001054:	58020400 	.word	0x58020400
 8001058:	58001c00 	.word	0x58001c00
 800105c:	58020c00 	.word	0x58020c00

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ba      	sub	sp, #232	; 0xe8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00b f82f 	bl	800c0e4 <memset>
  if(huart->Instance==USART1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a57      	ldr	r2, [pc, #348]	; (80011e8 <HAL_UART_MspInit+0x188>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 80a7 	bne.w	80011e0 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fae3 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80010ac:	f7ff fed8 	bl	8000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010b6:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	4a45      	ldr	r2, [pc, #276]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_UART_MspInit+0x18c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80010ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001106:	2307      	movs	r3, #7
 8001108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001110:	4619      	mov	r1, r3
 8001112:	4837      	ldr	r0, [pc, #220]	; (80011f0 <HAL_UART_MspInit+0x190>)
 8001114:	f002 fe88 	bl	8003e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <HAL_UART_MspInit+0x198>)
 800111c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001120:	2229      	movs	r2, #41	; 0x29
 8001122:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001136:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800115a:	f000 fc41 	bl	80019e0 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001164:	f7ff fe7c 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_UART_MspInit+0x194>)
 800116c:	67da      	str	r2, [r3, #124]	; 0x7c
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_UART_MspInit+0x194>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_UART_MspInit+0x19c>)
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_UART_MspInit+0x1a0>)
 8001178:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_UART_MspInit+0x19c>)
 800117c:	222a      	movs	r2, #42	; 0x2a
 800117e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_UART_MspInit+0x19c>)
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_UART_MspInit+0x19c>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_UART_MspInit+0x19c>)
 800118e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001192:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0x19c>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x19c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011b6:	f000 fc13 	bl	80019e0 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80011c0:	f7ff fe4e 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011c8:	679a      	str	r2, [r3, #120]	; 0x78
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_UART_MspInit+0x19c>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2105      	movs	r1, #5
 80011d4:	2025      	movs	r0, #37	; 0x25
 80011d6:	f000 faf1 	bl	80017bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011da:	2025      	movs	r0, #37	; 0x25
 80011dc:	f000 fb08 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	37e8      	adds	r7, #232	; 0xe8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40011000 	.word	0x40011000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	24004d18 	.word	0x24004d18
 80011f8:	40020010 	.word	0x40020010
 80011fc:	24004ca0 	.word	0x24004ca0
 8001200:	40020028 	.word	0x40020028

08001204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d842      	bhi.n	8001298 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001212:	2200      	movs	r2, #0
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	2019      	movs	r0, #25
 8001218:	f000 fad0 	bl	80017bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800121c:	2019      	movs	r0, #25
 800121e:	f000 fae7 	bl	80017f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <HAL_InitTick+0xac>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_InitTick+0xb0>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_InitTick+0xb0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_InitTick+0xb0>)
 800123a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f9c9 	bl	80055e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001256:	f004 f9b1 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 800125a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_InitTick+0xb4>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	3b01      	subs	r3, #1
 8001268:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_InitTick+0xb8>)
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_InitTick+0xbc>)
 800126e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0xb8>)
 8001272:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001276:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_InitTick+0xb8>)
 800127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_InitTick+0xb8>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_InitTick+0xb8>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_InitTick+0xb8>)
 800128c:	f005 fd80 	bl	8006d90 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <HAL_InitTick+0xa2>
 8001296:	e001      	b.n	800129c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e005      	b.n	80012a8 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <HAL_InitTick+0xb8>)
 800129e:	f005 fdd9 	bl	8006e54 <HAL_TIM_Base_Start_IT>
 80012a2:	4603      	mov	r3, r0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	24000008 	.word	0x24000008
 80012b4:	58024400 	.word	0x58024400
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	24004ed0 	.word	0x24004ed0
 80012c0:	40010000 	.word	0x40010000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port,JOY_DOWN_Pin)==0){
 80012f4:	2108      	movs	r1, #8
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <EXTI3_IRQHandler+0x34>)
 80012f8:	f002 ff46 	bl	8004188 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <EXTI3_IRQHandler+0x1e>
  //if((GPIOK->IDR & GPIO_PIN_3)!=0){
    osSemaphoreRelease(KeyPress_Sema_FromISRHandle);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <EXTI3_IRQHandler+0x38>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f007 fed8 	bl	80090bc <osSemaphoreRelease>
 800130c:	e004      	b.n	8001318 <EXTI3_IRQHandler+0x28>
  }
  else{
	osSemaphoreRelease(KeyRelease_Sema_FromISRHandle);
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <EXTI3_IRQHandler+0x3c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f007 fed2 	bl	80090bc <osSemaphoreRelease>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8001318:	2008      	movs	r0, #8
 800131a:	f002 ff66 	bl	80041ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	58022800 	.word	0x58022800
 8001328:	24004e2c 	.word	0x24004e2c
 800132c:	24004c2c 	.word	0x24004c2c

08001330 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Stream0_IRQHandler+0x10>)
 8001336:	f001 fc11 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24004d18 	.word	0x24004d18

08001344 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Stream1_IRQHandler+0x10>)
 800134a:	f001 fc07 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24004ca0 	.word	0x24004ca0

08001358 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM1_UP_IRQHandler+0x10>)
 800135e:	f005 fde9 	bl	8006f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24004ed0 	.word	0x24004ed0

0800136c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <USART1_IRQHandler+0x10>)
 8001372:	f006 f999 	bl	80076a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24004d90 	.word	0x24004d90

08001380 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001384:	f002 ff84 	bl	8004290 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_kill>:

int _kill(int pid, int sig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013a6:	f00a fd63 	bl	800be70 <__errno>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2216      	movs	r2, #22
 80013ae:	601a      	str	r2, [r3, #0]
	return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_exit>:

void _exit (int status)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe7 	bl	800139c <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ce:	e7fe      	b.n	80013ce <_exit+0x12>

080013d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
	}

return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:
	}
	return len;
}

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	605a      	str	r2, [r3, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f00a fce4 	bl	800be70 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	24080000 	.word	0x24080000
 80014d4:	00001000 	.word	0x00001000
 80014d8:	24000200 	.word	0x24000200
 80014dc:	24004f70 	.word	0x24004f70

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff f8d0 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f00a fdab 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f981 	bl	8000818 <main>
  bx  lr
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800151c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001520:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001524:	0800eda4 	.word	0x0800eda4
  ldr r2, =_sbss
 8001528:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 800152c:	24004f70 	.word	0x24004f70

08001530 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC3_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 f933 	bl	80017a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001540:	f003 fe7c 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_Init+0x68>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4913      	ldr	r1, [pc, #76]	; (80015a0 <HAL_Init+0x6c>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_Init+0x68>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_Init+0x6c>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_Init+0x70>)
 8001576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_Init+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	200f      	movs	r0, #15
 8001580:	f7ff fe40 	bl	8001204 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e002      	b.n	8001594 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fc6d 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58024400 	.word	0x58024400
 80015a0:	0800e8f4 	.word	0x0800e8f4
 80015a4:	24000004 	.word	0x24000004
 80015a8:	24000000 	.word	0x24000000

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2400000c 	.word	0x2400000c
 80015d0:	24004f1c 	.word	0x24004f1c

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	24004f1c 	.word	0x24004f1c

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2400000c 	.word	0x2400000c

08001634 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetREVID+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0c1b      	lsrs	r3, r3, #16
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	5c001000 	.word	0x5c001000

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <__NVIC_SetPriorityGrouping+0x40>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	4313      	orrs	r3, r2
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <__NVIC_SetPriorityGrouping+0x40>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	05fa0000 	.word	0x05fa0000

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff4c 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ca:	f7ff ff63 	bl	8001694 <__NVIC_GetPriorityGrouping>
 80017ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	6978      	ldr	r0, [r7, #20]
 80017d6:	f7ff ffb3 	bl	8001740 <NVIC_EncodePriority>
 80017da:	4602      	mov	r2, r0
 80017dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff82 	bl	80016ec <__NVIC_SetPriority>
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff56 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e054      	b.n	80018c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7f5b      	ldrb	r3, [r3, #29]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fb42 	bl	8000eb8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	791b      	ldrb	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <HAL_CRC_Init+0xc4>)
 8001848:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0218 	bic.w	r2, r2, #24
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e00c      	b.n	8001876 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	461a      	mov	r2, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f834 	bl	80018d4 <HAL_CRCEx_Polynomial_Set>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e028      	b.n	80018c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	e004      	b.n	8001894 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6912      	ldr	r2, [r2, #16]
 8001892:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	04c11db7 	.word	0x04c11db7

080018d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018e4:	231f      	movs	r3, #31
 80018e6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018e8:	bf00      	nop
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	613a      	str	r2, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_CRCEx_Polynomial_Set+0x34>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_CRCEx_Polynomial_Set+0x16>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b18      	cmp	r3, #24
 800190c:	d846      	bhi.n	800199c <HAL_CRCEx_Polynomial_Set+0xc8>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	080019a3 	.word	0x080019a3
 8001918:	0800199d 	.word	0x0800199d
 800191c:	0800199d 	.word	0x0800199d
 8001920:	0800199d 	.word	0x0800199d
 8001924:	0800199d 	.word	0x0800199d
 8001928:	0800199d 	.word	0x0800199d
 800192c:	0800199d 	.word	0x0800199d
 8001930:	0800199d 	.word	0x0800199d
 8001934:	08001991 	.word	0x08001991
 8001938:	0800199d 	.word	0x0800199d
 800193c:	0800199d 	.word	0x0800199d
 8001940:	0800199d 	.word	0x0800199d
 8001944:	0800199d 	.word	0x0800199d
 8001948:	0800199d 	.word	0x0800199d
 800194c:	0800199d 	.word	0x0800199d
 8001950:	0800199d 	.word	0x0800199d
 8001954:	08001985 	.word	0x08001985
 8001958:	0800199d 	.word	0x0800199d
 800195c:	0800199d 	.word	0x0800199d
 8001960:	0800199d 	.word	0x0800199d
 8001964:	0800199d 	.word	0x0800199d
 8001968:	0800199d 	.word	0x0800199d
 800196c:	0800199d 	.word	0x0800199d
 8001970:	0800199d 	.word	0x0800199d
 8001974:	08001979 	.word	0x08001979
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d913      	bls.n	80019a6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001982:	e010      	b.n	80019a6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d90f      	bls.n	80019aa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800198e:	e00c      	b.n	80019aa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	d90b      	bls.n	80019ae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800199a:	e008      	b.n	80019ae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	75fb      	strb	r3, [r7, #23]
      break;
 80019a0:	e006      	b.n	80019b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019a2:	bf00      	nop
 80019a4:	e004      	b.n	80019b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019a6:	bf00      	nop
 80019a8:	e002      	b.n	80019b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019ae:	bf00      	nop
  }
  if (status == HAL_OK)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 0118 	bic.w	r1, r3, #24
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fdf4 	bl	80015d4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e316      	b.n	8002026 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <HAL_DMA_Init+0x1b8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04a      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_DMA_Init+0x1bc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d045      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a63      	ldr	r2, [pc, #396]	; (8001ba0 <HAL_DMA_Init+0x1c0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d040      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a62      	ldr	r2, [pc, #392]	; (8001ba4 <HAL_DMA_Init+0x1c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d03b      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a60      	ldr	r2, [pc, #384]	; (8001ba8 <HAL_DMA_Init+0x1c8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a5f      	ldr	r2, [pc, #380]	; (8001bac <HAL_DMA_Init+0x1cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <HAL_DMA_Init+0x1d0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02c      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5c      	ldr	r2, [pc, #368]	; (8001bb4 <HAL_DMA_Init+0x1d4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <HAL_DMA_Init+0x1d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a59      	ldr	r2, [pc, #356]	; (8001bbc <HAL_DMA_Init+0x1dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01d      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_DMA_Init+0x1e0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a56      	ldr	r2, [pc, #344]	; (8001bc4 <HAL_DMA_Init+0x1e4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_DMA_Init+0x1e8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <HAL_DMA_Init+0x1ec>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_DMA_Init+0x1f0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Init+0xb8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_DMA_Init+0x1f4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Init+0xbc>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_DMA_Init+0xbe>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 813b 	beq.w	8001d1a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a37      	ldr	r2, [pc, #220]	; (8001b98 <HAL_DMA_Init+0x1b8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d04a      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <HAL_DMA_Init+0x1bc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d045      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_DMA_Init+0x1c0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d040      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <HAL_DMA_Init+0x1c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d03b      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <HAL_DMA_Init+0x1c8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d036      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a30      	ldr	r2, [pc, #192]	; (8001bac <HAL_DMA_Init+0x1cc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d031      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <HAL_DMA_Init+0x1d0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d02c      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_DMA_Init+0x1d4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d027      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <HAL_DMA_Init+0x1d8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d022      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <HAL_DMA_Init+0x1dc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d01d      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a28      	ldr	r2, [pc, #160]	; (8001bc0 <HAL_DMA_Init+0x1e0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d018      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_DMA_Init+0x1e4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <HAL_DMA_Init+0x1e8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00e      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_DMA_Init+0x1ec>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d009      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_DMA_Init+0x1f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_DMA_Init+0x174>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_DMA_Init+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <HAL_DMA_Init+0x186>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_DMA_Init+0x196>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b76:	e02f      	b.n	8001bd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b78:	f7ff fd2c 	bl	80015d4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d928      	bls.n	8001bd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e246      	b.n	8002026 <HAL_DMA_Init+0x646>
 8001b98:	40020010 	.word	0x40020010
 8001b9c:	40020028 	.word	0x40020028
 8001ba0:	40020040 	.word	0x40020040
 8001ba4:	40020058 	.word	0x40020058
 8001ba8:	40020070 	.word	0x40020070
 8001bac:	40020088 	.word	0x40020088
 8001bb0:	400200a0 	.word	0x400200a0
 8001bb4:	400200b8 	.word	0x400200b8
 8001bb8:	40020410 	.word	0x40020410
 8001bbc:	40020428 	.word	0x40020428
 8001bc0:	40020440 	.word	0x40020440
 8001bc4:	40020458 	.word	0x40020458
 8001bc8:	40020470 	.word	0x40020470
 8001bcc:	40020488 	.word	0x40020488
 8001bd0:	400204a0 	.word	0x400204a0
 8001bd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1c8      	bne.n	8001b78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <HAL_DMA_Init+0x420>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d107      	bne.n	8001c3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4313      	orrs	r3, r2
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c3c:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_DMA_Init+0x424>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <HAL_DMA_Init+0x428>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c48:	d328      	bcc.n	8001c9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b28      	cmp	r3, #40	; 0x28
 8001c50:	d903      	bls.n	8001c5a <HAL_DMA_Init+0x27a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b2e      	cmp	r3, #46	; 0x2e
 8001c58:	d917      	bls.n	8001c8a <HAL_DMA_Init+0x2aa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c60:	d903      	bls.n	8001c6a <HAL_DMA_Init+0x28a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b42      	cmp	r3, #66	; 0x42
 8001c68:	d90f      	bls.n	8001c8a <HAL_DMA_Init+0x2aa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b46      	cmp	r3, #70	; 0x46
 8001c70:	d903      	bls.n	8001c7a <HAL_DMA_Init+0x29a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b48      	cmp	r3, #72	; 0x48
 8001c78:	d907      	bls.n	8001c8a <HAL_DMA_Init+0x2aa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b4e      	cmp	r3, #78	; 0x4e
 8001c80:	d905      	bls.n	8001c8e <HAL_DMA_Init+0x2ae>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b52      	cmp	r3, #82	; 0x52
 8001c88:	d801      	bhi.n	8001c8e <HAL_DMA_Init+0x2ae>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Init+0x2b0>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d117      	bne.n	8001cf6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f001 ff1b 	bl	8003b14 <DMA_CheckFifoParam>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e197      	b.n	8002026 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 fe56 	bl	80039b0 <DMA_CalcBaseAndBitshift>
 8001d04:	4603      	mov	r3, r0
 8001d06:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	223f      	movs	r2, #63	; 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	e0cd      	b.n	8001eb6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <HAL_DMA_Init+0x42c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <HAL_DMA_Init+0x430>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_DMA_Init+0x434>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <HAL_DMA_Init+0x438>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_DMA_Init+0x43c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <HAL_DMA_Init+0x440>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_DMA_Init+0x444>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_DMA_Init+0x38a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_DMA_Init+0x448>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Init+0x38e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_DMA_Init+0x390>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8097 	beq.w	8001ea4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_DMA_Init+0x42c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d021      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_DMA_Init+0x430>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01c      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <HAL_DMA_Init+0x434>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d017      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_DMA_Init+0x438>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d012      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <HAL_DMA_Init+0x43c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <HAL_DMA_Init+0x440>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_DMA_Init+0x444>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_Init+0x3e4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_DMA_Init+0x448>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_DMA_Init+0x44c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d020      	beq.n	8001e30 <HAL_DMA_Init+0x450>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Init+0x41c>
 8001df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfa:	e01a      	b.n	8001e32 <HAL_DMA_Init+0x452>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e018      	b.n	8001e32 <HAL_DMA_Init+0x452>
 8001e00:	fe10803f 	.word	0xfe10803f
 8001e04:	5c001000 	.word	0x5c001000
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	58025408 	.word	0x58025408
 8001e10:	5802541c 	.word	0x5802541c
 8001e14:	58025430 	.word	0x58025430
 8001e18:	58025444 	.word	0x58025444
 8001e1c:	58025458 	.word	0x58025458
 8001e20:	5802546c 	.word	0x5802546c
 8001e24:	58025480 	.word	0x58025480
 8001e28:	58025494 	.word	0x58025494
 8001e2c:	fffe000f 	.word	0xfffe000f
 8001e30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68d2      	ldr	r2, [r2, #12]
 8001e36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b6e      	ldr	r3, [pc, #440]	; (8002030 <HAL_DMA_Init+0x650>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_DMA_Init+0x654>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	009a      	lsls	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 fd91 	bl	80039b0 <DMA_CalcBaseAndBitshift>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	e008      	b.n	8001eb6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0b7      	b.n	8002026 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <HAL_DMA_Init+0x658>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d072      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_DMA_Init+0x65c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d06d      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5c      	ldr	r2, [pc, #368]	; (8002040 <HAL_DMA_Init+0x660>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d068      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_DMA_Init+0x664>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d063      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a59      	ldr	r2, [pc, #356]	; (8002048 <HAL_DMA_Init+0x668>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d05e      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_DMA_Init+0x66c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d059      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_DMA_Init+0x670>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d054      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_DMA_Init+0x674>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04f      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a53      	ldr	r2, [pc, #332]	; (8002058 <HAL_DMA_Init+0x678>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d04a      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_DMA_Init+0x67c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d045      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a50      	ldr	r2, [pc, #320]	; (8002060 <HAL_DMA_Init+0x680>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d040      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4e      	ldr	r2, [pc, #312]	; (8002064 <HAL_DMA_Init+0x684>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d03b      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <HAL_DMA_Init+0x688>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d036      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_DMA_Init+0x68c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d031      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_DMA_Init+0x690>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d02c      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <HAL_DMA_Init+0x694>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d027      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_DMA_Init+0x698>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a45      	ldr	r2, [pc, #276]	; (800207c <HAL_DMA_Init+0x69c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01d      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a44      	ldr	r2, [pc, #272]	; (8002080 <HAL_DMA_Init+0x6a0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d018      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a42      	ldr	r2, [pc, #264]	; (8002084 <HAL_DMA_Init+0x6a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a41      	ldr	r2, [pc, #260]	; (8002088 <HAL_DMA_Init+0x6a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00e      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_DMA_Init+0x6ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	; (8002090 <HAL_DMA_Init+0x6b0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_DMA_Init+0x5c6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <HAL_DMA_Init+0x6b4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Init+0x5ca>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_DMA_Init+0x5cc>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d032      	beq.n	8002016 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f001 fe2b 	bl	8003c0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b80      	cmp	r3, #128	; 0x80
 8001fbc:	d102      	bne.n	8001fc4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fd8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_DMA_Init+0x624>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d80c      	bhi.n	8002004 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 fea8 	bl	8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e008      	b.n	8002016 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	a7fdabf8 	.word	0xa7fdabf8
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
 8002078:	58025408 	.word	0x58025408
 800207c:	5802541c 	.word	0x5802541c
 8002080:	58025430 	.word	0x58025430
 8002084:	58025444 	.word	0x58025444
 8002088:	58025458 	.word	0x58025458
 800208c:	5802546c 	.word	0x5802546c
 8002090:	58025480 	.word	0x58025480
 8002094:	58025494 	.word	0x58025494

08002098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff fa98 	bl	80015d4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e2dc      	b.n	800266a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e2cd      	b.n	800266a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a76      	ldr	r2, [pc, #472]	; (80022ac <HAL_DMA_Abort+0x214>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a74      	ldr	r2, [pc, #464]	; (80022b0 <HAL_DMA_Abort+0x218>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	; (80022b4 <HAL_DMA_Abort+0x21c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_DMA_Abort+0x220>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_DMA_Abort+0x224>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_DMA_Abort+0x228>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <HAL_DMA_Abort+0x22c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6b      	ldr	r2, [pc, #428]	; (80022c8 <HAL_DMA_Abort+0x230>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_DMA_Abort+0x234>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a68      	ldr	r2, [pc, #416]	; (80022d0 <HAL_DMA_Abort+0x238>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_DMA_Abort+0x23c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_DMA_Abort+0x240>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_DMA_Abort+0x244>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_DMA_Abort+0x248>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <HAL_DMA_Abort+0x24c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort+0xd6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_Abort+0x250>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Abort+0xda>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_DMA_Abort+0xdc>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 021e 	bic.w	r2, r2, #30
 8002186:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002196:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e00a      	b.n	80021b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020e 	bic.w	r2, r2, #14
 80021ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <HAL_DMA_Abort+0x214>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d072      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_DMA_Abort+0x218>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d06d      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a39      	ldr	r2, [pc, #228]	; (80022b4 <HAL_DMA_Abort+0x21c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d068      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a37      	ldr	r2, [pc, #220]	; (80022b8 <HAL_DMA_Abort+0x220>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d063      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_DMA_Abort+0x224>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_DMA_Abort+0x228>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d059      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <HAL_DMA_Abort+0x22c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d054      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_DMA_Abort+0x230>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04f      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_DMA_Abort+0x234>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04a      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2e      	ldr	r2, [pc, #184]	; (80022d0 <HAL_DMA_Abort+0x238>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d045      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_DMA_Abort+0x23c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_DMA_Abort+0x240>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d03b      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <HAL_DMA_Abort+0x244>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d036      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_DMA_Abort+0x248>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_DMA_Abort+0x24c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d02c      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_DMA_Abort+0x250>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d027      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_DMA_Abort+0x254>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_DMA_Abort+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_DMA_Abort+0x25c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_DMA_Abort+0x260>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_DMA_Abort+0x264>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_DMA_Abort+0x268>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_DMA_Abort+0x26c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_DMA_Abort+0x20e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_DMA_Abort+0x270>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d132      	bne.n	800230c <HAL_DMA_Abort+0x274>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e031      	b.n	800230e <HAL_DMA_Abort+0x276>
 80022aa:	bf00      	nop
 80022ac:	40020010 	.word	0x40020010
 80022b0:	40020028 	.word	0x40020028
 80022b4:	40020040 	.word	0x40020040
 80022b8:	40020058 	.word	0x40020058
 80022bc:	40020070 	.word	0x40020070
 80022c0:	40020088 	.word	0x40020088
 80022c4:	400200a0 	.word	0x400200a0
 80022c8:	400200b8 	.word	0x400200b8
 80022cc:	40020410 	.word	0x40020410
 80022d0:	40020428 	.word	0x40020428
 80022d4:	40020440 	.word	0x40020440
 80022d8:	40020458 	.word	0x40020458
 80022dc:	40020470 	.word	0x40020470
 80022e0:	40020488 	.word	0x40020488
 80022e4:	400204a0 	.word	0x400204a0
 80022e8:	400204b8 	.word	0x400204b8
 80022ec:	58025408 	.word	0x58025408
 80022f0:	5802541c 	.word	0x5802541c
 80022f4:	58025430 	.word	0x58025430
 80022f8:	58025444 	.word	0x58025444
 80022fc:	58025458 	.word	0x58025458
 8002300:	5802546c 	.word	0x5802546c
 8002304:	58025480 	.word	0x58025480
 8002308:	58025494 	.word	0x58025494
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002320:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6d      	ldr	r2, [pc, #436]	; (80024dc <HAL_DMA_Abort+0x444>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04a      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	; (80024e0 <HAL_DMA_Abort+0x448>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d045      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_DMA_Abort+0x44c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a68      	ldr	r2, [pc, #416]	; (80024e8 <HAL_DMA_Abort+0x450>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_DMA_Abort+0x454>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d036      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_DMA_Abort+0x458>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <HAL_DMA_Abort+0x45c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d02c      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a62      	ldr	r2, [pc, #392]	; (80024f8 <HAL_DMA_Abort+0x460>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d027      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_DMA_Abort+0x464>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <HAL_DMA_Abort+0x468>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a5e      	ldr	r2, [pc, #376]	; (8002504 <HAL_DMA_Abort+0x46c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_DMA_Abort+0x470>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_DMA_Abort+0x474>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_DMA_Abort+0x478>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_DMA_Abort+0x47c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_Abort+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_DMA_Abort+0x480>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <HAL_DMA_Abort+0x33c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_DMA_Abort+0x34c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023e4:	e013      	b.n	800240e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff f8f5 	bl	80015d4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d90c      	bls.n	800240e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e12d      	b.n	800266a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e5      	bne.n	80023e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_DMA_Abort+0x444>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04a      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2d      	ldr	r2, [pc, #180]	; (80024e0 <HAL_DMA_Abort+0x448>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d045      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <HAL_DMA_Abort+0x44c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d040      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_DMA_Abort+0x450>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03b      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_DMA_Abort+0x454>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d036      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_DMA_Abort+0x458>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_DMA_Abort+0x45c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d02c      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_DMA_Abort+0x460>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d027      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_DMA_Abort+0x464>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <HAL_DMA_Abort+0x468>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01d      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a20      	ldr	r2, [pc, #128]	; (8002504 <HAL_DMA_Abort+0x46c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_DMA_Abort+0x470>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_DMA_Abort+0x474>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_DMA_Abort+0x478>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_DMA_Abort+0x47c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort+0x422>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_DMA_Abort+0x480>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Abort+0x426>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_DMA_Abort+0x428>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02b      	beq.n	800251c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	223f      	movs	r2, #63	; 0x3f
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e02a      	b.n	8002532 <HAL_DMA_Abort+0x49a>
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2201      	movs	r2, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_DMA_Abort+0x5dc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d072      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_DMA_Abort+0x5e0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d06d      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_DMA_Abort+0x5e4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d068      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_DMA_Abort+0x5e8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d063      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_DMA_Abort+0x5ec>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d05e      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_DMA_Abort+0x5f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d059      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_DMA_Abort+0x5f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d054      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_DMA_Abort+0x5f8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04f      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_DMA_Abort+0x5fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04a      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a41      	ldr	r2, [pc, #260]	; (8002698 <HAL_DMA_Abort+0x600>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_DMA_Abort+0x604>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_DMA_Abort+0x608>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d03b      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3d      	ldr	r2, [pc, #244]	; (80026a4 <HAL_DMA_Abort+0x60c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_DMA_Abort+0x610>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d031      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <HAL_DMA_Abort+0x614>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <HAL_DMA_Abort+0x618>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a37      	ldr	r2, [pc, #220]	; (80026b4 <HAL_DMA_Abort+0x61c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a35      	ldr	r2, [pc, #212]	; (80026b8 <HAL_DMA_Abort+0x620>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01d      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_DMA_Abort+0x624>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <HAL_DMA_Abort+0x628>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_DMA_Abort+0x62c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <HAL_DMA_Abort+0x630>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_DMA_Abort+0x634>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_DMA_Abort+0x58a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_DMA_Abort+0x638>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_DMA_Abort+0x58e>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_DMA_Abort+0x590>
 8002626:	2300      	movs	r3, #0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002634:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002656:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020010 	.word	0x40020010
 8002678:	40020028 	.word	0x40020028
 800267c:	40020040 	.word	0x40020040
 8002680:	40020058 	.word	0x40020058
 8002684:	40020070 	.word	0x40020070
 8002688:	40020088 	.word	0x40020088
 800268c:	400200a0 	.word	0x400200a0
 8002690:	400200b8 	.word	0x400200b8
 8002694:	40020410 	.word	0x40020410
 8002698:	40020428 	.word	0x40020428
 800269c:	40020440 	.word	0x40020440
 80026a0:	40020458 	.word	0x40020458
 80026a4:	40020470 	.word	0x40020470
 80026a8:	40020488 	.word	0x40020488
 80026ac:	400204a0 	.word	0x400204a0
 80026b0:	400204b8 	.word	0x400204b8
 80026b4:	58025408 	.word	0x58025408
 80026b8:	5802541c 	.word	0x5802541c
 80026bc:	58025430 	.word	0x58025430
 80026c0:	58025444 	.word	0x58025444
 80026c4:	58025458 	.word	0x58025458
 80026c8:	5802546c 	.word	0x5802546c
 80026cc:	58025480 	.word	0x58025480
 80026d0:	58025494 	.word	0x58025494

080026d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e205      	b.n	8002af2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2280      	movs	r2, #128	; 0x80
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e1fa      	b.n	8002af2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8c      	ldr	r2, [pc, #560]	; (8002934 <HAL_DMA_Abort_IT+0x260>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04a      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8b      	ldr	r2, [pc, #556]	; (8002938 <HAL_DMA_Abort_IT+0x264>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d045      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a89      	ldr	r2, [pc, #548]	; (800293c <HAL_DMA_Abort_IT+0x268>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a88      	ldr	r2, [pc, #544]	; (8002940 <HAL_DMA_Abort_IT+0x26c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d03b      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a86      	ldr	r2, [pc, #536]	; (8002944 <HAL_DMA_Abort_IT+0x270>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d036      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a85      	ldr	r2, [pc, #532]	; (8002948 <HAL_DMA_Abort_IT+0x274>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d031      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_DMA_Abort_IT+0x278>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02c      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a82      	ldr	r2, [pc, #520]	; (8002950 <HAL_DMA_Abort_IT+0x27c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d027      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a80      	ldr	r2, [pc, #512]	; (8002954 <HAL_DMA_Abort_IT+0x280>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7f      	ldr	r2, [pc, #508]	; (8002958 <HAL_DMA_Abort_IT+0x284>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7d      	ldr	r2, [pc, #500]	; (800295c <HAL_DMA_Abort_IT+0x288>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7c      	ldr	r2, [pc, #496]	; (8002960 <HAL_DMA_Abort_IT+0x28c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a7a      	ldr	r2, [pc, #488]	; (8002964 <HAL_DMA_Abort_IT+0x290>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a79      	ldr	r2, [pc, #484]	; (8002968 <HAL_DMA_Abort_IT+0x294>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a77      	ldr	r2, [pc, #476]	; (800296c <HAL_DMA_Abort_IT+0x298>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a76      	ldr	r2, [pc, #472]	; (8002970 <HAL_DMA_Abort_IT+0x29c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Abort_IT+0xcc>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_DMA_Abort_IT+0xce>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d065      	beq.n	8002872 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2204      	movs	r2, #4
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_DMA_Abort_IT+0x260>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04a      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_DMA_Abort_IT+0x264>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d045      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_DMA_Abort_IT+0x268>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <HAL_DMA_Abort_IT+0x26c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d03b      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <HAL_DMA_Abort_IT+0x270>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d036      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_DMA_Abort_IT+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d031      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_DMA_Abort_IT+0x278>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a55      	ldr	r2, [pc, #340]	; (8002950 <HAL_DMA_Abort_IT+0x27c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a54      	ldr	r2, [pc, #336]	; (8002954 <HAL_DMA_Abort_IT+0x280>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_DMA_Abort_IT+0x284>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_DMA_Abort_IT+0x288>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a4f      	ldr	r2, [pc, #316]	; (8002960 <HAL_DMA_Abort_IT+0x28c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a4e      	ldr	r2, [pc, #312]	; (8002964 <HAL_DMA_Abort_IT+0x290>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_DMA_Abort_IT+0x294>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_DMA_Abort_IT+0x298>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Abort_IT+0x17a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a49      	ldr	r2, [pc, #292]	; (8002970 <HAL_DMA_Abort_IT+0x29c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <HAL_DMA_Abort_IT+0x18c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e147      	b.n	8002af0 <HAL_DMA_Abort_IT+0x41c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e13e      	b.n	8002af0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020e 	bic.w	r2, r2, #14
 8002880:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_DMA_Abort_IT+0x260>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d04a      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_DMA_Abort_IT+0x264>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d045      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_DMA_Abort_IT+0x268>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d040      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_DMA_Abort_IT+0x26c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d03b      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HAL_DMA_Abort_IT+0x270>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d036      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_DMA_Abort_IT+0x274>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d031      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_DMA_Abort_IT+0x278>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d02c      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_DMA_Abort_IT+0x27c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d027      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_DMA_Abort_IT+0x280>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_DMA_Abort_IT+0x284>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01d      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_DMA_Abort_IT+0x288>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d018      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_DMA_Abort_IT+0x28c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_DMA_Abort_IT+0x290>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_DMA_Abort_IT+0x294>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_DMA_Abort_IT+0x298>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_DMA_Abort_IT+0x24e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_DMA_Abort_IT+0x29c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d128      	bne.n	8002974 <HAL_DMA_Abort_IT+0x2a0>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e027      	b.n	8002984 <HAL_DMA_Abort_IT+0x2b0>
 8002934:	40020010 	.word	0x40020010
 8002938:	40020028 	.word	0x40020028
 800293c:	40020040 	.word	0x40020040
 8002940:	40020058 	.word	0x40020058
 8002944:	40020070 	.word	0x40020070
 8002948:	40020088 	.word	0x40020088
 800294c:	400200a0 	.word	0x400200a0
 8002950:	400200b8 	.word	0x400200b8
 8002954:	40020410 	.word	0x40020410
 8002958:	40020428 	.word	0x40020428
 800295c:	40020440 	.word	0x40020440
 8002960:	40020458 	.word	0x40020458
 8002964:	40020470 	.word	0x40020470
 8002968:	40020488 	.word	0x40020488
 800296c:	400204a0 	.word	0x400204a0
 8002970:	400204b8 	.word	0x400204b8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <HAL_DMA_Abort_IT+0x428>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d072      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_DMA_Abort_IT+0x42c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d06d      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a59      	ldr	r2, [pc, #356]	; (8002b04 <HAL_DMA_Abort_IT+0x430>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d068      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_DMA_Abort_IT+0x434>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d063      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_DMA_Abort_IT+0x438>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d05e      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_DMA_Abort_IT+0x43c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d059      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a53      	ldr	r2, [pc, #332]	; (8002b14 <HAL_DMA_Abort_IT+0x440>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d054      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_DMA_Abort_IT+0x444>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04f      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_DMA_Abort_IT+0x448>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04a      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <HAL_DMA_Abort_IT+0x44c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d045      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_DMA_Abort_IT+0x450>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d040      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_DMA_Abort_IT+0x454>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d03b      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_DMA_Abort_IT+0x458>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d036      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <HAL_DMA_Abort_IT+0x45c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a47      	ldr	r2, [pc, #284]	; (8002b34 <HAL_DMA_Abort_IT+0x460>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02c      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <HAL_DMA_Abort_IT+0x464>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a44      	ldr	r2, [pc, #272]	; (8002b3c <HAL_DMA_Abort_IT+0x468>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <HAL_DMA_Abort_IT+0x46c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01d      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <HAL_DMA_Abort_IT+0x470>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a40      	ldr	r2, [pc, #256]	; (8002b48 <HAL_DMA_Abort_IT+0x474>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <HAL_DMA_Abort_IT+0x478>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <HAL_DMA_Abort_IT+0x47c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3b      	ldr	r2, [pc, #236]	; (8002b54 <HAL_DMA_Abort_IT+0x480>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x3a0>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <HAL_DMA_Abort_IT+0x484>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_DMA_Abort_IT+0x3a4>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_DMA_Abort_IT+0x3a6>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d028      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ace:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
 8002b3c:	58025408 	.word	0x58025408
 8002b40:	5802541c 	.word	0x5802541c
 8002b44:	58025430 	.word	0x58025430
 8002b48:	58025444 	.word	0x58025444
 8002b4c:	58025458 	.word	0x58025458
 8002b50:	5802546c 	.word	0x5802546c
 8002b54:	58025480 	.word	0x58025480
 8002b58:	58025494 	.word	0x58025494

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b68:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_DMA_IRQHandler+0x1ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_DMA_IRQHandler+0x1b0>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5f      	ldr	r2, [pc, #380]	; (8002d10 <HAL_DMA_IRQHandler+0x1b4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5d      	ldr	r2, [pc, #372]	; (8002d14 <HAL_DMA_IRQHandler+0x1b8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <HAL_DMA_IRQHandler+0x1bc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_DMA_IRQHandler+0x1c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a59      	ldr	r2, [pc, #356]	; (8002d20 <HAL_DMA_IRQHandler+0x1c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	; (8002d24 <HAL_DMA_IRQHandler+0x1c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a56      	ldr	r2, [pc, #344]	; (8002d28 <HAL_DMA_IRQHandler+0x1cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <HAL_DMA_IRQHandler+0x1d0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a53      	ldr	r2, [pc, #332]	; (8002d30 <HAL_DMA_IRQHandler+0x1d4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_DMA_IRQHandler+0x1d8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <HAL_DMA_IRQHandler+0x1dc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_DMA_IRQHandler+0x1e0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_DMA_IRQHandler+0x1e4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_DMA_IRQHandler+0x1e8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <HAL_DMA_IRQHandler+0x1ec>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xd2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a48      	ldr	r2, [pc, #288]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_DMA_IRQHandler+0xd6>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 842b 	beq.w	8003490 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2208      	movs	r2, #8
 8002c44:	409a      	lsls	r2, r3
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a2 	beq.w	8002d94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2e      	ldr	r2, [pc, #184]	; (8002d10 <HAL_DMA_IRQHandler+0x1b4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <HAL_DMA_IRQHandler+0x1b8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <HAL_DMA_IRQHandler+0x1bc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <HAL_DMA_IRQHandler+0x1c0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_DMA_IRQHandler+0x1c4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_DMA_IRQHandler+0x1c8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_DMA_IRQHandler+0x1cc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_DMA_IRQHandler+0x1d0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_DMA_IRQHandler+0x1d8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_DMA_IRQHandler+0x1dc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_DMA_IRQHandler+0x1e0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_DMA_IRQHandler+0x1e4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_DMA_IRQHandler+0x1e8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <HAL_DMA_IRQHandler+0x1ec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x194>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d12f      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e02e      	b.n	8002d64 <HAL_DMA_IRQHandler+0x208>
 8002d06:	bf00      	nop
 8002d08:	24000000 	.word	0x24000000
 8002d0c:	1b4e81b5 	.word	0x1b4e81b5
 8002d10:	40020010 	.word	0x40020010
 8002d14:	40020028 	.word	0x40020028
 8002d18:	40020040 	.word	0x40020040
 8002d1c:	40020058 	.word	0x40020058
 8002d20:	40020070 	.word	0x40020070
 8002d24:	40020088 	.word	0x40020088
 8002d28:	400200a0 	.word	0x400200a0
 8002d2c:	400200b8 	.word	0x400200b8
 8002d30:	40020410 	.word	0x40020410
 8002d34:	40020428 	.word	0x40020428
 8002d38:	40020440 	.word	0x40020440
 8002d3c:	40020458 	.word	0x40020458
 8002d40:	40020470 	.word	0x40020470
 8002d44:	40020488 	.word	0x40020488
 8002d48:	400204a0 	.word	0x400204a0
 8002d4c:	400204b8 	.word	0x400204b8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06e      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a69      	ldr	r2, [pc, #420]	; (8002f54 <HAL_DMA_IRQHandler+0x3f8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_DMA_IRQHandler+0x3fc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <HAL_DMA_IRQHandler+0x400>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_DMA_IRQHandler+0x404>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a63      	ldr	r2, [pc, #396]	; (8002f64 <HAL_DMA_IRQHandler+0x408>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <HAL_DMA_IRQHandler+0x40c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <HAL_DMA_IRQHandler+0x410>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5e      	ldr	r2, [pc, #376]	; (8002f70 <HAL_DMA_IRQHandler+0x414>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_DMA_IRQHandler+0x418>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_DMA_IRQHandler+0x41c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_DMA_IRQHandler+0x420>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_DMA_IRQHandler+0x424>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a57      	ldr	r2, [pc, #348]	; (8002f84 <HAL_DMA_IRQHandler+0x428>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_DMA_IRQHandler+0x42c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_DMA_IRQHandler+0x430>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ee>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_DMA_IRQHandler+0x434>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10a      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x304>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e003      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0202 	orr.w	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 808f 	beq.w	8002fbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <HAL_DMA_IRQHandler+0x3f8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <HAL_DMA_IRQHandler+0x3fc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_DMA_IRQHandler+0x400>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_DMA_IRQHandler+0x404>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_DMA_IRQHandler+0x408>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_DMA_IRQHandler+0x40c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <HAL_DMA_IRQHandler+0x410>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a21      	ldr	r2, [pc, #132]	; (8002f70 <HAL_DMA_IRQHandler+0x414>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_DMA_IRQHandler+0x418>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_DMA_IRQHandler+0x41c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_DMA_IRQHandler+0x420>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_DMA_IRQHandler+0x424>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_DMA_IRQHandler+0x428>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_DMA_IRQHandler+0x42c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_DMA_IRQHandler+0x430>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3e2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <HAL_DMA_IRQHandler+0x434>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12a      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x438>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e023      	b.n	8002f9c <HAL_DMA_IRQHandler+0x440>
 8002f54:	40020010 	.word	0x40020010
 8002f58:	40020028 	.word	0x40020028
 8002f5c:	40020040 	.word	0x40020040
 8002f60:	40020058 	.word	0x40020058
 8002f64:	40020070 	.word	0x40020070
 8002f68:	40020088 	.word	0x40020088
 8002f6c:	400200a0 	.word	0x400200a0
 8002f70:	400200b8 	.word	0x400200b8
 8002f74:	40020410 	.word	0x40020410
 8002f78:	40020428 	.word	0x40020428
 8002f7c:	40020440 	.word	0x40020440
 8002f80:	40020458 	.word	0x40020458
 8002f84:	40020470 	.word	0x40020470
 8002f88:	40020488 	.word	0x40020488
 8002f8c:	400204a0 	.word	0x400204a0
 8002f90:	400204b8 	.word	0x400204b8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a6 	beq.w	800311e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a85      	ldr	r2, [pc, #532]	; (80031ec <HAL_DMA_IRQHandler+0x690>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a83      	ldr	r2, [pc, #524]	; (80031f0 <HAL_DMA_IRQHandler+0x694>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a82      	ldr	r2, [pc, #520]	; (80031f4 <HAL_DMA_IRQHandler+0x698>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a80      	ldr	r2, [pc, #512]	; (80031f8 <HAL_DMA_IRQHandler+0x69c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a7f      	ldr	r2, [pc, #508]	; (80031fc <HAL_DMA_IRQHandler+0x6a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7d      	ldr	r2, [pc, #500]	; (8003200 <HAL_DMA_IRQHandler+0x6a4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7c      	ldr	r2, [pc, #496]	; (8003204 <HAL_DMA_IRQHandler+0x6a8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <HAL_DMA_IRQHandler+0x6ac>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a79      	ldr	r2, [pc, #484]	; (800320c <HAL_DMA_IRQHandler+0x6b0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a77      	ldr	r2, [pc, #476]	; (8003210 <HAL_DMA_IRQHandler+0x6b4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a76      	ldr	r2, [pc, #472]	; (8003214 <HAL_DMA_IRQHandler+0x6b8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a74      	ldr	r2, [pc, #464]	; (8003218 <HAL_DMA_IRQHandler+0x6bc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a73      	ldr	r2, [pc, #460]	; (800321c <HAL_DMA_IRQHandler+0x6c0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a71      	ldr	r2, [pc, #452]	; (8003220 <HAL_DMA_IRQHandler+0x6c4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a70      	ldr	r2, [pc, #448]	; (8003224 <HAL_DMA_IRQHandler+0x6c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_IRQHandler+0x516>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_DMA_IRQHandler+0x6cc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10a      	bne.n	8003088 <HAL_DMA_IRQHandler+0x52c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e009      	b.n	800309c <HAL_DMA_IRQHandler+0x540>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03e      	beq.n	800311e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2210      	movs	r2, #16
 80030aa:	409a      	lsls	r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d108      	bne.n	80030de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d024      	beq.n	800311e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e01f      	b.n	800311e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01b      	beq.n	800311e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
 80030ee:	e016      	b.n	800311e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0208 	bic.w	r2, r2, #8
 800310c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2220      	movs	r2, #32
 8003128:	409a      	lsls	r2, r3
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8110 	beq.w	8003354 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <HAL_DMA_IRQHandler+0x690>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_DMA_IRQHandler+0x694>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_DMA_IRQHandler+0x698>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <HAL_DMA_IRQHandler+0x69c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <HAL_DMA_IRQHandler+0x6a0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a25      	ldr	r2, [pc, #148]	; (8003200 <HAL_DMA_IRQHandler+0x6a4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_DMA_IRQHandler+0x6a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_DMA_IRQHandler+0x6ac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <HAL_DMA_IRQHandler+0x6b0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_DMA_IRQHandler+0x6b4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_DMA_IRQHandler+0x6b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_DMA_IRQHandler+0x6bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_DMA_IRQHandler+0x6c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_DMA_IRQHandler+0x6c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_DMA_IRQHandler+0x6c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x678>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_DMA_IRQHandler+0x6cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d12b      	bne.n	800322c <HAL_DMA_IRQHandler+0x6d0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e02a      	b.n	8003240 <HAL_DMA_IRQHandler+0x6e4>
 80031ea:	bf00      	nop
 80031ec:	40020010 	.word	0x40020010
 80031f0:	40020028 	.word	0x40020028
 80031f4:	40020040 	.word	0x40020040
 80031f8:	40020058 	.word	0x40020058
 80031fc:	40020070 	.word	0x40020070
 8003200:	40020088 	.word	0x40020088
 8003204:	400200a0 	.word	0x400200a0
 8003208:	400200b8 	.word	0x400200b8
 800320c:	40020410 	.word	0x40020410
 8003210:	40020428 	.word	0x40020428
 8003214:	40020440 	.word	0x40020440
 8003218:	40020458 	.word	0x40020458
 800321c:	40020470 	.word	0x40020470
 8003220:	40020488 	.word	0x40020488
 8003224:	400204a0 	.word	0x400204a0
 8003228:	400204b8 	.word	0x400204b8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8087 	beq.w	8003354 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2220      	movs	r2, #32
 8003250:	409a      	lsls	r2, r3
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b04      	cmp	r3, #4
 8003260:	d139      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0216 	bic.w	r2, r2, #22
 8003270:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003280:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_DMA_IRQHandler+0x736>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	223f      	movs	r2, #63	; 0x3f
 80032ac:	409a      	lsls	r2, r3
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 834a 	beq.w	8003960 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
          }
          return;
 80032d4:	e344      	b.n	8003960 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
 8003302:	e027      	b.n	8003354 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e01e      	b.n	8003354 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10f      	bne.n	8003344 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0210 	bic.w	r2, r2, #16
 8003332:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8306 	beq.w	800396a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8088 	beq.w	800347c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2204      	movs	r2, #4
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <HAL_DMA_IRQHandler+0xa08>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d04a      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a79      	ldr	r2, [pc, #484]	; (8003568 <HAL_DMA_IRQHandler+0xa0c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d045      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a77      	ldr	r2, [pc, #476]	; (800356c <HAL_DMA_IRQHandler+0xa10>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d040      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a76      	ldr	r2, [pc, #472]	; (8003570 <HAL_DMA_IRQHandler+0xa14>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d03b      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a74      	ldr	r2, [pc, #464]	; (8003574 <HAL_DMA_IRQHandler+0xa18>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d036      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a73      	ldr	r2, [pc, #460]	; (8003578 <HAL_DMA_IRQHandler+0xa1c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d031      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a71      	ldr	r2, [pc, #452]	; (800357c <HAL_DMA_IRQHandler+0xa20>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02c      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a70      	ldr	r2, [pc, #448]	; (8003580 <HAL_DMA_IRQHandler+0xa24>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d027      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_DMA_IRQHandler+0xa28>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d022      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6d      	ldr	r2, [pc, #436]	; (8003588 <HAL_DMA_IRQHandler+0xa2c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d01d      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_DMA_IRQHandler+0xa30>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6a      	ldr	r2, [pc, #424]	; (8003590 <HAL_DMA_IRQHandler+0xa34>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_DMA_IRQHandler+0xa38>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <HAL_DMA_IRQHandler+0xa3c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_DMA_IRQHandler+0xa40>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_DMA_IRQHandler+0x8b8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <HAL_DMA_IRQHandler+0xa44>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <HAL_DMA_IRQHandler+0x8ca>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e007      	b.n	8003436 <HAL_DMA_IRQHandler+0x8da>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	429a      	cmp	r2, r3
 8003440:	d307      	bcc.n	8003452 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f2      	bne.n	8003436 <HAL_DMA_IRQHandler+0x8da>
 8003450:	e000      	b.n	8003454 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003452:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003472:	e003      	b.n	800347c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8272 	beq.w	800396a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
 800348e:	e26c      	b.n	800396a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a43      	ldr	r2, [pc, #268]	; (80035a4 <HAL_DMA_IRQHandler+0xa48>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d022      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <HAL_DMA_IRQHandler+0xa4c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d01d      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a40      	ldr	r2, [pc, #256]	; (80035ac <HAL_DMA_IRQHandler+0xa50>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <HAL_DMA_IRQHandler+0xa54>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <HAL_DMA_IRQHandler+0xa58>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00e      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3c      	ldr	r2, [pc, #240]	; (80035b8 <HAL_DMA_IRQHandler+0xa5c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_DMA_IRQHandler+0xa60>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x984>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a39      	ldr	r2, [pc, #228]	; (80035c0 <HAL_DMA_IRQHandler+0xa64>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x988>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_DMA_IRQHandler+0x98a>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 823f 	beq.w	800396a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2204      	movs	r2, #4
 80034fe:	409a      	lsls	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80cd 	beq.w	80036a4 <HAL_DMA_IRQHandler+0xb48>
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80c7 	beq.w	80036a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2204      	movs	r2, #4
 8003520:	409a      	lsls	r2, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d049      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8210 	beq.w	8003964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800354c:	e20a      	b.n	8003964 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8206 	beq.w	8003964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003560:	e200      	b.n	8003964 <HAL_DMA_IRQHandler+0xe08>
 8003562:	bf00      	nop
 8003564:	40020010 	.word	0x40020010
 8003568:	40020028 	.word	0x40020028
 800356c:	40020040 	.word	0x40020040
 8003570:	40020058 	.word	0x40020058
 8003574:	40020070 	.word	0x40020070
 8003578:	40020088 	.word	0x40020088
 800357c:	400200a0 	.word	0x400200a0
 8003580:	400200b8 	.word	0x400200b8
 8003584:	40020410 	.word	0x40020410
 8003588:	40020428 	.word	0x40020428
 800358c:	40020440 	.word	0x40020440
 8003590:	40020458 	.word	0x40020458
 8003594:	40020470 	.word	0x40020470
 8003598:	40020488 	.word	0x40020488
 800359c:	400204a0 	.word	0x400204a0
 80035a0:	400204b8 	.word	0x400204b8
 80035a4:	58025408 	.word	0x58025408
 80035a8:	5802541c 	.word	0x5802541c
 80035ac:	58025430 	.word	0x58025430
 80035b0:	58025444 	.word	0x58025444
 80035b4:	58025458 	.word	0x58025458
 80035b8:	5802546c 	.word	0x5802546c
 80035bc:	58025480 	.word	0x58025480
 80035c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d160      	bne.n	8003690 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a8c      	ldr	r2, [pc, #560]	; (8003804 <HAL_DMA_IRQHandler+0xca8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d04a      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_DMA_IRQHandler+0xcac>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d045      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a89      	ldr	r2, [pc, #548]	; (800380c <HAL_DMA_IRQHandler+0xcb0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d040      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a87      	ldr	r2, [pc, #540]	; (8003810 <HAL_DMA_IRQHandler+0xcb4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d03b      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a86      	ldr	r2, [pc, #536]	; (8003814 <HAL_DMA_IRQHandler+0xcb8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d036      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a84      	ldr	r2, [pc, #528]	; (8003818 <HAL_DMA_IRQHandler+0xcbc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d031      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a83      	ldr	r2, [pc, #524]	; (800381c <HAL_DMA_IRQHandler+0xcc0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d02c      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a81      	ldr	r2, [pc, #516]	; (8003820 <HAL_DMA_IRQHandler+0xcc4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d027      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a80      	ldr	r2, [pc, #512]	; (8003824 <HAL_DMA_IRQHandler+0xcc8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7e      	ldr	r2, [pc, #504]	; (8003828 <HAL_DMA_IRQHandler+0xccc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01d      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7d      	ldr	r2, [pc, #500]	; (800382c <HAL_DMA_IRQHandler+0xcd0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7b      	ldr	r2, [pc, #492]	; (8003830 <HAL_DMA_IRQHandler+0xcd4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7a      	ldr	r2, [pc, #488]	; (8003834 <HAL_DMA_IRQHandler+0xcd8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a78      	ldr	r2, [pc, #480]	; (8003838 <HAL_DMA_IRQHandler+0xcdc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a77      	ldr	r2, [pc, #476]	; (800383c <HAL_DMA_IRQHandler+0xce0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_DMA_IRQHandler+0xb12>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_DMA_IRQHandler+0xce4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d108      	bne.n	8003680 <HAL_DMA_IRQHandler+0xb24>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0208 	bic.w	r2, r2, #8
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e007      	b.n	8003690 <HAL_DMA_IRQHandler+0xb34>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8165 	beq.w	8003964 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a2:	e15f      	b.n	8003964 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2202      	movs	r2, #2
 80036ae:	409a      	lsls	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80c5 	beq.w	8003844 <HAL_DMA_IRQHandler+0xce8>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80bf 	beq.w	8003844 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2202      	movs	r2, #2
 80036d0:	409a      	lsls	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 813a 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036fc:	e134      	b.n	8003968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8130 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003710:	e12a      	b.n	8003968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d168      	bne.n	80037ee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_DMA_IRQHandler+0xca8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04a      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a37      	ldr	r2, [pc, #220]	; (8003808 <HAL_DMA_IRQHandler+0xcac>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d045      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a35      	ldr	r2, [pc, #212]	; (800380c <HAL_DMA_IRQHandler+0xcb0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d040      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a34      	ldr	r2, [pc, #208]	; (8003810 <HAL_DMA_IRQHandler+0xcb4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d03b      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a32      	ldr	r2, [pc, #200]	; (8003814 <HAL_DMA_IRQHandler+0xcb8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d036      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a31      	ldr	r2, [pc, #196]	; (8003818 <HAL_DMA_IRQHandler+0xcbc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d031      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_DMA_IRQHandler+0xcc0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02c      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <HAL_DMA_IRQHandler+0xcc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d027      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <HAL_DMA_IRQHandler+0xcc8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d022      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <HAL_DMA_IRQHandler+0xccc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d01d      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_DMA_IRQHandler+0xcd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d018      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a28      	ldr	r2, [pc, #160]	; (8003830 <HAL_DMA_IRQHandler+0xcd4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_DMA_IRQHandler+0xcd8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_DMA_IRQHandler+0xcdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_DMA_IRQHandler+0xce0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_DMA_IRQHandler+0xc60>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_DMA_IRQHandler+0xce4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d108      	bne.n	80037ce <HAL_DMA_IRQHandler+0xc72>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0214 	bic.w	r2, r2, #20
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e007      	b.n	80037de <HAL_DMA_IRQHandler+0xc82>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 020a 	bic.w	r2, r2, #10
 80037dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80b8 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003800:	e0b2      	b.n	8003968 <HAL_DMA_IRQHandler+0xe0c>
 8003802:	bf00      	nop
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2208      	movs	r2, #8
 800384e:	409a      	lsls	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8088 	beq.w	800396a <HAL_DMA_IRQHandler+0xe0e>
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8082 	beq.w	800396a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a41      	ldr	r2, [pc, #260]	; (8003970 <HAL_DMA_IRQHandler+0xe14>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_DMA_IRQHandler+0xe18>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3e      	ldr	r2, [pc, #248]	; (8003978 <HAL_DMA_IRQHandler+0xe1c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3c      	ldr	r2, [pc, #240]	; (800397c <HAL_DMA_IRQHandler+0xe20>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <HAL_DMA_IRQHandler+0xe24>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a39      	ldr	r2, [pc, #228]	; (8003984 <HAL_DMA_IRQHandler+0xe28>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_DMA_IRQHandler+0xe2c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a36      	ldr	r2, [pc, #216]	; (800398c <HAL_DMA_IRQHandler+0xe30>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a35      	ldr	r2, [pc, #212]	; (8003990 <HAL_DMA_IRQHandler+0xe34>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a33      	ldr	r2, [pc, #204]	; (8003994 <HAL_DMA_IRQHandler+0xe38>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a32      	ldr	r2, [pc, #200]	; (8003998 <HAL_DMA_IRQHandler+0xe3c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a30      	ldr	r2, [pc, #192]	; (800399c <HAL_DMA_IRQHandler+0xe40>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <HAL_DMA_IRQHandler+0xe44>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <HAL_DMA_IRQHandler+0xe48>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2c      	ldr	r2, [pc, #176]	; (80039a8 <HAL_DMA_IRQHandler+0xe4c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_IRQHandler+0xdaa>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <HAL_DMA_IRQHandler+0xe50>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <HAL_DMA_IRQHandler+0xdbc>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 021c 	bic.w	r2, r2, #28
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e007      	b.n	8003928 <HAL_DMA_IRQHandler+0xdcc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020e 	bic.w	r2, r2, #14
 8003926:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2201      	movs	r2, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
 800395e:	e004      	b.n	800396a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003968:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8

080039b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a42      	ldr	r2, [pc, #264]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x118>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04a      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a41      	ldr	r2, [pc, #260]	; (8003acc <DMA_CalcBaseAndBitshift+0x11c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d045      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x120>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d040      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3e      	ldr	r2, [pc, #248]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d03b      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x128>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d036      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <DMA_CalcBaseAndBitshift+0x12c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d031      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x130>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02c      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x134>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d027      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d022      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a35      	ldr	r2, [pc, #212]	; (8003aec <DMA_CalcBaseAndBitshift+0x13c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d01d      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a33      	ldr	r2, [pc, #204]	; (8003af0 <DMA_CalcBaseAndBitshift+0x140>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <DMA_CalcBaseAndBitshift+0x144>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <DMA_CalcBaseAndBitshift+0x148>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <DMA_CalcBaseAndBitshift+0x14c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <DMA_CalcBaseAndBitshift+0x150>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <DMA_CalcBaseAndBitshift+0xa8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <DMA_CalcBaseAndBitshift+0x154>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <DMA_CalcBaseAndBitshift+0xac>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <DMA_CalcBaseAndBitshift+0xae>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d024      	beq.n	8003aac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3b10      	subs	r3, #16
 8003a6a:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <DMA_CalcBaseAndBitshift+0x158>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <DMA_CalcBaseAndBitshift+0x15c>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d908      	bls.n	8003a9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <DMA_CalcBaseAndBitshift+0x160>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	1d1a      	adds	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	; 0x58
 8003a9a:	e00d      	b.n	8003ab8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <DMA_CalcBaseAndBitshift+0x160>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	e005      	b.n	8003ab8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40020010 	.word	0x40020010
 8003acc:	40020028 	.word	0x40020028
 8003ad0:	40020040 	.word	0x40020040
 8003ad4:	40020058 	.word	0x40020058
 8003ad8:	40020070 	.word	0x40020070
 8003adc:	40020088 	.word	0x40020088
 8003ae0:	400200a0 	.word	0x400200a0
 8003ae4:	400200b8 	.word	0x400200b8
 8003ae8:	40020410 	.word	0x40020410
 8003aec:	40020428 	.word	0x40020428
 8003af0:	40020440 	.word	0x40020440
 8003af4:	40020458 	.word	0x40020458
 8003af8:	40020470 	.word	0x40020470
 8003afc:	40020488 	.word	0x40020488
 8003b00:	400204a0 	.word	0x400204a0
 8003b04:	400204b8 	.word	0x400204b8
 8003b08:	aaaaaaab 	.word	0xaaaaaaab
 8003b0c:	0800e980 	.word	0x0800e980
 8003b10:	fffffc00 	.word	0xfffffc00

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d120      	bne.n	8003b6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d858      	bhi.n	8003be2 <DMA_CheckFifoParam+0xce>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <DMA_CheckFifoParam+0x24>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b5b 	.word	0x08003b5b
 8003b40:	08003b49 	.word	0x08003b49
 8003b44:	08003be3 	.word	0x08003be3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d048      	beq.n	8003be6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b58:	e045      	b.n	8003be6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b62:	d142      	bne.n	8003bea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b68:	e03f      	b.n	8003bea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b72:	d123      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d838      	bhi.n	8003bee <DMA_CheckFifoParam+0xda>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
        break;
 8003b98:	e030      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d025      	beq.n	8003bf2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003baa:	e022      	b.n	8003bf2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11f      	bne.n	8003bf6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bba:	e01c      	b.n	8003bf6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d902      	bls.n	8003bca <DMA_CheckFifoParam+0xb6>
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d003      	beq.n	8003bd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bc8:	e018      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e015      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
    break;
 8003be0:	e00b      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
        break;
 8003be2:	bf00      	nop
 8003be4:	e00a      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        break;
 8003be6:	bf00      	nop
 8003be8:	e008      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        break;
 8003bea:	bf00      	nop
 8003bec:	e006      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e004      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
    break;
 8003bfa:	bf00      	nop
    }
  }

  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a38      	ldr	r2, [pc, #224]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a36      	ldr	r2, [pc, #216]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a33      	ldr	r2, [pc, #204]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a32      	ldr	r2, [pc, #200]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	3b08      	subs	r3, #8
 8003c7c:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ca8:	e024      	b.n	8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3b10      	subs	r3, #16
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d806      	bhi.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d902      	bls.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	58025408 	.word	0x58025408
 8003d04:	5802541c 	.word	0x5802541c
 8003d08:	58025430 	.word	0x58025430
 8003d0c:	58025444 	.word	0x58025444
 8003d10:	58025458 	.word	0x58025458
 8003d14:	5802546c 	.word	0x5802546c
 8003d18:	58025480 	.word	0x58025480
 8003d1c:	58025494 	.word	0x58025494
 8003d20:	cccccccd 	.word	0xcccccccd
 8003d24:	16009600 	.word	0x16009600
 8003d28:	58025880 	.word	0x58025880
 8003d2c:	aaaaaaab 	.word	0xaaaaaaab
 8003d30:	400204b8 	.word	0x400204b8
 8003d34:	4002040f 	.word	0x4002040f
 8003d38:	10008200 	.word	0x10008200
 8003d3c:	40020880 	.word	0x40020880

08003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04a      	beq.n	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d847      	bhi.n	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d022      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d01d      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8003dca:	e009      	b.n	8003de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003dde:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	58025408 	.word	0x58025408
 8003dfc:	5802541c 	.word	0x5802541c
 8003e00:	58025430 	.word	0x58025430
 8003e04:	58025444 	.word	0x58025444
 8003e08:	58025458 	.word	0x58025458
 8003e0c:	5802546c 	.word	0x5802546c
 8003e10:	58025480 	.word	0x58025480
 8003e14:	58025494 	.word	0x58025494
 8003e18:	1600963f 	.word	0x1600963f
 8003e1c:	58025940 	.word	0x58025940
 8003e20:	1000823f 	.word	0x1000823f
 8003e24:	40020940 	.word	0x40020940

08003e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e36:	4b89      	ldr	r3, [pc, #548]	; (800405c <HAL_GPIO_Init+0x234>)
 8003e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e3a:	e194      	b.n	8004166 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2101      	movs	r1, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8186 	beq.w	8004160 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d00b      	beq.n	8003e74 <HAL_GPIO_Init+0x4c>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e68:	2b11      	cmp	r3, #17
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0201 	and.w	r2, r3, #1
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0xee>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b12      	cmp	r3, #18
 8003f14:	d123      	bne.n	8003f5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	08da      	lsrs	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3208      	adds	r2, #8
 8003f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	08da      	lsrs	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3208      	adds	r2, #8
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2203      	movs	r2, #3
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0203 	and.w	r2, r3, #3
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80e0 	beq.w	8004160 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_GPIO_Init+0x238>)
 8003fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <HAL_GPIO_Init+0x238>)
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_GPIO_Init+0x238>)
 8003fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fbe:	4a29      	ldr	r2, [pc, #164]	; (8004064 <HAL_GPIO_Init+0x23c>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_GPIO_Init+0x240>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d052      	beq.n	8004090 <HAL_GPIO_Init+0x268>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_GPIO_Init+0x244>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d031      	beq.n	8004056 <HAL_GPIO_Init+0x22e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_GPIO_Init+0x248>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <HAL_GPIO_Init+0x22a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <HAL_GPIO_Init+0x24c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d025      	beq.n	800404e <HAL_GPIO_Init+0x226>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <HAL_GPIO_Init+0x250>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01f      	beq.n	800404a <HAL_GPIO_Init+0x222>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_GPIO_Init+0x254>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d019      	beq.n	8004046 <HAL_GPIO_Init+0x21e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_GPIO_Init+0x258>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_GPIO_Init+0x21a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_GPIO_Init+0x25c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00d      	beq.n	800403e <HAL_GPIO_Init+0x216>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_GPIO_Init+0x260>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <HAL_GPIO_Init+0x212>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_GPIO_Init+0x264>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_GPIO_Init+0x20e>
 8004032:	2309      	movs	r3, #9
 8004034:	e02d      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 8004036:	230a      	movs	r3, #10
 8004038:	e02b      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 800403a:	2308      	movs	r3, #8
 800403c:	e029      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 800403e:	2307      	movs	r3, #7
 8004040:	e027      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 8004042:	2306      	movs	r3, #6
 8004044:	e025      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 8004046:	2305      	movs	r3, #5
 8004048:	e023      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 800404a:	2304      	movs	r3, #4
 800404c:	e021      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 800404e:	2303      	movs	r3, #3
 8004050:	e01f      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 8004052:	2302      	movs	r3, #2
 8004054:	e01d      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 8004056:	2301      	movs	r3, #1
 8004058:	e01b      	b.n	8004092 <HAL_GPIO_Init+0x26a>
 800405a:	bf00      	nop
 800405c:	58000080 	.word	0x58000080
 8004060:	58024400 	.word	0x58024400
 8004064:	58000400 	.word	0x58000400
 8004068:	58020000 	.word	0x58020000
 800406c:	58020400 	.word	0x58020400
 8004070:	58020800 	.word	0x58020800
 8004074:	58020c00 	.word	0x58020c00
 8004078:	58021000 	.word	0x58021000
 800407c:	58021400 	.word	0x58021400
 8004080:	58021800 	.word	0x58021800
 8004084:	58021c00 	.word	0x58021c00
 8004088:	58022000 	.word	0x58022000
 800408c:	58022400 	.word	0x58022400
 8004090:	2300      	movs	r3, #0
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	f002 0203 	and.w	r2, r2, #3
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	4093      	lsls	r3, r2
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a2:	4938      	ldr	r1, [pc, #224]	; (8004184 <HAL_GPIO_Init+0x35c>)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	f47f ae63 	bne.w	8003e3c <HAL_GPIO_Init+0x14>
  }
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	3724      	adds	r7, #36	; 0x24
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	58000400 	.word	0x58000400

08004188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	e001      	b.n	80041aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
 80041c4:	4613      	mov	r3, r2
 80041c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041d4:	e003      	b.n	80041de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f804 	bl	800421e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800423c:	4a08      	ldr	r2, [pc, #32]	; (8004260 <HAL_HSEM_FastTake+0x2c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3320      	adds	r3, #32
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_HSEM_FastTake+0x30>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	58026400 	.word	0x58026400
 8004264:	80000300 	.word	0x80000300

08004268 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004272:	4906      	ldr	r1, [pc, #24]	; (800428c <HAL_HSEM_Release+0x24>)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	58026400 	.word	0x58026400

08004290 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_HSEM_IRQHandler+0x30>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_HSEM_IRQHandler+0x30>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	4906      	ldr	r1, [pc, #24]	; (80042c0 <HAL_HSEM_IRQHandler+0x30>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80042aa:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_HSEM_IRQHandler+0x30>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f807 	bl	80042c4 <HAL_HSEM_FreeCallback>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	58026500 	.word	0x58026500

080042c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07f      	b.n	80043ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fdfc 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	e006      	b.n	8004360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800435e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d104      	bne.n	8004372 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_I2C_Init+0x11c>)
 800437e:	430b      	orrs	r3, r1
 8004380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	ea42 0103 	orr.w	r1, r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	021a      	lsls	r2, r3, #8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	02008000 	.word	0x02008000

080043f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	d138      	bne.n	8004480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004418:	2302      	movs	r3, #2
 800441a:	e032      	b.n	8004482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800444a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d139      	bne.n	8004518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e033      	b.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2224      	movs	r2, #36	; 0x24
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2b06      	cmp	r3, #6
 800453a:	d00a      	beq.n	8004552 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800453c:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e040      	b.n	80045d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e03e      	b.n	80045d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800455a:	491f      	ldr	r1, [pc, #124]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4313      	orrs	r3, r2
 8004560:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004562:	f7fd f837 	bl	80015d4 <HAL_GetTick>
 8004566:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004568:	e009      	b.n	800457e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800456a:	f7fd f833 	bl	80015d4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004578:	d901      	bls.n	800457e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e028      	b.n	80045d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458a:	d1ee      	bne.n	800456a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b1e      	cmp	r3, #30
 8004590:	d008      	beq.n	80045a4 <HAL_PWREx_ConfigSupply+0x7c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b2e      	cmp	r3, #46	; 0x2e
 8004596:	d005      	beq.n	80045a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b1d      	cmp	r3, #29
 800459c:	d002      	beq.n	80045a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b2d      	cmp	r3, #45	; 0x2d
 80045a2:	d114      	bne.n	80045ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80045a4:	f7fd f816 	bl	80015d4 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045aa:	e009      	b.n	80045c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045ac:	f7fd f812 	bl	80015d4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ba:	d901      	bls.n	80045c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d1ee      	bne.n	80045ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58024800 	.word	0x58024800

080045dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e3ff      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8087 	beq.w	800470a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fc:	4b99      	ldr	r3, [pc, #612]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004606:	4b97      	ldr	r3, [pc, #604]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	2b10      	cmp	r3, #16
 8004610:	d007      	beq.n	8004622 <HAL_RCC_OscConfig+0x46>
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	2b18      	cmp	r3, #24
 8004616:	d110      	bne.n	800463a <HAL_RCC_OscConfig+0x5e>
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d10b      	bne.n	800463a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004622:	4b90      	ldr	r3, [pc, #576]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06c      	beq.n	8004708 <HAL_RCC_OscConfig+0x12c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d168      	bne.n	8004708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e3d9      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x76>
 8004644:	4b87      	ldr	r3, [pc, #540]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a86      	ldr	r2, [pc, #536]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e02e      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x98>
 800465a:	4b82      	ldr	r3, [pc, #520]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a81      	ldr	r2, [pc, #516]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b7f      	ldr	r3, [pc, #508]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a7e      	ldr	r2, [pc, #504]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800466c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e01d      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0xbc>
 800467e:	4b79      	ldr	r3, [pc, #484]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a78      	ldr	r2, [pc, #480]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b76      	ldr	r3, [pc, #472]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e00b      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004698:	4b72      	ldr	r3, [pc, #456]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a71      	ldr	r2, [pc, #452]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b6f      	ldr	r3, [pc, #444]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a6e      	ldr	r2, [pc, #440]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80046aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fc ff8c 	bl	80015d4 <HAL_GetTick>
 80046bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fc ff88 	bl	80015d4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e38d      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046d2:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0xe4>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc ff78 	bl	80015d4 <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fc ff74 	bl	80015d4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e379      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046fa:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x10c>
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80ae 	beq.w	8004874 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004718:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004722:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_RCC_OscConfig+0x162>
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b18      	cmp	r3, #24
 8004732:	d13a      	bne.n	80047aa <HAL_RCC_OscConfig+0x1ce>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d135      	bne.n	80047aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x17a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e34b      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004756:	f7fc ff6d 	bl	8001634 <HAL_GetREVID>
 800475a:	4603      	mov	r3, r0
 800475c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004760:	4293      	cmp	r3, r2
 8004762:	d817      	bhi.n	8004794 <HAL_RCC_OscConfig+0x1b8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d108      	bne.n	800477e <HAL_RCC_OscConfig+0x1a2>
 800476c:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004774:	4a3b      	ldr	r2, [pc, #236]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800477c:	e07a      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	031b      	lsls	r3, r3, #12
 800478c:	4935      	ldr	r1, [pc, #212]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004792:	e06f      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	4930      	ldr	r1, [pc, #192]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a8:	e064      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d045      	beq.n	800483e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0219 	bic.w	r2, r3, #25
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4929      	ldr	r1, [pc, #164]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fc ff06 	bl	80015d4 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fc ff02 	bl	80015d4 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e307      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047de:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	f7fc ff23 	bl	8001634 <HAL_GetREVID>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d817      	bhi.n	8004828 <HAL_RCC_OscConfig+0x24c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d108      	bne.n	8004812 <HAL_RCC_OscConfig+0x236>
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004808:	4a16      	ldr	r2, [pc, #88]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800480a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480e:	6053      	str	r3, [r2, #4]
 8004810:	e030      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	4910      	ldr	r1, [pc, #64]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
 8004826:	e025      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	490b      	ldr	r1, [pc, #44]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e01a      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <HAL_RCC_OscConfig+0x288>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fc fec3 	bl	80015d4 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004852:	f7fc febf 	bl	80015d4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d903      	bls.n	8004868 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e2c4      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
 8004864:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004868:	4ba4      	ldr	r3, [pc, #656]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ee      	bne.n	8004852 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a9 	beq.w	80049d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004882:	4b9e      	ldr	r3, [pc, #632]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800488a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800488c:	4b9b      	ldr	r3, [pc, #620]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d007      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2cc>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b18      	cmp	r3, #24
 800489c:	d13a      	bne.n	8004914 <HAL_RCC_OscConfig+0x338>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d135      	bne.n	8004914 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a8:	4b94      	ldr	r3, [pc, #592]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2e4>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e296      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048c0:	f7fc feb8 	bl	8001634 <HAL_GetREVID>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d817      	bhi.n	80048fe <HAL_RCC_OscConfig+0x322>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d108      	bne.n	80048e8 <HAL_RCC_OscConfig+0x30c>
 80048d6:	4b89      	ldr	r3, [pc, #548]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048de:	4a87      	ldr	r2, [pc, #540]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80048e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e6:	e075      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e8:	4b84      	ldr	r3, [pc, #528]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	069b      	lsls	r3, r3, #26
 80048f6:	4981      	ldr	r1, [pc, #516]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048fc:	e06a      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048fe:	4b7f      	ldr	r3, [pc, #508]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	497b      	ldr	r1, [pc, #492]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800490e:	4313      	orrs	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004912:	e05f      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d042      	beq.n	80049a2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800491c:	4b77      	ldr	r3, [pc, #476]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a76      	ldr	r2, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fc fe54 	bl	80015d4 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004930:	f7fc fe50 	bl	80015d4 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e255      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004942:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800494e:	f7fc fe71 	bl	8001634 <HAL_GetREVID>
 8004952:	4603      	mov	r3, r0
 8004954:	f241 0203 	movw	r2, #4099	; 0x1003
 8004958:	4293      	cmp	r3, r2
 800495a:	d817      	bhi.n	800498c <HAL_RCC_OscConfig+0x3b0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	2b20      	cmp	r3, #32
 8004962:	d108      	bne.n	8004976 <HAL_RCC_OscConfig+0x39a>
 8004964:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800496c:	4a63      	ldr	r2, [pc, #396]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800496e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004972:	6053      	str	r3, [r2, #4]
 8004974:	e02e      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
 8004976:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	069b      	lsls	r3, r3, #26
 8004984:	495d      	ldr	r1, [pc, #372]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
 800498a:	e023      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
 800498c:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	4958      	ldr	r1, [pc, #352]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
 80049a0:	e018      	b.n	80049d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a55      	ldr	r2, [pc, #340]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80049a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fc fe11 	bl	80015d4 <HAL_GetTick>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049b6:	f7fc fe0d 	bl	80015d4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e212      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049c8:	4b4c      	ldr	r3, [pc, #304]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d036      	beq.n	8004a4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d019      	beq.n	8004a1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e8:	4b44      	ldr	r3, [pc, #272]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	4a43      	ldr	r2, [pc, #268]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fc fdee 	bl	80015d4 <HAL_GetTick>
 80049f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fc:	f7fc fdea 	bl	80015d4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1ef      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x420>
 8004a1a:	e018      	b.n	8004a4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a20:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fc fdd4 	bl	80015d4 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fc fdd0 	bl	80015d4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1d5      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a42:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d036      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d019      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a25      	ldr	r2, [pc, #148]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a6e:	f7fc fdb1 	bl	80015d4 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a76:	f7fc fdad 	bl	80015d4 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e1b2      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x49a>
 8004a94:	e018      	b.n	8004ac8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aa2:	f7fc fd97 	bl	80015d4 <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004aaa:	f7fc fd93 	bl	80015d4 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e198      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCC_OscConfig+0x520>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8085 	beq.w	8004be0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_RCC_OscConfig+0x524>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_OscConfig+0x524>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fd77 	bl	80015d4 <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae8:	e00c      	b.n	8004b04 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aea:	f7fc fd73 	bl	80015d4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b64      	cmp	r3, #100	; 0x64
 8004af6:	d905      	bls.n	8004b04 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e178      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
 8004afc:	58024400 	.word	0x58024400
 8004b00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b04:	4b96      	ldr	r3, [pc, #600]	; (8004d60 <HAL_RCC_OscConfig+0x784>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ec      	beq.n	8004aea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x54a>
 8004b18:	4b92      	ldr	r3, [pc, #584]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a91      	ldr	r2, [pc, #580]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	e02d      	b.n	8004b82 <HAL_RCC_OscConfig+0x5a6>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x56c>
 8004b2e:	4b8d      	ldr	r3, [pc, #564]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a8c      	ldr	r2, [pc, #560]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	4b8a      	ldr	r3, [pc, #552]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a89      	ldr	r2, [pc, #548]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	e01c      	b.n	8004b82 <HAL_RCC_OscConfig+0x5a6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_OscConfig+0x58e>
 8004b50:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a83      	ldr	r2, [pc, #524]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5c:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a80      	ldr	r2, [pc, #512]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	e00b      	b.n	8004b82 <HAL_RCC_OscConfig+0x5a6>
 8004b6a:	4b7e      	ldr	r3, [pc, #504]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a7d      	ldr	r2, [pc, #500]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
 8004b76:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a7a      	ldr	r2, [pc, #488]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d015      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fc fd23 	bl	80015d4 <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fc fd1f 	bl	80015d4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e122      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba8:	4b6e      	ldr	r3, [pc, #440]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ee      	beq.n	8004b92 <HAL_RCC_OscConfig+0x5b6>
 8004bb4:	e014      	b.n	8004be0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb6:	f7fc fd0d 	bl	80015d4 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fc fd09 	bl	80015d4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e10c      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ee      	bne.n	8004bbe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8101 	beq.w	8004dec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bea:	4b5e      	ldr	r3, [pc, #376]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf2:	2b18      	cmp	r3, #24
 8004bf4:	f000 80bc 	beq.w	8004d70 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f040 8095 	bne.w	8004d2c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c02:	4b58      	ldr	r3, [pc, #352]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a57      	ldr	r2, [pc, #348]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fc fce1 	bl	80015d4 <HAL_GetTick>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fc fcdd 	bl	80015d4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0e2      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c28:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c34:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c38:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <HAL_RCC_OscConfig+0x78c>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	430a      	orrs	r2, r1
 8004c48:	4946      	ldr	r1, [pc, #280]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	628b      	str	r3, [r1, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	025b      	lsls	r3, r3, #9
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	3b01      	subs	r3, #1
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c7e:	4939      	ldr	r1, [pc, #228]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a36      	ldr	r2, [pc, #216]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c90:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c94:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <HAL_RCC_OscConfig+0x790>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c9c:	00d2      	lsls	r2, r2, #3
 8004c9e:	4931      	ldr	r1, [pc, #196]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ca4:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f023 020c 	bic.w	r2, r3, #12
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	492c      	ldr	r1, [pc, #176]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f023 0202 	bic.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	4928      	ldr	r1, [pc, #160]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd4:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fc fc66 	bl	80015d4 <HAL_GetTick>
 8004d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc fc62 	bl	80015d4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e067      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x730>
 8004d2a:	e05f      	b.n	8004dec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fc fc4c 	bl	80015d4 <HAL_GetTick>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fc fc48 	bl	80015d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04d      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_OscConfig+0x788>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x764>
 8004d5e:	e045      	b.n	8004dec <HAL_RCC_OscConfig+0x810>
 8004d60:	58024800 	.word	0x58024800
 8004d64:	58024400 	.word	0x58024400
 8004d68:	fffffc0c 	.word	0xfffffc0c
 8004d6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d70:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <HAL_RCC_OscConfig+0x81c>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <HAL_RCC_OscConfig+0x81c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d031      	beq.n	8004de8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f003 0203 	and.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d12a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d122      	bne.n	8004de8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d11a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	0a5b      	lsrs	r3, r3, #9
 8004db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d111      	bne.n	8004de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	0e1b      	lsrs	r3, r3, #24
 8004dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400

08004dfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e19c      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d910      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b87      	ldr	r3, [pc, #540]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 020f 	bic.w	r2, r3, #15
 8004e26:	4985      	ldr	r1, [pc, #532]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e184      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d010      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d908      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e5c:	4b78      	ldr	r3, [pc, #480]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	4975      	ldr	r1, [pc, #468]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	4b70      	ldr	r3, [pc, #448]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d908      	bls.n	8004e9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e8a:	4b6d      	ldr	r3, [pc, #436]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	496a      	ldr	r1, [pc, #424]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	4b64      	ldr	r3, [pc, #400]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d908      	bls.n	8004eca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb8:	4b61      	ldr	r3, [pc, #388]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	495e      	ldr	r1, [pc, #376]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d908      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ee6:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4953      	ldr	r1, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d908      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f023 020f 	bic.w	r2, r3, #15
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4947      	ldr	r1, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d055      	beq.n	8004fde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f32:	4b43      	ldr	r3, [pc, #268]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4940      	ldr	r1, [pc, #256]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f4c:	4b3c      	ldr	r3, [pc, #240]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d121      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0f6      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0ea      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0de      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0d6      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f9c:	4b28      	ldr	r3, [pc, #160]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f023 0207 	bic.w	r2, r3, #7
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4925      	ldr	r1, [pc, #148]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fae:	f7fc fb11 	bl	80015d4 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb6:	f7fc fb0d 	bl	80015d4 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0be      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d1eb      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d208      	bcs.n	800500c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f023 020f 	bic.w	r2, r3, #15
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x244>)
 8005008:	4313      	orrs	r3, r2
 800500a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d214      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	4906      	ldr	r1, [pc, #24]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_RCC_ClockConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e086      	b.n	800514a <HAL_RCC_ClockConfig+0x34e>
 800503c:	52002000 	.word	0x52002000
 8005040:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800505c:	429a      	cmp	r2, r3
 800505e:	d208      	bcs.n	8005072 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005060:	4b3c      	ldr	r3, [pc, #240]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	4939      	ldr	r1, [pc, #228]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 800506e:	4313      	orrs	r3, r2
 8005070:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d010      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800508a:	429a      	cmp	r2, r3
 800508c:	d208      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	492e      	ldr	r1, [pc, #184]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 800509c:	4313      	orrs	r3, r2
 800509e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d208      	bcs.n	80050ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050bc:	4b25      	ldr	r3, [pc, #148]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	4922      	ldr	r1, [pc, #136]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d208      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4917      	ldr	r1, [pc, #92]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050fc:	f000 f89e 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	4912      	ldr	r1, [pc, #72]	; (8005158 <HAL_RCC_ClockConfig+0x35c>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_RCC_ClockConfig+0x358>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	4a0d      	ldr	r2, [pc, #52]	; (8005158 <HAL_RCC_ClockConfig+0x35c>)
 8005124:	5cd3      	ldrb	r3, [r2, r3]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_RCC_ClockConfig+0x360>)
 8005132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x364>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x368>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7fc f860 	bl	8001204 <HAL_InitTick>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	0800e8f4 	.word	0x0800e8f4
 800515c:	24000004 	.word	0x24000004
 8005160:	24000000 	.word	0x24000000
 8005164:	24000008 	.word	0x24000008

08005168 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d12a      	bne.n	80051d0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 800517c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005180:	4a2b      	ldr	r2, [pc, #172]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800518a:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a2:	2303      	movs	r3, #3
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80051ae:	f107 031c 	add.w	r3, r7, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	481f      	ldr	r0, [pc, #124]	; (8005234 <HAL_RCC_MCOConfig+0xcc>)
 80051b6:	f7fe fe37 	bl	8003e28 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	430b      	orrs	r3, r1
 80051c8:	4919      	ldr	r1, [pc, #100]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80051ce:	e02a      	b.n	8005226 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 80051d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 80051e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80051ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f8:	2303      	movs	r3, #3
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005204:	f107 031c 	add.w	r3, r7, #28
 8005208:	4619      	mov	r1, r3
 800520a:	480b      	ldr	r0, [pc, #44]	; (8005238 <HAL_RCC_MCOConfig+0xd0>)
 800520c:	f7fe fe0c 	bl	8003e28 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	01d9      	lsls	r1, r3, #7
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	430b      	orrs	r3, r1
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_MCOConfig+0xc8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	610b      	str	r3, [r1, #16]
}
 8005226:	bf00      	nop
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	58020000 	.word	0x58020000
 8005238:	58020800 	.word	0x58020800

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005242:	4bb3      	ldr	r3, [pc, #716]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524a:	2b18      	cmp	r3, #24
 800524c:	f200 8155 	bhi.w	80054fa <HAL_RCC_GetSysClockFreq+0x2be>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	080052bd 	.word	0x080052bd
 800525c:	080054fb 	.word	0x080054fb
 8005260:	080054fb 	.word	0x080054fb
 8005264:	080054fb 	.word	0x080054fb
 8005268:	080054fb 	.word	0x080054fb
 800526c:	080054fb 	.word	0x080054fb
 8005270:	080054fb 	.word	0x080054fb
 8005274:	080054fb 	.word	0x080054fb
 8005278:	080052e3 	.word	0x080052e3
 800527c:	080054fb 	.word	0x080054fb
 8005280:	080054fb 	.word	0x080054fb
 8005284:	080054fb 	.word	0x080054fb
 8005288:	080054fb 	.word	0x080054fb
 800528c:	080054fb 	.word	0x080054fb
 8005290:	080054fb 	.word	0x080054fb
 8005294:	080054fb 	.word	0x080054fb
 8005298:	080052e9 	.word	0x080052e9
 800529c:	080054fb 	.word	0x080054fb
 80052a0:	080054fb 	.word	0x080054fb
 80052a4:	080054fb 	.word	0x080054fb
 80052a8:	080054fb 	.word	0x080054fb
 80052ac:	080054fb 	.word	0x080054fb
 80052b0:	080054fb 	.word	0x080054fb
 80052b4:	080054fb 	.word	0x080054fb
 80052b8:	080052ef 	.word	0x080052ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052bc:	4b94      	ldr	r3, [pc, #592]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052c8:	4b91      	ldr	r3, [pc, #580]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	4a90      	ldr	r2, [pc, #576]	; (8005514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80052da:	e111      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052dc:	4b8d      	ldr	r3, [pc, #564]	; (8005514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052de:	61bb      	str	r3, [r7, #24]
    break;
 80052e0:	e10e      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052e2:	4b8d      	ldr	r3, [pc, #564]	; (8005518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052e4:	61bb      	str	r3, [r7, #24]
    break;
 80052e6:	e10b      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80052e8:	4b8c      	ldr	r3, [pc, #560]	; (800551c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052ea:	61bb      	str	r3, [r7, #24]
    break;
 80052ec:	e108      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052ee:	4b88      	ldr	r3, [pc, #544]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80052f8:	4b85      	ldr	r3, [pc, #532]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005302:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005304:	4b82      	ldr	r3, [pc, #520]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800530e:	4b80      	ldr	r3, [pc, #512]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80e1 	beq.w	80054f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b02      	cmp	r3, #2
 8005336:	f000 8083 	beq.w	8005440 <HAL_RCC_GetSysClockFreq+0x204>
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b02      	cmp	r3, #2
 800533e:	f200 80a1 	bhi.w	8005484 <HAL_RCC_GetSysClockFreq+0x248>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x114>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d056      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800534e:	e099      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005350:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02d      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800535c:	4b6c      	ldr	r3, [pc, #432]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	4a6b      	ldr	r2, [pc, #428]	; (8005514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b62      	ldr	r3, [pc, #392]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a02 	vldr	s12, [r7, #8]
 800539a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80053b6:	e087      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ca:	4b51      	ldr	r3, [pc, #324]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a02 	vldr	s12, [r7, #8]
 80053de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053fa:	e065      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	4b40      	ldr	r3, [pc, #256]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005422:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543e:	e043      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800552c <HAL_RCC_GetSysClockFreq+0x2f0>
 800544e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005452:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005462:	ed97 6a02 	vldr	s12, [r7, #8]
 8005466:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800546a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005482:	e021      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d2:	3301      	adds	r3, #1
 80054d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ec:	ee17 3a90 	vmov	r3, s15
 80054f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80054f2:	e005      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
    break;
 80054f8:	e002      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054fc:	61bb      	str	r3, [r7, #24]
    break;
 80054fe:	bf00      	nop
  }

  return sysclockfreq;
 8005500:	69bb      	ldr	r3, [r7, #24]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3724      	adds	r7, #36	; 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
 8005514:	03d09000 	.word	0x03d09000
 8005518:	003d0900 	.word	0x003d0900
 800551c:	017d7840 	.word	0x017d7840
 8005520:	46000000 	.word	0x46000000
 8005524:	4c742400 	.word	0x4c742400
 8005528:	4a742400 	.word	0x4a742400
 800552c:	4bbebc20 	.word	0x4bbebc20

08005530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005536:	f7ff fe81 	bl	800523c <HAL_RCC_GetSysClockFreq>
 800553a:	4602      	mov	r2, r0
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <HAL_RCC_GetHCLKFreq+0x50>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	490f      	ldr	r1, [pc, #60]	; (8005584 <HAL_RCC_GetHCLKFreq+0x54>)
 8005548:	5ccb      	ldrb	r3, [r1, r3]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_RCC_GetHCLKFreq+0x50>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <HAL_RCC_GetHCLKFreq+0x54>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <HAL_RCC_GetHCLKFreq+0x58>)
 800556c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800556e:	4a07      	ldr	r2, [pc, #28]	; (800558c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_RCC_GetHCLKFreq+0x58>)
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	58024400 	.word	0x58024400
 8005584:	0800e8f4 	.word	0x0800e8f4
 8005588:	24000004 	.word	0x24000004
 800558c:	24000000 	.word	0x24000000

08005590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005594:	f7ff ffcc 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4904      	ldr	r1, [pc, #16]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	58024400 	.word	0x58024400
 80055b8:	0800e8f4 	.word	0x0800e8f4

080055bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055c0:	f7ff ffb6 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	4904      	ldr	r1, [pc, #16]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	58024400 	.word	0x58024400
 80055e4:	0800e8f4 	.word	0x0800e8f4

080055e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	223f      	movs	r2, #63	; 0x3f
 80055f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055f8:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0207 	and.w	r2, r3, #7
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005604:	4b17      	ldr	r3, [pc, #92]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f003 020f 	and.w	r2, r3, #15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCC_GetClockConfig+0x7c>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_RCC_GetClockConfig+0x80>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 020f 	and.w	r2, r3, #15
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	58024400 	.word	0x58024400
 8005668:	52002000 	.word	0x52002000

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005674:	2300      	movs	r3, #0
 8005676:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005678:	2300      	movs	r3, #0
 800567a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03f      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005690:	d02a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005696:	d824      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d018      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a2:	d81e      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ac:	d007      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056ae:	e018      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4bab      	ldr	r3, [pc, #684]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4aaa      	ldr	r2, [pc, #680]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056bc:	e015      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2102      	movs	r1, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 f9ff 	bl	8006ac8 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056ce:	e00c      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3324      	adds	r3, #36	; 0x24
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 faa8 	bl	8006c2c <RCCEx_PLL3_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056e0:	e003      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	75fb      	strb	r3, [r7, #23]
      break;
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056f0:	4b9b      	ldr	r3, [pc, #620]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fc:	4998      	ldr	r1, [pc, #608]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	650b      	str	r3, [r1, #80]	; 0x50
 8005702:	e001      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
 8005706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d03d      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	2b04      	cmp	r3, #4
 800571a:	d826      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005739 	.word	0x08005739
 8005728:	08005747 	.word	0x08005747
 800572c:	08005759 	.word	0x08005759
 8005730:	08005771 	.word	0x08005771
 8005734:	08005771 	.word	0x08005771
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4b89      	ldr	r3, [pc, #548]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a88      	ldr	r2, [pc, #544]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005744:	e015      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 f9bb 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005756:	e00c      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f001 fa64 	bl	8006c2c <RCCEx_PLL3_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
      break;
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005778:	4b79      	ldr	r3, [pc, #484]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	f023 0207 	bic.w	r2, r3, #7
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	4976      	ldr	r1, [pc, #472]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	650b      	str	r3, [r1, #80]	; 0x50
 800578a:	e001      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005798:	2b00      	cmp	r3, #0
 800579a:	d042      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d02b      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057aa:	d825      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057ac:	2bc0      	cmp	r3, #192	; 0xc0
 80057ae:	d028      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057b0:	2bc0      	cmp	r3, #192	; 0xc0
 80057b2:	d821      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d016      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d81d      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d007      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80057c4:	e018      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c6:	4b66      	ldr	r3, [pc, #408]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a65      	ldr	r2, [pc, #404]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057d2:	e017      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 f974 	bl	8006ac8 <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057e4:	e00e      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fa1d 	bl	8006c2c <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057f6:	e005      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	e002      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800580a:	4b55      	ldr	r3, [pc, #340]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	4952      	ldr	r1, [pc, #328]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005818:	4313      	orrs	r3, r2
 800581a:	650b      	str	r3, [r1, #80]	; 0x50
 800581c:	e001      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	2b00      	cmp	r3, #0
 800582c:	d049      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005838:	d030      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800583a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800583e:	d82a      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005840:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005844:	d02c      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005846:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800584a:	d824      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800584c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005850:	d018      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005856:	d81e      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800585c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005860:	d007      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005862:	e018      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a3d      	ldr	r2, [pc, #244]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005870:	e017      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 f925 	bl	8006ac8 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005882:	e00e      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3324      	adds	r3, #36	; 0x24
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f9ce 	bl	8006c2c <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005894:	e005      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      break;
 800589a:	e002      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80058a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058a8:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058b6:	492a      	ldr	r1, [pc, #168]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	658b      	str	r3, [r1, #88]	; 0x58
 80058bc:	e001      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d04c      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058d8:	d030      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80058da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058de:	d82a      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058e4:	d02c      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80058e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058ea:	d824      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f0:	d018      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80058f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f6:	d81e      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80058fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005902:	e018      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005910:	e017      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f8d5 	bl	8006ac8 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005922:	e00e      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f001 f97e 	bl	8006c2c <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005934:	e005      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
      break;
 800593a:	e002      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10d      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005956:	4902      	ldr	r1, [pc, #8]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	658b      	str	r3, [r1, #88]	; 0x58
 800595c:	e004      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800595e:	bf00      	nop
 8005960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d032      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005978:	2b30      	cmp	r3, #48	; 0x30
 800597a:	d01c      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d817      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005980:	2b20      	cmp	r3, #32
 8005982:	d00c      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005984:	2b20      	cmp	r3, #32
 8005986:	d813      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800598c:	2b10      	cmp	r3, #16
 800598e:	d10f      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4bb1      	ldr	r3, [pc, #708]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4ab0      	ldr	r2, [pc, #704]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800599c:	e00e      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f88f 	bl	8006ac8 <RCCEx_PLL2_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80059ae:	e005      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80059ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059c2:	4ba5      	ldr	r3, [pc, #660]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ce:	49a2      	ldr	r1, [pc, #648]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059d4:	e001      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d047      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ee:	d030      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80059f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f4:	d82a      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80059f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059fa:	d02c      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80059fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a00:	d824      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a06:	d018      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	d81e      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	d007      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005a18:	e018      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1a:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a8e      	ldr	r2, [pc, #568]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a26:	e017      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f84a 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a38:	e00e      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3324      	adds	r3, #36	; 0x24
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f8f3 	bl	8006c2c <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a5e:	4b7e      	ldr	r3, [pc, #504]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6a:	497b      	ldr	r1, [pc, #492]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a70:	e001      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d049      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a8a:	d02e      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a90:	d828      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a96:	d02a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a9c:	d822      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aa2:	d026      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aa8:	d81c      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aae:	d010      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ab4:	d816      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01d      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fffe 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ad0:	e012      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f8a7 	bl	8006c2c <RCCEx_PLL3_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ae2:	e009      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	e006      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005aea:	bf00      	nop
 8005aec:	e004      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005afe:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0a:	4953      	ldr	r1, [pc, #332]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8005b10:	e001      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04b      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2c:	d02e      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b32:	d828      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d02a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d822      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b44:	d026      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b4a:	d81c      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b50:	d010      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d816      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01d      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b60:	d111      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2101      	movs	r1, #1
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 ffad 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b72:	e012      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 f856 	bl	8006c2c <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b84:	e009      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b8c:	bf00      	nop
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ba0:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bae:	492a      	ldr	r1, [pc, #168]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	658b      	str	r3, [r1, #88]	; 0x58
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d022      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd2:	d108      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff74 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8005bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005bf4:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	4915      	ldr	r1, [pc, #84]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d031      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c20:	d00e      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d814      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d017      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8005c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c30:	d10f      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c3e:	e00e      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	2101      	movs	r1, #1
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 ff3e 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c50:	e005      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8005c58:	58024400 	.word	0x58024400
      break;
 8005c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c64:	4bbc      	ldr	r3, [pc, #752]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	49b9      	ldr	r1, [pc, #740]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	650b      	str	r3, [r1, #80]	; 0x50
 8005c76:	e001      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d032      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d81b      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005ca9 	.word	0x08005ca9
 8005ca0:	08005cb7 	.word	0x08005cb7
 8005ca4:	08005ccf 	.word	0x08005ccf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca8:	4bab      	ldr	r3, [pc, #684]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4aaa      	ldr	r2, [pc, #680]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cb4:	e00c      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2102      	movs	r1, #2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ff03 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cc6:	e003      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8005cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cd6:	4ba0      	ldr	r3, [pc, #640]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f023 0203 	bic.w	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	499d      	ldr	r1, [pc, #628]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ce8:	e001      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8086 	beq.w	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cfc:	4b97      	ldr	r3, [pc, #604]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a96      	ldr	r2, [pc, #600]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d08:	f7fb fc64 	bl	80015d4 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0e:	e009      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d10:	f7fb fc60 	bl	80015d4 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b64      	cmp	r3, #100	; 0x64
 8005d1c:	d902      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	75fb      	strb	r3, [r7, #23]
        break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d24:	4b8d      	ldr	r3, [pc, #564]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ef      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d166      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d36:	4b88      	ldr	r3, [pc, #544]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d40:	4053      	eors	r3, r2
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d013      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d4a:	4b83      	ldr	r3, [pc, #524]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d54:	4b80      	ldr	r3, [pc, #512]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	4a7f      	ldr	r2, [pc, #508]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d60:	4b7d      	ldr	r3, [pc, #500]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a7c      	ldr	r2, [pc, #496]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d6c:	4a7a      	ldr	r2, [pc, #488]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7c:	d115      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fb fc29 	bl	80015d4 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d84:	e00b      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fb fc25 	bl	80015d4 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d902      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005d9c:	e005      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ed      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d126      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dbe:	d10d      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005dc0:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dce:	0919      	lsrs	r1, r3, #4
 8005dd0:	4b63      	ldr	r3, [pc, #396]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	4960      	ldr	r1, [pc, #384]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8005ddc:	4b5e      	ldr	r3, [pc, #376]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4a5d      	ldr	r2, [pc, #372]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005de2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005de6:	6113      	str	r3, [r2, #16]
 8005de8:	4b5b      	ldr	r3, [pc, #364]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df6:	4958      	ldr	r1, [pc, #352]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	670b      	str	r3, [r1, #112]	; 0x70
 8005dfc:	e004      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	75bb      	strb	r3, [r7, #22]
 8005e02:	e001      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d07e      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e18:	2b28      	cmp	r3, #40	; 0x28
 8005e1a:	d867      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x880>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005ef3 	.word	0x08005ef3
 8005e28:	08005eed 	.word	0x08005eed
 8005e2c:	08005eed 	.word	0x08005eed
 8005e30:	08005eed 	.word	0x08005eed
 8005e34:	08005eed 	.word	0x08005eed
 8005e38:	08005eed 	.word	0x08005eed
 8005e3c:	08005eed 	.word	0x08005eed
 8005e40:	08005eed 	.word	0x08005eed
 8005e44:	08005ec9 	.word	0x08005ec9
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005eed 	.word	0x08005eed
 8005e50:	08005eed 	.word	0x08005eed
 8005e54:	08005eed 	.word	0x08005eed
 8005e58:	08005eed 	.word	0x08005eed
 8005e5c:	08005eed 	.word	0x08005eed
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005edb 	.word	0x08005edb
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08005eed 	.word	0x08005eed
 8005e70:	08005eed 	.word	0x08005eed
 8005e74:	08005eed 	.word	0x08005eed
 8005e78:	08005eed 	.word	0x08005eed
 8005e7c:	08005eed 	.word	0x08005eed
 8005e80:	08005eed 	.word	0x08005eed
 8005e84:	08005ef3 	.word	0x08005ef3
 8005e88:	08005eed 	.word	0x08005eed
 8005e8c:	08005eed 	.word	0x08005eed
 8005e90:	08005eed 	.word	0x08005eed
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	08005eed 	.word	0x08005eed
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	08005eed 	.word	0x08005eed
 8005ea4:	08005ef3 	.word	0x08005ef3
 8005ea8:	08005eed 	.word	0x08005eed
 8005eac:	08005eed 	.word	0x08005eed
 8005eb0:	08005eed 	.word	0x08005eed
 8005eb4:	08005eed 	.word	0x08005eed
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005eed 	.word	0x08005eed
 8005ec0:	08005eed 	.word	0x08005eed
 8005ec4:	08005ef3 	.word	0x08005ef3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fdfa 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e00c      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fea3 	bl	8006c2c <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005eea:	e003      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8005ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f06:	4914      	ldr	r1, [pc, #80]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	654b      	str	r3, [r1, #84]	; 0x54
 8005f0c:	e001      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03e      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d827      	bhi.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f7d 	.word	0x08005f7d
 8005f30:	08005f45 	.word	0x08005f45
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f7d 	.word	0x08005f7d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fdbc 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f54:	e013      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	58024800 	.word	0x58024800
 8005f60:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3324      	adds	r3, #36	; 0x24
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fe5e 	bl	8006c2c <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7a:	e000      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d109      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f84:	4b9f      	ldr	r3, [pc, #636]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	f023 0207 	bic.w	r2, r3, #7
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	499c      	ldr	r1, [pc, #624]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	654b      	str	r3, [r1, #84]	; 0x54
 8005f96:	e001      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d039      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d820      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005ffb 	.word	0x08005ffb
 8005fbc:	08005fd1 	.word	0x08005fd1
 8005fc0:	08005fe3 	.word	0x08005fe3
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fd76 	bl	8006ac8 <RCCEx_PLL2_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005fe0:	e00c      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3324      	adds	r3, #36	; 0x24
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe1f 	bl	8006c2c <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006002:	4b80      	ldr	r3, [pc, #512]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f023 0207 	bic.w	r2, r3, #7
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006010:	497c      	ldr	r1, [pc, #496]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006012:	4313      	orrs	r3, r2
 8006014:	658b      	str	r3, [r1, #88]	; 0x58
 8006016:	e001      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d04b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006032:	d02e      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006038:	d828      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d02a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006044:	d822      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800604a:	d026      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800604c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006050:	d81c      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006056:	d010      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605c:	d816      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01d      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006066:	d111      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fd2a 	bl	8006ac8 <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006078:	e012      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3324      	adds	r3, #36	; 0x24
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fdd3 	bl	8006c2c <RCCEx_PLL3_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800608a:	e009      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	75fb      	strb	r3, [r7, #23]
      break;
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006092:	bf00      	nop
 8006094:	e004      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800609e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b57      	ldr	r3, [pc, #348]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	4953      	ldr	r1, [pc, #332]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	654b      	str	r3, [r1, #84]	; 0x54
 80060ba:	e001      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d04b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060d6:	d02e      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80060d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060dc:	d828      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e2:	d02a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xace>
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e8:	d822      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80060ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ee:	d026      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80060f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f4:	d81c      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80060f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fa:	d010      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80060fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006100:	d816      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01d      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d111      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fcd8 	bl	8006ac8 <RCCEx_PLL2_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800611c:	e012      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3324      	adds	r3, #36	; 0x24
 8006122:	2102      	movs	r1, #2
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fd81 	bl	8006c2c <RCCEx_PLL3_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800612e:	e009      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
      break;
 8006134:	e006      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006136:	bf00      	nop
 8006138:	e004      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800613a:	bf00      	nop
 800613c:	e002      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006158:	492a      	ldr	r1, [pc, #168]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800615a:	4313      	orrs	r3, r2
 800615c:	658b      	str	r3, [r1, #88]	; 0x58
 800615e:	e001      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b00      	cmp	r3, #0
 800616e:	d04d      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006176:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800617a:	d02e      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800617c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006180:	d828      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006186:	d02a      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d822      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800618e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006192:	d026      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006194:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006198:	d81c      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800619a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619e:	d010      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80061a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061a4:	d816      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01d      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80061aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ae:	d111      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fc86 	bl	8006ac8 <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061c0:	e012      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fd2f 	bl	8006c2c <RCCEx_PLL3_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061d2:	e009      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]
      break;
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061da:	bf00      	nop
 80061dc:	e004      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80061f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061fc:	4901      	ldr	r1, [pc, #4]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	658b      	str	r3, [r1, #88]	; 0x58
 8006202:	e003      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d10a      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fcfe 	bl	8006c2c <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800623a:	4b8c      	ldr	r3, [pc, #560]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006248:	4988      	ldr	r1, [pc, #544]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800624a:	4313      	orrs	r3, r2
 800624c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3324      	adds	r3, #36	; 0x24
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fcdd 	bl	8006c2c <RCCEx_PLL3_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800627c:	4b7b      	ldr	r3, [pc, #492]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800628a:	4978      	ldr	r1, [pc, #480]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800628c:	4313      	orrs	r3, r2
 800628e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d034      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062a6:	d01d      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80062a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ac:	d817      	bhi.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b6:	d009      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80062b8:	e011      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fc01 	bl	8006ac8 <RCCEx_PLL2_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062ca:	e00c      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3324      	adds	r3, #36	; 0x24
 80062d0:	2102      	movs	r1, #2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fcaa 	bl	8006c2c <RCCEx_PLL3_Config>
 80062d8:	4603      	mov	r3, r0
 80062da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062dc:	e003      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
      break;
 80062e2:	e000      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80062e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ec:	4b5f      	ldr	r3, [pc, #380]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80062ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062fa:	495c      	ldr	r1, [pc, #368]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006300:	e001      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d033      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800631c:	d01c      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800631e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006322:	d816      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8006324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006328:	d003      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800632a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800632e:	d007      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8006330:	e00f      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006332:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4a4d      	ldr	r2, [pc, #308]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800633e:	e00c      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fc70 	bl	8006c2c <RCCEx_PLL3_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8006358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006360:	4b42      	ldr	r3, [pc, #264]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	493f      	ldr	r1, [pc, #252]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006370:	4313      	orrs	r3, r2
 8006372:	654b      	str	r3, [r1, #84]	; 0x54
 8006374:	e001      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d029      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d007      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8006394:	e00f      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006396:	4b35      	ldr	r3, [pc, #212]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800639c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063a2:	e00b      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	2102      	movs	r1, #2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fb8c 	bl	8006ac8 <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063c2:	4b2a      	ldr	r3, [pc, #168]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ce:	4927      	ldr	r1, [pc, #156]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063d4:	e001      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	2102      	movs	r1, #2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fc1d 	bl	8006c2c <RCCEx_PLL3_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d035      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006412:	d017      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006418:	d811      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800641a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800641e:	d013      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8006420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006424:	d80b      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d010      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d106      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006430:	4b0e      	ldr	r3, [pc, #56]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800643c:	e007      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      break;
 8006442:	e004      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800644c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10d      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006462:	4902      	ldr	r1, [pc, #8]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006464:	4313      	orrs	r3, r2
 8006466:	654b      	str	r3, [r1, #84]	; 0x54
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006480:	4b31      	ldr	r3, [pc, #196]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648c:	492e      	ldr	r1, [pc, #184]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064ac:	4926      	ldr	r1, [pc, #152]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064be:	4b22      	ldr	r3, [pc, #136]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ca:	491f      	ldr	r1, [pc, #124]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064e6:	6113      	str	r3, [r2, #16]
 80064e8:	4b17      	ldr	r3, [pc, #92]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064f2:	4915      	ldr	r1, [pc, #84]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da08      	bge.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006500:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006504:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652c:	4906      	ldr	r1, [pc, #24]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006532:	7dbb      	ldrb	r3, [r7, #22]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	58024400 	.word	0x58024400

0800654c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006550:	f7fe ffee 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4904      	ldr	r1, [pc, #16]	; (8006574 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400
 8006574:	0800e8f4 	.word	0x0800e8f4

08006578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006580:	4ba1      	ldr	r3, [pc, #644]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800658a:	4b9f      	ldr	r3, [pc, #636]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	0b1b      	lsrs	r3, r3, #12
 8006590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006594:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006596:	4b9c      	ldr	r3, [pc, #624]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80065a2:	4b99      	ldr	r3, [pc, #612]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8111 	beq.w	80067e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	f000 8083 	beq.w	80066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f200 80a1 	bhi.w	8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d056      	beq.n	8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065e2:	e099      	b.n	8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e4:	4b88      	ldr	r3, [pc, #544]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02d      	beq.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065f0:	4b85      	ldr	r3, [pc, #532]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	4a84      	ldr	r2, [pc, #528]	; (800680c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a03 	vldr	s12, [r7, #12]
 800662e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800664a:	e087      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800665a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665e:	4b6a      	ldr	r3, [pc, #424]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006672:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800668e:	e065      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800669e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a2:	4b59      	ldr	r3, [pc, #356]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d2:	e043      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800681c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e6:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800670a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006716:	e021      	b.n	800675c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	4b37      	ldr	r3, [pc, #220]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	ed97 6a03 	vldr	s12, [r7, #12]
 800673e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800675a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	0a5b      	lsrs	r3, r3, #9
 8006762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006776:	edd7 6a07 	vldr	s13, [r7, #28]
 800677a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006782:	ee17 2a90 	vmov	r2, s15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b0:	ee17 2a90 	vmov	r2, s15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	0e1b      	lsrs	r3, r3, #24
 80067be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067de:	ee17 2a90 	vmov	r2, s15
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067e6:	e008      	b.n	80067fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	609a      	str	r2, [r3, #8]
}
 80067fa:	bf00      	nop
 80067fc:	3724      	adds	r7, #36	; 0x24
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
 800680c:	03d09000 	.word	0x03d09000
 8006810:	46000000 	.word	0x46000000
 8006814:	4c742400 	.word	0x4c742400
 8006818:	4a742400 	.word	0x4a742400
 800681c:	4bbebc20 	.word	0x4bbebc20

08006820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006820:	b480      	push	{r7}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006828:	4ba1      	ldr	r3, [pc, #644]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006832:	4b9f      	ldr	r3, [pc, #636]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	0d1b      	lsrs	r3, r3, #20
 8006838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800683c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800683e:	4b9c      	ldr	r3, [pc, #624]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800684a:	4b99      	ldr	r3, [pc, #612]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8111 	beq.w	8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b02      	cmp	r3, #2
 8006872:	f000 8083 	beq.w	800697c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f200 80a1 	bhi.w	80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d056      	beq.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800688a:	e099      	b.n	80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688c:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02d      	beq.n	80068f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006898:	4b85      	ldr	r3, [pc, #532]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	4a84      	ldr	r2, [pc, #528]	; (8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
 80068a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068f2:	e087      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006906:	4b6a      	ldr	r3, [pc, #424]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a03 	vldr	s12, [r7, #12]
 800691a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006936:	e065      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006942:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694a:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695a:	ed97 6a03 	vldr	s12, [r7, #12]
 800695e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800697a:	e043      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b48      	ldr	r3, [pc, #288]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069be:	e021      	b.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d2:	4b37      	ldr	r3, [pc, #220]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006a04:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	0a5b      	lsrs	r3, r3, #9
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2a:	ee17 2a90 	vmov	r2, s15
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a58:	ee17 2a90 	vmov	r2, s15
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006a60:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	0e1b      	lsrs	r3, r3, #24
 8006a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a86:	ee17 2a90 	vmov	r2, s15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
}
 8006aa2:	bf00      	nop
 8006aa4:	3724      	adds	r7, #36	; 0x24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	03d09000 	.word	0x03d09000
 8006ab8:	46000000 	.word	0x46000000
 8006abc:	4c742400 	.word	0x4c742400
 8006ac0:	4a742400 	.word	0x4a742400
 8006ac4:	4bbebc20 	.word	0x4bbebc20

08006ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ad6:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d101      	bne.n	8006ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e099      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ae6:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af2:	f7fa fd6f 	bl	80015d4 <HAL_GetTick>
 8006af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006af8:	e008      	b.n	8006b0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006afa:	f7fa fd6b 	bl	80015d4 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e086      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b0c:	4b45      	ldr	r3, [pc, #276]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f0      	bne.n	8006afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	493f      	ldr	r1, [pc, #252]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	025b      	lsls	r3, r3, #9
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b5c:	4931      	ldr	r1, [pc, #196]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b62:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	492d      	ldr	r1, [pc, #180]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	f023 0220 	bic.w	r2, r3, #32
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4928      	ldr	r1, [pc, #160]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	f023 0310 	bic.w	r3, r3, #16
 8006b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b96:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <RCCEx_PLL2_Config+0x160>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	69d2      	ldr	r2, [r2, #28]
 8006b9e:	00d2      	lsls	r2, r2, #3
 8006ba0:	4920      	ldr	r1, [pc, #128]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bac:	f043 0310 	orr.w	r3, r3, #16
 8006bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006bb8:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bc4:	e00f      	b.n	8006be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d106      	bne.n	8006bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bd8:	e005      	b.n	8006be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	4a11      	ldr	r2, [pc, #68]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf2:	f7fa fcef 	bl	80015d4 <HAL_GetTick>
 8006bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bf8:	e008      	b.n	8006c0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bfa:	f7fa fceb 	bl	80015d4 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e006      	b.n	8006c1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400
 8006c28:	ffff0007 	.word	0xffff0007

08006c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c3a:	4b53      	ldr	r3, [pc, #332]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d101      	bne.n	8006c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e099      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4e      	ldr	r2, [pc, #312]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c56:	f7fa fcbd 	bl	80015d4 <HAL_GetTick>
 8006c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c5e:	f7fa fcb9 	bl	80015d4 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e086      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c70:	4b45      	ldr	r3, [pc, #276]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c7c:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	493f      	ldr	r1, [pc, #252]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	628b      	str	r3, [r1, #40]	; 0x28
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	025b      	lsls	r3, r3, #9
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	061b      	lsls	r3, r3, #24
 8006cbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cc0:	4931      	ldr	r1, [pc, #196]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006cc6:	4b30      	ldr	r3, [pc, #192]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	492d      	ldr	r1, [pc, #180]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4928      	ldr	r1, [pc, #160]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006cea:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006cf6:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <RCCEx_PLL3_Config+0x160>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	69d2      	ldr	r2, [r2, #28]
 8006d02:	00d2      	lsls	r2, r2, #3
 8006d04:	4920      	ldr	r1, [pc, #128]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d28:	e00f      	b.n	8006d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d30:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d3c:	e005      	b.n	8006d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d3e:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a11      	ldr	r2, [pc, #68]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0e      	ldr	r2, [pc, #56]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d56:	f7fa fc3d 	bl	80015d4 <HAL_GetTick>
 8006d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d5c:	e008      	b.n	8006d70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d5e:	f7fa fc39 	bl	80015d4 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e006      	b.n	8006d7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <RCCEx_PLL3_Config+0x15c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	ffff0007 	.word	0xffff0007

08006d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e049      	b.n	8006e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f841 	bl	8006e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f000 f9f8 	bl	80071c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04f      	b.n	8006f0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a23      	ldr	r2, [pc, #140]	; (8006f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01d      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d018      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1f      	ldr	r2, [pc, #124]	; (8006f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIM_Base_Start_IT+0x76>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d115      	bne.n	8006ef6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	4b17      	ldr	r3, [pc, #92]	; (8006f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b06      	cmp	r3, #6
 8006eda:	d015      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0xb4>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee2:	d011      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef4:	e008      	b.n	8006f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e000      	b.n	8006f0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40010400 	.word	0x40010400
 8006f2c:	40001800 	.word	0x40001800
 8006f30:	00010007 	.word	0x00010007

08006f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d122      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d11b      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0202 	mvn.w	r2, #2
 8006f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f905 	bl	8007186 <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f8f7 	bl	8007172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f908 	bl	800719a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d122      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d11b      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0204 	mvn.w	r2, #4
 8006fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8db 	bl	8007186 <HAL_TIM_IC_CaptureCallback>
 8006fd0:	e005      	b.n	8006fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f8cd 	bl	8007172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8de 	bl	800719a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d122      	bne.n	8007038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d11b      	bne.n	8007038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0208 	mvn.w	r2, #8
 8007008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8b1 	bl	8007186 <HAL_TIM_IC_CaptureCallback>
 8007024:	e005      	b.n	8007032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8a3 	bl	8007172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8b4 	bl	800719a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d122      	bne.n	800708c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b10      	cmp	r3, #16
 8007052:	d11b      	bne.n	800708c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0210 	mvn.w	r2, #16
 800705c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2208      	movs	r2, #8
 8007062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f887 	bl	8007186 <HAL_TIM_IC_CaptureCallback>
 8007078:	e005      	b.n	8007086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f879 	bl	8007172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f88a 	bl	800719a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10e      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0201 	mvn.w	r2, #1
 80070b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7f9 fec2 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d107      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f914 	bl	800730c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f2:	d10e      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d107      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800710a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f907 	bl	8007320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d10e      	bne.n	800713e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d107      	bne.n	800713e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f838 	bl	80071ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d10e      	bne.n	800716a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d107      	bne.n	800716a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f06f 0220 	mvn.w	r2, #32
 8007162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8c7 	bl	80072f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <TIM_Base_SetConfig+0x114>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <TIM_Base_SetConfig+0x40>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d00f      	beq.n	8007204 <TIM_Base_SetConfig+0x40>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3d      	ldr	r2, [pc, #244]	; (80072dc <TIM_Base_SetConfig+0x118>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00b      	beq.n	8007204 <TIM_Base_SetConfig+0x40>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a3c      	ldr	r2, [pc, #240]	; (80072e0 <TIM_Base_SetConfig+0x11c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <TIM_Base_SetConfig+0x40>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a3b      	ldr	r2, [pc, #236]	; (80072e4 <TIM_Base_SetConfig+0x120>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_Base_SetConfig+0x40>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3a      	ldr	r2, [pc, #232]	; (80072e8 <TIM_Base_SetConfig+0x124>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d108      	bne.n	8007216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <TIM_Base_SetConfig+0x114>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01f      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007224:	d01b      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <TIM_Base_SetConfig+0x118>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d017      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <TIM_Base_SetConfig+0x11c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <TIM_Base_SetConfig+0x120>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00f      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <TIM_Base_SetConfig+0x124>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a28      	ldr	r2, [pc, #160]	; (80072ec <TIM_Base_SetConfig+0x128>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a27      	ldr	r2, [pc, #156]	; (80072f0 <TIM_Base_SetConfig+0x12c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0x9a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <TIM_Base_SetConfig+0x130>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a10      	ldr	r2, [pc, #64]	; (80072d8 <TIM_Base_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00f      	beq.n	80072bc <TIM_Base_SetConfig+0xf8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a12      	ldr	r2, [pc, #72]	; (80072e8 <TIM_Base_SetConfig+0x124>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00b      	beq.n	80072bc <TIM_Base_SetConfig+0xf8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a11      	ldr	r2, [pc, #68]	; (80072ec <TIM_Base_SetConfig+0x128>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d007      	beq.n	80072bc <TIM_Base_SetConfig+0xf8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a10      	ldr	r2, [pc, #64]	; (80072f0 <TIM_Base_SetConfig+0x12c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d003      	beq.n	80072bc <TIM_Base_SetConfig+0xf8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a0f      	ldr	r2, [pc, #60]	; (80072f4 <TIM_Base_SetConfig+0x130>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d103      	bne.n	80072c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	615a      	str	r2, [r3, #20]
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40000400 	.word	0x40000400
 80072e0:	40000800 	.word	0x40000800
 80072e4:	40000c00 	.word	0x40000c00
 80072e8:	40010400 	.word	0x40010400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800

080072f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e042      	b.n	80073cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7f9 fe81 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2224      	movs	r2, #36	; 0x24
 8007362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc66 	bl	8007c48 <UART_SetConfig>
 800737c:	4603      	mov	r3, r0
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e022      	b.n	80073cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 f9ba 	bl	8008708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fa41 	bl	800884c <UART_CheckIdleState>
 80073ca:	4603      	mov	r3, r0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	; 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	f040 8083 	bne.w	80074f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_UART_Transmit+0x28>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e07b      	b.n	80074f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_UART_Transmit+0x3a>
 800740a:	2302      	movs	r3, #2
 800740c:	e074      	b.n	80074f8 <HAL_UART_Transmit+0x124>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2221      	movs	r2, #33	; 0x21
 8007422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007426:	f7fa f8d5 	bl	80015d4 <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x84>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007468:	e02c      	b.n	80074c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 fa34 	bl	80088e2 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e039      	b.n	80074f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1cc      	bne.n	800746a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2140      	movs	r1, #64	; 0x40
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 fa01 	bl	80088e2 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e006      	b.n	80074f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e000      	b.n	80074f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007516:	2b20      	cmp	r3, #32
 8007518:	f040 80c0 	bne.w	800769c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Receive+0x28>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e0b8      	b.n	800769e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_UART_Receive+0x3a>
 8007536:	2302      	movs	r3, #2
 8007538:	e0b1      	b.n	800769e <HAL_UART_Receive+0x19e>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2222      	movs	r2, #34	; 0x22
 800754e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007558:	f7fa f83c 	bl	80015d4 <HAL_GetTick>
 800755c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	88fa      	ldrh	r2, [r7, #6]
 8007562:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007576:	d10e      	bne.n	8007596 <HAL_UART_Receive+0x96>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d105      	bne.n	800758c <HAL_UART_Receive+0x8c>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007586:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800758a:	e02d      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	22ff      	movs	r2, #255	; 0xff
 8007590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007594:	e028      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10d      	bne.n	80075ba <HAL_UART_Receive+0xba>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Receive+0xb0>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075ae:	e01b      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	227f      	movs	r2, #127	; 0x7f
 80075b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075b8:	e016      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c2:	d10d      	bne.n	80075e0 <HAL_UART_Receive+0xe0>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <HAL_UART_Receive+0xd6>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	227f      	movs	r2, #127	; 0x7f
 80075d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075d4:	e008      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	223f      	movs	r2, #63	; 0x3f
 80075da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075de:	e003      	b.n	80075e8 <HAL_UART_Receive+0xe8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f8:	d108      	bne.n	800760c <HAL_UART_Receive+0x10c>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	e003      	b.n	8007614 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800761c:	e032      	b.n	8007684 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	2120      	movs	r1, #32
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f001 f95a 	bl	80088e2 <UART_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e032      	b.n	800769e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	b29a      	uxth	r2, r3
 8007646:	8a7b      	ldrh	r3, [r7, #18]
 8007648:	4013      	ands	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	3302      	adds	r3, #2
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	e00c      	b.n	8007672 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	b2da      	uxtb	r2, r3
 8007660:	8a7b      	ldrh	r3, [r7, #18]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4013      	ands	r3, r2
 8007666:	b2da      	uxtb	r2, r3
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1c6      	bne.n	800761e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e000      	b.n	800769e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800769c:	2302      	movs	r3, #2
  }
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80076ce:	4013      	ands	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d118      	bne.n	800770a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d013      	beq.n	800770a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8282 	beq.w	8007c04 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
      }
      return;
 8007708:	e27c      	b.n	8007c04 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80ef 	beq.w	80078f0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4b73      	ldr	r3, [pc, #460]	; (80078e4 <HAL_UART_IRQHandler+0x23c>)
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4b72      	ldr	r3, [pc, #456]	; (80078e8 <HAL_UART_IRQHandler+0x240>)
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 80e4 	beq.w	80078f0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <HAL_UART_IRQHandler+0xac>
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2201      	movs	r2, #1
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <HAL_UART_IRQHandler+0xd8>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2202      	movs	r2, #2
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007776:	f043 0204 	orr.w	r2, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <HAL_UART_IRQHandler+0x104>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2204      	movs	r2, #4
 800779a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a2:	f043 0202 	orr.w	r2, r3, #2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d015      	beq.n	80077e2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4b48      	ldr	r3, [pc, #288]	; (80078e4 <HAL_UART_IRQHandler+0x23c>)
 80077c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2208      	movs	r2, #8
 80077d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d8:	f043 0208 	orr.w	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <HAL_UART_IRQHandler+0x168>
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00c      	beq.n	8007810 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007806:	f043 0220 	orr.w	r2, r3, #32
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 81f6 	beq.w	8007c08 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d011      	beq.n	800784a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007850:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d004      	beq.n	800786a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007866:	2b00      	cmp	r3, #0
 8007868:	d031      	beq.n	80078ce <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f8ba 	bl	80089e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d123      	bne.n	80078c6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800788c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d013      	beq.n	80078be <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789a:	4a14      	ldr	r2, [pc, #80]	; (80078ec <HAL_UART_IRQHandler+0x244>)
 800789c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fa ff16 	bl	80026d4 <HAL_DMA_Abort_IT>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d017      	beq.n	80078de <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e00f      	b.n	80078de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9ac 	bl	8007c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	e00b      	b.n	80078de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9a8 	bl	8007c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	e007      	b.n	80078de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9a4 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80078dc:	e194      	b.n	8007c08 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078de:	bf00      	nop
    return;
 80078e0:	e192      	b.n	8007c08 <HAL_UART_IRQHandler+0x560>
 80078e2:	bf00      	nop
 80078e4:	10000001 	.word	0x10000001
 80078e8:	04000120 	.word	0x04000120
 80078ec:	08008a49 	.word	0x08008a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	f040 810f 	bne.w	8007b18 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8109 	beq.w	8007b18 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8103 	beq.w	8007b18 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2210      	movs	r2, #16
 8007918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	f040 80bb 	bne.w	8007aa0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a96      	ldr	r2, [pc, #600]	; (8007b8c <HAL_UART_IRQHandler+0x4e4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d059      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a94      	ldr	r2, [pc, #592]	; (8007b90 <HAL_UART_IRQHandler+0x4e8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d053      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a92      	ldr	r2, [pc, #584]	; (8007b94 <HAL_UART_IRQHandler+0x4ec>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d04d      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a90      	ldr	r2, [pc, #576]	; (8007b98 <HAL_UART_IRQHandler+0x4f0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d047      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a8e      	ldr	r2, [pc, #568]	; (8007b9c <HAL_UART_IRQHandler+0x4f4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d041      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a8c      	ldr	r2, [pc, #560]	; (8007ba0 <HAL_UART_IRQHandler+0x4f8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d03b      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a8a      	ldr	r2, [pc, #552]	; (8007ba4 <HAL_UART_IRQHandler+0x4fc>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d035      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a88      	ldr	r2, [pc, #544]	; (8007ba8 <HAL_UART_IRQHandler+0x500>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02f      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a86      	ldr	r2, [pc, #536]	; (8007bac <HAL_UART_IRQHandler+0x504>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d029      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a84      	ldr	r2, [pc, #528]	; (8007bb0 <HAL_UART_IRQHandler+0x508>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d023      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a82      	ldr	r2, [pc, #520]	; (8007bb4 <HAL_UART_IRQHandler+0x50c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01d      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a80      	ldr	r2, [pc, #512]	; (8007bb8 <HAL_UART_IRQHandler+0x510>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d017      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a7e      	ldr	r2, [pc, #504]	; (8007bbc <HAL_UART_IRQHandler+0x514>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d011      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a7c      	ldr	r2, [pc, #496]	; (8007bc0 <HAL_UART_IRQHandler+0x518>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00b      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a7a      	ldr	r2, [pc, #488]	; (8007bc4 <HAL_UART_IRQHandler+0x51c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d005      	beq.n	80079ea <HAL_UART_IRQHandler+0x342>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a78      	ldr	r2, [pc, #480]	; (8007bc8 <HAL_UART_IRQHandler+0x520>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d105      	bne.n	80079f6 <HAL_UART_IRQHandler+0x34e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	e004      	b.n	8007a00 <HAL_UART_IRQHandler+0x358>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007a02:	893b      	ldrh	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8101 	beq.w	8007c0c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a10:	893a      	ldrh	r2, [r7, #8]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	f080 80fa 	bcs.w	8007c0c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	893a      	ldrh	r2, [r7, #8]
 8007a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d02b      	beq.n	8007a84 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0210 	bic.w	r2, r2, #16
 8007a78:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fa fb0a 	bl	8002098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8c9 	bl	8007c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a9e:	e0b5      	b.n	8007c0c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80a8 	beq.w	8007c10 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8007ac0:	897b      	ldrh	r3, [r7, #10]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80a4 	beq.w	8007c10 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ad6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b3a      	ldr	r3, [pc, #232]	; (8007bcc <HAL_UART_IRQHandler+0x524>)
 8007ae4:	400b      	ands	r3, r1
 8007ae6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0210 	bic.w	r2, r2, #16
 8007b0a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f88d 	bl	8007c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b16:	e07b      	b.n	8007c10 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00d      	beq.n	8007b3e <HAL_UART_IRQHandler+0x496>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 ffb6 	bl	8008aa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b3c:	e06b      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d057      	beq.n	8007c14 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
    }
    return;
 8007b6c:	e052      	b.n	8007c14 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02b      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x528>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d026      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 ff76 	bl	8008a74 <UART_EndTransmit_IT>
    return;
 8007b88:	e045      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
 8007b8a:	bf00      	nop
 8007b8c:	40020010 	.word	0x40020010
 8007b90:	40020028 	.word	0x40020028
 8007b94:	40020040 	.word	0x40020040
 8007b98:	40020058 	.word	0x40020058
 8007b9c:	40020070 	.word	0x40020070
 8007ba0:	40020088 	.word	0x40020088
 8007ba4:	400200a0 	.word	0x400200a0
 8007ba8:	400200b8 	.word	0x400200b8
 8007bac:	40020410 	.word	0x40020410
 8007bb0:	40020428 	.word	0x40020428
 8007bb4:	40020440 	.word	0x40020440
 8007bb8:	40020458 	.word	0x40020458
 8007bbc:	40020470 	.word	0x40020470
 8007bc0:	40020488 	.word	0x40020488
 8007bc4:	400204a0 	.word	0x400204a0
 8007bc8:	400204b8 	.word	0x400204b8
 8007bcc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_UART_IRQHandler+0x544>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 ff73 	bl	8008ad0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bea:	e014      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <HAL_UART_IRQHandler+0x56e>
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da0c      	bge.n	8007c16 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 ff5d 	bl	8008abc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c02:	e008      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
      return;
 8007c04:	bf00      	nop
 8007c06:	e006      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
    return;
 8007c08:	bf00      	nop
 8007c0a:	e004      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
      return;
 8007c0c:	bf00      	nop
 8007c0e:	e002      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
      return;
 8007c10:	bf00      	nop
 8007c12:	e000      	b.n	8007c16 <HAL_UART_IRQHandler+0x56e>
    return;
 8007c14:	bf00      	nop
  }
}
 8007c16:	3720      	adds	r7, #32
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b5b0      	push	{r4, r5, r7, lr}
 8007c4a:	b08e      	sub	sp, #56	; 0x38
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4bbf      	ldr	r3, [pc, #764]	; (8007f74 <UART_SetConfig+0x32c>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4ab5      	ldr	r2, [pc, #724]	; (8007f78 <UART_SetConfig+0x330>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	4bb0      	ldr	r3, [pc, #704]	; (8007f7c <UART_SetConfig+0x334>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	f023 010f 	bic.w	r1, r3, #15
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4aa7      	ldr	r2, [pc, #668]	; (8007f80 <UART_SetConfig+0x338>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d176      	bne.n	8007dd4 <UART_SetConfig+0x18c>
 8007ce6:	4ba7      	ldr	r3, [pc, #668]	; (8007f84 <UART_SetConfig+0x33c>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cee:	2b28      	cmp	r3, #40	; 0x28
 8007cf0:	d86c      	bhi.n	8007dcc <UART_SetConfig+0x184>
 8007cf2:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0xb0>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d9d 	.word	0x08007d9d
 8007cfc:	08007dcd 	.word	0x08007dcd
 8007d00:	08007dcd 	.word	0x08007dcd
 8007d04:	08007dcd 	.word	0x08007dcd
 8007d08:	08007dcd 	.word	0x08007dcd
 8007d0c:	08007dcd 	.word	0x08007dcd
 8007d10:	08007dcd 	.word	0x08007dcd
 8007d14:	08007dcd 	.word	0x08007dcd
 8007d18:	08007da5 	.word	0x08007da5
 8007d1c:	08007dcd 	.word	0x08007dcd
 8007d20:	08007dcd 	.word	0x08007dcd
 8007d24:	08007dcd 	.word	0x08007dcd
 8007d28:	08007dcd 	.word	0x08007dcd
 8007d2c:	08007dcd 	.word	0x08007dcd
 8007d30:	08007dcd 	.word	0x08007dcd
 8007d34:	08007dcd 	.word	0x08007dcd
 8007d38:	08007dad 	.word	0x08007dad
 8007d3c:	08007dcd 	.word	0x08007dcd
 8007d40:	08007dcd 	.word	0x08007dcd
 8007d44:	08007dcd 	.word	0x08007dcd
 8007d48:	08007dcd 	.word	0x08007dcd
 8007d4c:	08007dcd 	.word	0x08007dcd
 8007d50:	08007dcd 	.word	0x08007dcd
 8007d54:	08007dcd 	.word	0x08007dcd
 8007d58:	08007db5 	.word	0x08007db5
 8007d5c:	08007dcd 	.word	0x08007dcd
 8007d60:	08007dcd 	.word	0x08007dcd
 8007d64:	08007dcd 	.word	0x08007dcd
 8007d68:	08007dcd 	.word	0x08007dcd
 8007d6c:	08007dcd 	.word	0x08007dcd
 8007d70:	08007dcd 	.word	0x08007dcd
 8007d74:	08007dcd 	.word	0x08007dcd
 8007d78:	08007dbd 	.word	0x08007dbd
 8007d7c:	08007dcd 	.word	0x08007dcd
 8007d80:	08007dcd 	.word	0x08007dcd
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007dcd 	.word	0x08007dcd
 8007d8c:	08007dcd 	.word	0x08007dcd
 8007d90:	08007dcd 	.word	0x08007dcd
 8007d94:	08007dcd 	.word	0x08007dcd
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007da2:	e222      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007daa:	e21e      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db2:	e21a      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e216      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	e212      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007dc4:	2340      	movs	r3, #64	; 0x40
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e20e      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007dcc:	2380      	movs	r3, #128	; 0x80
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e20a      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a6b      	ldr	r2, [pc, #428]	; (8007f88 <UART_SetConfig+0x340>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d130      	bne.n	8007e40 <UART_SetConfig+0x1f8>
 8007dde:	4b69      	ldr	r3, [pc, #420]	; (8007f84 <UART_SetConfig+0x33c>)
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d826      	bhi.n	8007e38 <UART_SetConfig+0x1f0>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <UART_SetConfig+0x1a8>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007e31 	.word	0x08007e31
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e0e:	e1ec      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e16:	e1e8      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1e:	e1e4      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e26:	e1e0      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e28:	2320      	movs	r3, #32
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e1dc      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e1d8      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e1d4      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a51      	ldr	r2, [pc, #324]	; (8007f8c <UART_SetConfig+0x344>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d130      	bne.n	8007eac <UART_SetConfig+0x264>
 8007e4a:	4b4e      	ldr	r3, [pc, #312]	; (8007f84 <UART_SetConfig+0x33c>)
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	d826      	bhi.n	8007ea4 <UART_SetConfig+0x25c>
 8007e56:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <UART_SetConfig+0x214>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e75 	.word	0x08007e75
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	08007e85 	.word	0x08007e85
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e9d 	.word	0x08007e9d
 8007e74:	2300      	movs	r3, #0
 8007e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e7a:	e1b6      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e82:	e1b2      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e84:	2308      	movs	r3, #8
 8007e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e8a:	e1ae      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e92:	e1aa      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e94:	2320      	movs	r3, #32
 8007e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9a:	e1a6      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e1a2      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007ea4:	2380      	movs	r3, #128	; 0x80
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e19e      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a37      	ldr	r2, [pc, #220]	; (8007f90 <UART_SetConfig+0x348>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d130      	bne.n	8007f18 <UART_SetConfig+0x2d0>
 8007eb6:	4b33      	ldr	r3, [pc, #204]	; (8007f84 <UART_SetConfig+0x33c>)
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d826      	bhi.n	8007f10 <UART_SetConfig+0x2c8>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <UART_SetConfig+0x280>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007ee1 	.word	0x08007ee1
 8007ecc:	08007ee9 	.word	0x08007ee9
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	08007ef9 	.word	0x08007ef9
 8007ed8:	08007f01 	.word	0x08007f01
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee6:	e180      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eee:	e17c      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007ef0:	2308      	movs	r3, #8
 8007ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef6:	e178      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efe:	e174      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f00:	2320      	movs	r3, #32
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e170      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e16c      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e168      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <UART_SetConfig+0x34c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d142      	bne.n	8007fa8 <UART_SetConfig+0x360>
 8007f22:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <UART_SetConfig+0x33c>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d838      	bhi.n	8007fa0 <UART_SetConfig+0x358>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <UART_SetConfig+0x2ec>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f5d 	.word	0x08007f5d
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f99 	.word	0x08007f99
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f52:	e14a      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5a:	e146      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f62:	e142      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e13e      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f72:	e13a      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007f74:	cfff69f3 	.word	0xcfff69f3
 8007f78:	58000c00 	.word	0x58000c00
 8007f7c:	11fff4ff 	.word	0x11fff4ff
 8007f80:	40011000 	.word	0x40011000
 8007f84:	58024400 	.word	0x58024400
 8007f88:	40004400 	.word	0x40004400
 8007f8c:	40004800 	.word	0x40004800
 8007f90:	40004c00 	.word	0x40004c00
 8007f94:	40005000 	.word	0x40005000
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9e:	e124      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e120      	b.n	80081ea <UART_SetConfig+0x5a2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4acc      	ldr	r2, [pc, #816]	; (80082e0 <UART_SetConfig+0x698>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d176      	bne.n	80080a0 <UART_SetConfig+0x458>
 8007fb2:	4bcc      	ldr	r3, [pc, #816]	; (80082e4 <UART_SetConfig+0x69c>)
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fba:	2b28      	cmp	r3, #40	; 0x28
 8007fbc:	d86c      	bhi.n	8008098 <UART_SetConfig+0x450>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0x37c>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08008069 	.word	0x08008069
 8007fc8:	08008099 	.word	0x08008099
 8007fcc:	08008099 	.word	0x08008099
 8007fd0:	08008099 	.word	0x08008099
 8007fd4:	08008099 	.word	0x08008099
 8007fd8:	08008099 	.word	0x08008099
 8007fdc:	08008099 	.word	0x08008099
 8007fe0:	08008099 	.word	0x08008099
 8007fe4:	08008071 	.word	0x08008071
 8007fe8:	08008099 	.word	0x08008099
 8007fec:	08008099 	.word	0x08008099
 8007ff0:	08008099 	.word	0x08008099
 8007ff4:	08008099 	.word	0x08008099
 8007ff8:	08008099 	.word	0x08008099
 8007ffc:	08008099 	.word	0x08008099
 8008000:	08008099 	.word	0x08008099
 8008004:	08008079 	.word	0x08008079
 8008008:	08008099 	.word	0x08008099
 800800c:	08008099 	.word	0x08008099
 8008010:	08008099 	.word	0x08008099
 8008014:	08008099 	.word	0x08008099
 8008018:	08008099 	.word	0x08008099
 800801c:	08008099 	.word	0x08008099
 8008020:	08008099 	.word	0x08008099
 8008024:	08008081 	.word	0x08008081
 8008028:	08008099 	.word	0x08008099
 800802c:	08008099 	.word	0x08008099
 8008030:	08008099 	.word	0x08008099
 8008034:	08008099 	.word	0x08008099
 8008038:	08008099 	.word	0x08008099
 800803c:	08008099 	.word	0x08008099
 8008040:	08008099 	.word	0x08008099
 8008044:	08008089 	.word	0x08008089
 8008048:	08008099 	.word	0x08008099
 800804c:	08008099 	.word	0x08008099
 8008050:	08008099 	.word	0x08008099
 8008054:	08008099 	.word	0x08008099
 8008058:	08008099 	.word	0x08008099
 800805c:	08008099 	.word	0x08008099
 8008060:	08008099 	.word	0x08008099
 8008064:	08008091 	.word	0x08008091
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800806e:	e0bc      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008076:	e0b8      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807e:	e0b4      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008086:	e0b0      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008088:	2320      	movs	r3, #32
 800808a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808e:	e0ac      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008096:	e0a8      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008098:	2380      	movs	r3, #128	; 0x80
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e0a4      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a90      	ldr	r2, [pc, #576]	; (80082e8 <UART_SetConfig+0x6a0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d130      	bne.n	800810c <UART_SetConfig+0x4c4>
 80080aa:	4b8e      	ldr	r3, [pc, #568]	; (80082e4 <UART_SetConfig+0x69c>)
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d826      	bhi.n	8008104 <UART_SetConfig+0x4bc>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <UART_SetConfig+0x474>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080da:	e086      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e2:	e082      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ea:	e07e      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f2:	e07a      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080f4:	2320      	movs	r3, #32
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e076      	b.n	80081ea <UART_SetConfig+0x5a2>
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e072      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e06e      	b.n	80081ea <UART_SetConfig+0x5a2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a76      	ldr	r2, [pc, #472]	; (80082ec <UART_SetConfig+0x6a4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d130      	bne.n	8008178 <UART_SetConfig+0x530>
 8008116:	4b73      	ldr	r3, [pc, #460]	; (80082e4 <UART_SetConfig+0x69c>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b05      	cmp	r3, #5
 8008120:	d826      	bhi.n	8008170 <UART_SetConfig+0x528>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x4e0>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008141 	.word	0x08008141
 800812c:	08008149 	.word	0x08008149
 8008130:	08008151 	.word	0x08008151
 8008134:	08008159 	.word	0x08008159
 8008138:	08008161 	.word	0x08008161
 800813c:	08008169 	.word	0x08008169
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008146:	e050      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814e:	e04c      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008156:	e048      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815e:	e044      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008166:	e040      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816e:	e03c      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008176:	e038      	b.n	80081ea <UART_SetConfig+0x5a2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5c      	ldr	r2, [pc, #368]	; (80082f0 <UART_SetConfig+0x6a8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d130      	bne.n	80081e4 <UART_SetConfig+0x59c>
 8008182:	4b58      	ldr	r3, [pc, #352]	; (80082e4 <UART_SetConfig+0x69c>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b05      	cmp	r3, #5
 800818c:	d826      	bhi.n	80081dc <UART_SetConfig+0x594>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0x54c>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	2302      	movs	r3, #2
 80081ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081b2:	e01a      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ba:	e016      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c2:	e012      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ca:	e00e      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081cc:	2320      	movs	r3, #32
 80081ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d2:	e00a      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081da:	e006      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e2:	e002      	b.n	80081ea <UART_SetConfig+0x5a2>
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a40      	ldr	r2, [pc, #256]	; (80082f0 <UART_SetConfig+0x6a8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	f040 80ef 	bne.w	80083d4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	dc46      	bgt.n	800828c <UART_SetConfig+0x644>
 80081fe:	2b02      	cmp	r3, #2
 8008200:	f2c0 8081 	blt.w	8008306 <UART_SetConfig+0x6be>
 8008204:	3b02      	subs	r3, #2
 8008206:	2b1e      	cmp	r3, #30
 8008208:	d87d      	bhi.n	8008306 <UART_SetConfig+0x6be>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x5c8>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008293 	.word	0x08008293
 8008214:	08008307 	.word	0x08008307
 8008218:	0800829b 	.word	0x0800829b
 800821c:	08008307 	.word	0x08008307
 8008220:	08008307 	.word	0x08008307
 8008224:	08008307 	.word	0x08008307
 8008228:	080082ab 	.word	0x080082ab
 800822c:	08008307 	.word	0x08008307
 8008230:	08008307 	.word	0x08008307
 8008234:	08008307 	.word	0x08008307
 8008238:	08008307 	.word	0x08008307
 800823c:	08008307 	.word	0x08008307
 8008240:	08008307 	.word	0x08008307
 8008244:	08008307 	.word	0x08008307
 8008248:	080082bb 	.word	0x080082bb
 800824c:	08008307 	.word	0x08008307
 8008250:	08008307 	.word	0x08008307
 8008254:	08008307 	.word	0x08008307
 8008258:	08008307 	.word	0x08008307
 800825c:	08008307 	.word	0x08008307
 8008260:	08008307 	.word	0x08008307
 8008264:	08008307 	.word	0x08008307
 8008268:	08008307 	.word	0x08008307
 800826c:	08008307 	.word	0x08008307
 8008270:	08008307 	.word	0x08008307
 8008274:	08008307 	.word	0x08008307
 8008278:	08008307 	.word	0x08008307
 800827c:	08008307 	.word	0x08008307
 8008280:	08008307 	.word	0x08008307
 8008284:	08008307 	.word	0x08008307
 8008288:	080082f9 	.word	0x080082f9
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d036      	beq.n	80082fe <UART_SetConfig+0x6b6>
 8008290:	e039      	b.n	8008306 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008292:	f7fe f95b 	bl	800654c <HAL_RCCEx_GetD3PCLK1Freq>
 8008296:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008298:	e03b      	b.n	8008312 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829a:	f107 0314 	add.w	r3, r7, #20
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe f96a 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082a8:	e033      	b.n	8008312 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082aa:	f107 0308 	add.w	r3, r7, #8
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fab6 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082b8:	e02b      	b.n	8008312 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <UART_SetConfig+0x69c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <UART_SetConfig+0x69c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	4a08      	ldr	r2, [pc, #32]	; (80082f4 <UART_SetConfig+0x6ac>)
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082d8:	e01b      	b.n	8008312 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <UART_SetConfig+0x6ac>)
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082de:	e018      	b.n	8008312 <UART_SetConfig+0x6ca>
 80082e0:	40011400 	.word	0x40011400
 80082e4:	58024400 	.word	0x58024400
 80082e8:	40007800 	.word	0x40007800
 80082ec:	40007c00 	.word	0x40007c00
 80082f0:	58000c00 	.word	0x58000c00
 80082f4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082f8:	4bc4      	ldr	r3, [pc, #784]	; (800860c <UART_SetConfig+0x9c4>)
 80082fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082fc:	e009      	b.n	8008312 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008304:	e005      	b.n	8008312 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 81da 	beq.w	80086ce <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	4abc      	ldr	r2, [pc, #752]	; (8008610 <UART_SetConfig+0x9c8>)
 8008320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008324:	461a      	mov	r2, r3
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	4413      	add	r3, r2
 8008338:	6a3a      	ldr	r2, [r7, #32]
 800833a:	429a      	cmp	r2, r3
 800833c:	d305      	bcc.n	800834a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	429a      	cmp	r2, r3
 8008348:	d903      	bls.n	8008352 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008350:	e1bd      	b.n	80086ce <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	4618      	mov	r0, r3
 8008356:	f04f 0100 	mov.w	r1, #0
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	4aac      	ldr	r2, [pc, #688]	; (8008610 <UART_SetConfig+0x9c8>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	b29a      	uxth	r2, r3
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	f7f8 f811 	bl	8000390 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	020b      	lsls	r3, r1, #8
 8008380:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008384:	0202      	lsls	r2, r0, #8
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	6849      	ldr	r1, [r1, #4]
 800838a:	0849      	lsrs	r1, r1, #1
 800838c:	4608      	mov	r0, r1
 800838e:	f04f 0100 	mov.w	r1, #0
 8008392:	1814      	adds	r4, r2, r0
 8008394:	eb43 0501 	adc.w	r5, r3, r1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	461a      	mov	r2, r3
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f7 fff3 	bl	8000390 <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4613      	mov	r3, r2
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083b8:	d308      	bcc.n	80083cc <UART_SetConfig+0x784>
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c0:	d204      	bcs.n	80083cc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c8:	60da      	str	r2, [r3, #12]
 80083ca:	e180      	b.n	80086ce <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083d2:	e17c      	b.n	80086ce <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	f040 80bf 	bne.w	800855e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80083e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	dc49      	bgt.n	800847c <UART_SetConfig+0x834>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	db7c      	blt.n	80084e6 <UART_SetConfig+0x89e>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d87a      	bhi.n	80084e6 <UART_SetConfig+0x89e>
 80083f0:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x7b0>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	08008483 	.word	0x08008483
 80083fc:	0800848b 	.word	0x0800848b
 8008400:	080084e7 	.word	0x080084e7
 8008404:	080084e7 	.word	0x080084e7
 8008408:	08008493 	.word	0x08008493
 800840c:	080084e7 	.word	0x080084e7
 8008410:	080084e7 	.word	0x080084e7
 8008414:	080084e7 	.word	0x080084e7
 8008418:	080084a3 	.word	0x080084a3
 800841c:	080084e7 	.word	0x080084e7
 8008420:	080084e7 	.word	0x080084e7
 8008424:	080084e7 	.word	0x080084e7
 8008428:	080084e7 	.word	0x080084e7
 800842c:	080084e7 	.word	0x080084e7
 8008430:	080084e7 	.word	0x080084e7
 8008434:	080084e7 	.word	0x080084e7
 8008438:	080084b3 	.word	0x080084b3
 800843c:	080084e7 	.word	0x080084e7
 8008440:	080084e7 	.word	0x080084e7
 8008444:	080084e7 	.word	0x080084e7
 8008448:	080084e7 	.word	0x080084e7
 800844c:	080084e7 	.word	0x080084e7
 8008450:	080084e7 	.word	0x080084e7
 8008454:	080084e7 	.word	0x080084e7
 8008458:	080084e7 	.word	0x080084e7
 800845c:	080084e7 	.word	0x080084e7
 8008460:	080084e7 	.word	0x080084e7
 8008464:	080084e7 	.word	0x080084e7
 8008468:	080084e7 	.word	0x080084e7
 800846c:	080084e7 	.word	0x080084e7
 8008470:	080084e7 	.word	0x080084e7
 8008474:	080084e7 	.word	0x080084e7
 8008478:	080084d9 	.word	0x080084d9
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d02e      	beq.n	80084de <UART_SetConfig+0x896>
 8008480:	e031      	b.n	80084e6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fd f885 	bl	8005590 <HAL_RCC_GetPCLK1Freq>
 8008486:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008488:	e033      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800848a:	f7fd f897 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 800848e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008490:	e02f      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008492:	f107 0314 	add.w	r3, r7, #20
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe f86e 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084a0:	e027      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a2:	f107 0308 	add.w	r3, r7, #8
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe f9ba 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084b0:	e01f      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b2:	4b58      	ldr	r3, [pc, #352]	; (8008614 <UART_SetConfig+0x9cc>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084be:	4b55      	ldr	r3, [pc, #340]	; (8008614 <UART_SetConfig+0x9cc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	4a53      	ldr	r2, [pc, #332]	; (8008618 <UART_SetConfig+0x9d0>)
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084d0:	e00f      	b.n	80084f2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80084d2:	4b51      	ldr	r3, [pc, #324]	; (8008618 <UART_SetConfig+0x9d0>)
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084d6:	e00c      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084d8:	4b4c      	ldr	r3, [pc, #304]	; (800860c <UART_SetConfig+0x9c4>)
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084dc:	e009      	b.n	80084f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084e4:	e005      	b.n	80084f2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80084f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80ea 	beq.w	80086ce <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	4a44      	ldr	r2, [pc, #272]	; (8008610 <UART_SetConfig+0x9c8>)
 8008500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008504:	461a      	mov	r2, r3
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	fbb3 f3f2 	udiv	r3, r3, r2
 800850c:	005a      	lsls	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	441a      	add	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	b29b      	uxth	r3, r3
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	2b0f      	cmp	r3, #15
 8008526:	d916      	bls.n	8008556 <UART_SetConfig+0x90e>
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852e:	d212      	bcs.n	8008556 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	b29b      	uxth	r3, r3
 8008534:	f023 030f 	bic.w	r3, r3, #15
 8008538:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	b29b      	uxth	r3, r3
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	b29a      	uxth	r2, r3
 8008546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008548:	4313      	orrs	r3, r2
 800854a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008552:	60da      	str	r2, [r3, #12]
 8008554:	e0bb      	b.n	80086ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800855c:	e0b7      	b.n	80086ce <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800855e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008562:	2b20      	cmp	r3, #32
 8008564:	dc4a      	bgt.n	80085fc <UART_SetConfig+0x9b4>
 8008566:	2b00      	cmp	r3, #0
 8008568:	f2c0 8086 	blt.w	8008678 <UART_SetConfig+0xa30>
 800856c:	2b20      	cmp	r3, #32
 800856e:	f200 8083 	bhi.w	8008678 <UART_SetConfig+0xa30>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <UART_SetConfig+0x930>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008603 	.word	0x08008603
 800857c:	0800861d 	.word	0x0800861d
 8008580:	08008679 	.word	0x08008679
 8008584:	08008679 	.word	0x08008679
 8008588:	08008625 	.word	0x08008625
 800858c:	08008679 	.word	0x08008679
 8008590:	08008679 	.word	0x08008679
 8008594:	08008679 	.word	0x08008679
 8008598:	08008635 	.word	0x08008635
 800859c:	08008679 	.word	0x08008679
 80085a0:	08008679 	.word	0x08008679
 80085a4:	08008679 	.word	0x08008679
 80085a8:	08008679 	.word	0x08008679
 80085ac:	08008679 	.word	0x08008679
 80085b0:	08008679 	.word	0x08008679
 80085b4:	08008679 	.word	0x08008679
 80085b8:	08008645 	.word	0x08008645
 80085bc:	08008679 	.word	0x08008679
 80085c0:	08008679 	.word	0x08008679
 80085c4:	08008679 	.word	0x08008679
 80085c8:	08008679 	.word	0x08008679
 80085cc:	08008679 	.word	0x08008679
 80085d0:	08008679 	.word	0x08008679
 80085d4:	08008679 	.word	0x08008679
 80085d8:	08008679 	.word	0x08008679
 80085dc:	08008679 	.word	0x08008679
 80085e0:	08008679 	.word	0x08008679
 80085e4:	08008679 	.word	0x08008679
 80085e8:	08008679 	.word	0x08008679
 80085ec:	08008679 	.word	0x08008679
 80085f0:	08008679 	.word	0x08008679
 80085f4:	08008679 	.word	0x08008679
 80085f8:	0800866b 	.word	0x0800866b
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d037      	beq.n	8008670 <UART_SetConfig+0xa28>
 8008600:	e03a      	b.n	8008678 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fc ffc5 	bl	8005590 <HAL_RCC_GetPCLK1Freq>
 8008606:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008608:	e03c      	b.n	8008684 <UART_SetConfig+0xa3c>
 800860a:	bf00      	nop
 800860c:	003d0900 	.word	0x003d0900
 8008610:	0800e988 	.word	0x0800e988
 8008614:	58024400 	.word	0x58024400
 8008618:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fc ffce 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 8008620:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008622:	e02f      	b.n	8008684 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd ffa5 	bl	8006578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008632:	e027      	b.n	8008684 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008634:	f107 0308 	add.w	r3, r7, #8
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe f8f1 	bl	8006820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008642:	e01f      	b.n	8008684 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008644:	4b2c      	ldr	r3, [pc, #176]	; (80086f8 <UART_SetConfig+0xab0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008650:	4b29      	ldr	r3, [pc, #164]	; (80086f8 <UART_SetConfig+0xab0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a28      	ldr	r2, [pc, #160]	; (80086fc <UART_SetConfig+0xab4>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008662:	e00f      	b.n	8008684 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008664:	4b25      	ldr	r3, [pc, #148]	; (80086fc <UART_SetConfig+0xab4>)
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008668:	e00c      	b.n	8008684 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800866a:	4b25      	ldr	r3, [pc, #148]	; (8008700 <UART_SetConfig+0xab8>)
 800866c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800866e:	e009      	b.n	8008684 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008676:	e005      	b.n	8008684 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008682:	bf00      	nop
    }

    if (pclk != 0U)
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d021      	beq.n	80086ce <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <UART_SetConfig+0xabc>)
 8008690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008694:	461a      	mov	r2, r3
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	fbb3 f2f2 	udiv	r2, r3, r2
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	441a      	add	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d908      	bls.n	80086c8 <UART_SetConfig+0xa80>
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	d204      	bcs.n	80086c8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e002      	b.n	80086ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80086ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3738      	adds	r7, #56	; 0x38
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bdb0      	pop	{r4, r5, r7, pc}
 80086f6:	bf00      	nop
 80086f8:	58024400 	.word	0x58024400
 80086fc:	03d09000 	.word	0x03d09000
 8008700:	003d0900 	.word	0x003d0900
 8008704:	0800e988 	.word	0x0800e988

08008708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01a      	beq.n	800881e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008806:	d10a      	bne.n	800881e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800885c:	f7f8 feba 	bl	80015d4 <HAL_GetTick>
 8008860:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10e      	bne.n	800888e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f82f 	bl	80088e2 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e025      	b.n	80088da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b04      	cmp	r3, #4
 800889a:	d10e      	bne.n	80088ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800889c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f819 	bl	80088e2 <UART_WaitOnFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e00f      	b.n	80088da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f2:	e062      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d05e      	beq.n	80089ba <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fc:	f7f8 fe6a 	bl	80015d4 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	d302      	bcc.n	8008912 <UART_WaitOnFlagUntilTimeout+0x30>
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11d      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008920:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e045      	b.n	80089da <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02e      	beq.n	80089ba <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800896a:	d126      	bne.n	80089ba <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008974:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008984:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e00f      	b.n	80089da <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69da      	ldr	r2, [r3, #28]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4013      	ands	r3, r2
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	bf0c      	ite	eq
 80089ca:	2301      	moveq	r3, #1
 80089cc:	2300      	movne	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d08d      	beq.n	80088f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6899      	ldr	r1, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <UART_EndRxTransfer+0x60>)
 8008a08:	400b      	ands	r3, r1
 8008a0a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d107      	bne.n	8008a24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0210 	bic.w	r2, r2, #16
 8008a22:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	effffffe 	.word	0xeffffffe

08008a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff f8d8 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7f8 f99c 	bl	8000dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_UARTEx_DisableFifoMode+0x16>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e027      	b.n	8008b4a <HAL_UARTEx_DisableFifoMode+0x66>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2224      	movs	r2, #36	; 0x24
 8008b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0201 	bic.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e02d      	b.n	8008bca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2224      	movs	r2, #36	; 0x24
 8008b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f022 0201 	bic.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f850 	bl	8008c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e02d      	b.n	8008c46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2224      	movs	r2, #36	; 0x24
 8008bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f812 	bl	8008c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d108      	bne.n	8008c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c70:	e031      	b.n	8008cd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c72:	2310      	movs	r3, #16
 8008c74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c76:	2310      	movs	r3, #16
 8008c78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	0e5b      	lsrs	r3, r3, #25
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	0f5b      	lsrs	r3, r3, #29
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	7b3a      	ldrb	r2, [r7, #12]
 8008c9e:	4911      	ldr	r1, [pc, #68]	; (8008ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ca0:	5c8a      	ldrb	r2, [r1, r2]
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ca6:	7b3a      	ldrb	r2, [r7, #12]
 8008ca8:	490f      	ldr	r1, [pc, #60]	; (8008ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8008caa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	7b7a      	ldrb	r2, [r7, #13]
 8008cbc:	4909      	ldr	r1, [pc, #36]	; (8008ce4 <UARTEx_SetNbDataToProcess+0x94>)
 8008cbe:	5c8a      	ldrb	r2, [r1, r2]
 8008cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cc4:	7b7a      	ldrb	r2, [r7, #13]
 8008cc6:	4908      	ldr	r1, [pc, #32]	; (8008ce8 <UARTEx_SetNbDataToProcess+0x98>)
 8008cc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cd6:	bf00      	nop
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	0800e9a0 	.word	0x0800e9a0
 8008ce8:	0800e9a8 	.word	0x0800e9a8

08008cec <__NVIC_SetPriority>:
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	db0a      	blt.n	8008d16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	490c      	ldr	r1, [pc, #48]	; (8008d38 <__NVIC_SetPriority+0x4c>)
 8008d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d0a:	0112      	lsls	r2, r2, #4
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	440b      	add	r3, r1
 8008d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d14:	e00a      	b.n	8008d2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	4908      	ldr	r1, [pc, #32]	; (8008d3c <__NVIC_SetPriority+0x50>)
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	3b04      	subs	r3, #4
 8008d24:	0112      	lsls	r2, r2, #4
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	440b      	add	r3, r1
 8008d2a:	761a      	strb	r2, [r3, #24]
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	e000e100 	.word	0xe000e100
 8008d3c:	e000ed00 	.word	0xe000ed00

08008d40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <SysTick_Handler+0x1c>)
 8008d46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008d48:	f002 fc64 	bl	800b614 <xTaskGetSchedulerState>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d001      	beq.n	8008d56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d52:	f000 ff51 	bl	8009bf8 <xPortSysTickHandler>
  }
}
 8008d56:	bf00      	nop
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	e000e010 	.word	0xe000e010

08008d60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d64:	2100      	movs	r1, #0
 8008d66:	f06f 0004 	mvn.w	r0, #4
 8008d6a:	f7ff ffbf 	bl	8008cec <__NVIC_SetPriority>
#endif
}
 8008d6e:	bf00      	nop
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d7a:	f3ef 8305 	mrs	r3, IPSR
 8008d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d86:	f06f 0305 	mvn.w	r3, #5
 8008d8a:	607b      	str	r3, [r7, #4]
 8008d8c:	e00c      	b.n	8008da8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <osKernelInitialize+0x44>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d96:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <osKernelInitialize+0x44>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e002      	b.n	8008da8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295
 8008da6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008da8:	687b      	ldr	r3, [r7, #4]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	24000204 	.word	0x24000204

08008dbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc2:	f3ef 8305 	mrs	r3, IPSR
 8008dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8008dc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008dce:	f06f 0305 	mvn.w	r3, #5
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	e010      	b.n	8008df8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <osKernelStart+0x48>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d109      	bne.n	8008df2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008dde:	f7ff ffbf 	bl	8008d60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <osKernelStart+0x48>)
 8008de4:	2202      	movs	r2, #2
 8008de6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008de8:	f001 ffb8 	bl	800ad5c <vTaskStartScheduler>
      stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	607b      	str	r3, [r7, #4]
 8008df0:	e002      	b.n	8008df8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008df8:	687b      	ldr	r3, [r7, #4]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	24000204 	.word	0x24000204

08008e08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e18:	f3ef 8305 	mrs	r3, IPSR
 8008e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8008e1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d17e      	bne.n	8008f22 <osThreadNew+0x11a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d07b      	beq.n	8008f22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e2a:	2380      	movs	r3, #128	; 0x80
 8008e2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e2e:	2318      	movs	r3, #24
 8008e30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e36:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d045      	beq.n	8008ece <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <osThreadNew+0x48>
        name = attr->name;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d008      	beq.n	8008e76 <osThreadNew+0x6e>
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	2b38      	cmp	r3, #56	; 0x38
 8008e68:	d805      	bhi.n	8008e76 <osThreadNew+0x6e>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <osThreadNew+0x72>
        return (NULL);
 8008e76:	2300      	movs	r3, #0
 8008e78:	e054      	b.n	8008f24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	089b      	lsrs	r3, r3, #2
 8008e88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00e      	beq.n	8008eb0 <osThreadNew+0xa8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	2bbb      	cmp	r3, #187	; 0xbb
 8008e98:	d90a      	bls.n	8008eb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d006      	beq.n	8008eb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <osThreadNew+0xa8>
        mem = 1;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	e010      	b.n	8008ed2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <osThreadNew+0xca>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d108      	bne.n	8008ed2 <osThreadNew+0xca>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <osThreadNew+0xca>
          mem = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e001      	b.n	8008ed2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d110      	bne.n	8008efa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ee0:	9202      	str	r2, [sp, #8]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f001 fd7c 	bl	800a9ec <xTaskCreateStatic>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	e013      	b.n	8008f22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d110      	bne.n	8008f22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f107 0310 	add.w	r3, r7, #16
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f001 fdc7 	bl	800aaa6 <xTaskCreate>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <osThreadNew+0x11a>
            hTask = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f22:	693b      	ldr	r3, [r7, #16]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3728      	adds	r7, #40	; 0x28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f38:	f3ef 8305 	mrs	r3, IPSR
 8008f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f3e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d12d      	bne.n	8008fa0 <osEventFlagsNew+0x74>
    mem = -1;
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d015      	beq.n	8008f7c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <osEventFlagsNew+0x3a>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b1f      	cmp	r3, #31
 8008f5e:	d902      	bls.n	8008f66 <osEventFlagsNew+0x3a>
        mem = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	e00c      	b.n	8008f80 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d108      	bne.n	8008f80 <osEventFlagsNew+0x54>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <osEventFlagsNew+0x54>
          mem = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e001      	b.n	8008f80 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d106      	bne.n	8008f94 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f982 	bl	8009294 <xEventGroupCreateStatic>
 8008f90:	6178      	str	r0, [r7, #20]
 8008f92:	e005      	b.n	8008fa0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008f9a:	f000 f9b2 	bl	8009302 <xEventGroupCreate>
 8008f9e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008fa0:	697b      	ldr	r3, [r7, #20]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b08a      	sub	sp, #40	; 0x28
 8008fae:	af02      	add	r7, sp, #8
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fba:	f3ef 8305 	mrs	r3, IPSR
 8008fbe:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d175      	bne.n	80090b2 <osSemaphoreNew+0x108>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d072      	beq.n	80090b2 <osSemaphoreNew+0x108>
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d86e      	bhi.n	80090b2 <osSemaphoreNew+0x108>
    mem = -1;
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d015      	beq.n	800900c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <osSemaphoreNew+0x4c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b4f      	cmp	r3, #79	; 0x4f
 8008fee:	d902      	bls.n	8008ff6 <osSemaphoreNew+0x4c>
        mem = 1;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	e00c      	b.n	8009010 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d108      	bne.n	8009010 <osSemaphoreNew+0x66>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <osSemaphoreNew+0x66>
          mem = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	e001      	b.n	8009010 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d04c      	beq.n	80090b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d128      	bne.n	8009070 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10a      	bne.n	800903a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2203      	movs	r2, #3
 800902a:	9200      	str	r2, [sp, #0]
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	2001      	movs	r0, #1
 8009032:	f000 fed9 	bl	8009de8 <xQueueGenericCreateStatic>
 8009036:	61f8      	str	r0, [r7, #28]
 8009038:	e005      	b.n	8009046 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800903a:	2203      	movs	r2, #3
 800903c:	2100      	movs	r1, #0
 800903e:	2001      	movs	r0, #1
 8009040:	f000 ff4a 	bl	8009ed8 <xQueueGenericCreate>
 8009044:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d022      	beq.n	8009092 <osSemaphoreNew+0xe8>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01f      	beq.n	8009092 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009052:	2300      	movs	r3, #0
 8009054:	2200      	movs	r2, #0
 8009056:	2100      	movs	r1, #0
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	f001 f805 	bl	800a068 <xQueueGenericSend>
 800905e:	4603      	mov	r3, r0
 8009060:	2b01      	cmp	r3, #1
 8009062:	d016      	beq.n	8009092 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009064:	69f8      	ldr	r0, [r7, #28]
 8009066:	f001 fb05 	bl	800a674 <vQueueDelete>
            hSemaphore = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
 800906e:	e010      	b.n	8009092 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d108      	bne.n	8009088 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	461a      	mov	r2, r3
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 ff87 	bl	8009f92 <xQueueCreateCountingSemaphoreStatic>
 8009084:	61f8      	str	r0, [r7, #28]
 8009086:	e004      	b.n	8009092 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 ffb8 	bl	800a000 <xQueueCreateCountingSemaphore>
 8009090:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e001      	b.n	80090aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69f8      	ldr	r0, [r7, #28]
 80090ae:	f001 fc15 	bl	800a8dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80090b2:	69fb      	ldr	r3, [r7, #28]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80090d2:	f06f 0303 	mvn.w	r3, #3
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e02c      	b.n	8009134 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090da:	f3ef 8305 	mrs	r3, IPSR
 80090de:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01a      	beq.n	800911c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	4619      	mov	r1, r3
 80090f0:	6938      	ldr	r0, [r7, #16]
 80090f2:	f001 f952 	bl	800a39a <xQueueGiveFromISR>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d003      	beq.n	8009104 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80090fc:	f06f 0302 	mvn.w	r3, #2
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e017      	b.n	8009134 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d014      	beq.n	8009134 <osSemaphoreRelease+0x78>
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <osSemaphoreRelease+0x84>)
 800910c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	e00b      	b.n	8009134 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800911c:	2300      	movs	r3, #0
 800911e:	2200      	movs	r2, #0
 8009120:	2100      	movs	r1, #0
 8009122:	6938      	ldr	r0, [r7, #16]
 8009124:	f000 ffa0 	bl	800a068 <xQueueGenericSend>
 8009128:	4603      	mov	r3, r0
 800912a:	2b01      	cmp	r3, #1
 800912c:	d002      	beq.n	8009134 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800912e:	f06f 0302 	mvn.w	r3, #2
 8009132:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009134:	697b      	ldr	r3, [r7, #20]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af02      	add	r7, sp, #8
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009154:	f3ef 8305 	mrs	r3, IPSR
 8009158:	613b      	str	r3, [r7, #16]
  return(result);
 800915a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800915c:	2b00      	cmp	r3, #0
 800915e:	d15f      	bne.n	8009220 <osMessageQueueNew+0xdc>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d05c      	beq.n	8009220 <osMessageQueueNew+0xdc>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d059      	beq.n	8009220 <osMessageQueueNew+0xdc>
    mem = -1;
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d029      	beq.n	80091cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d012      	beq.n	80091a6 <osMessageQueueNew+0x62>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b4f      	cmp	r3, #79	; 0x4f
 8009186:	d90e      	bls.n	80091a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	429a      	cmp	r2, r3
 800919e:	d302      	bcc.n	80091a6 <osMessageQueueNew+0x62>
        mem = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e014      	b.n	80091d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d110      	bne.n	80091d0 <osMessageQueueNew+0x8c>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10c      	bne.n	80091d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d108      	bne.n	80091d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e001      	b.n	80091d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d10b      	bne.n	80091ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2100      	movs	r1, #0
 80091e0:	9100      	str	r1, [sp, #0]
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fdff 	bl	8009de8 <xQueueGenericCreateStatic>
 80091ea:	61f8      	str	r0, [r7, #28]
 80091ec:	e008      	b.n	8009200 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80091f4:	2200      	movs	r2, #0
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fe6d 	bl	8009ed8 <xQueueGenericCreate>
 80091fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00c      	beq.n	8009220 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <osMessageQueueNew+0xd0>
        name = attr->name;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	e001      	b.n	8009218 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009218:	6979      	ldr	r1, [r7, #20]
 800921a:	69f8      	ldr	r0, [r7, #28]
 800921c:	f001 fb5e 	bl	800a8dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009220:	69fb      	ldr	r3, [r7, #28]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a07      	ldr	r2, [pc, #28]	; (8009258 <vApplicationGetIdleTaskMemory+0x2c>)
 800923c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4a06      	ldr	r2, [pc, #24]	; (800925c <vApplicationGetIdleTaskMemory+0x30>)
 8009242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2280      	movs	r2, #128	; 0x80
 8009248:	601a      	str	r2, [r3, #0]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	24000208 	.word	0x24000208
 800925c:	240002c4 	.word	0x240002c4

08009260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a07      	ldr	r2, [pc, #28]	; (800928c <vApplicationGetTimerTaskMemory+0x2c>)
 8009270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4a06      	ldr	r2, [pc, #24]	; (8009290 <vApplicationGetTimerTaskMemory+0x30>)
 8009276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800927e:	601a      	str	r2, [r3, #0]
}
 8009280:	bf00      	nop
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	240004c4 	.word	0x240004c4
 8009290:	24000580 	.word	0x24000580

08009294 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10a      	bne.n	80092b8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80092b8:	2320      	movs	r3, #32
 80092ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b20      	cmp	r3, #32
 80092c0:	d00a      	beq.n	80092d8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60fb      	str	r3, [r7, #12]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fa0d 	bl	800970c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2201      	movs	r2, #1
 80092f6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80092f8:	697b      	ldr	r3, [r7, #20]
	}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009308:	2020      	movs	r0, #32
 800930a:	f000 f815 	bl	8009338 <pvPortMalloc>
 800930e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f9f3 	bl	800970c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800932c:	687b      	ldr	r3, [r7, #4]
	}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009344:	f001 fd7a 	bl	800ae3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009348:	4b5b      	ldr	r3, [pc, #364]	; (80094b8 <pvPortMalloc+0x180>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009350:	f000 f920 	bl	8009594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009354:	4b59      	ldr	r3, [pc, #356]	; (80094bc <pvPortMalloc+0x184>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 8093 	bne.w	8009488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01d      	beq.n	80093a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009368:	2208      	movs	r2, #8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d014      	beq.n	80093a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f023 0307 	bic.w	r3, r3, #7
 8009380:	3308      	adds	r3, #8
 8009382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <pvPortMalloc+0x6c>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	617b      	str	r3, [r7, #20]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d06e      	beq.n	8009488 <pvPortMalloc+0x150>
 80093aa:	4b45      	ldr	r3, [pc, #276]	; (80094c0 <pvPortMalloc+0x188>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d869      	bhi.n	8009488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093b4:	4b43      	ldr	r3, [pc, #268]	; (80094c4 <pvPortMalloc+0x18c>)
 80093b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093b8:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <pvPortMalloc+0x18c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093be:	e004      	b.n	80093ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d903      	bls.n	80093dc <pvPortMalloc+0xa4>
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f1      	bne.n	80093c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093dc:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <pvPortMalloc+0x180>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d050      	beq.n	8009488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2208      	movs	r2, #8
 80093ec:	4413      	add	r3, r2
 80093ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	2308      	movs	r3, #8
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	429a      	cmp	r2, r3
 8009406:	d91f      	bls.n	8009448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <pvPortMalloc+0xf8>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	613b      	str	r3, [r7, #16]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	1ad2      	subs	r2, r2, r3
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009442:	69b8      	ldr	r0, [r7, #24]
 8009444:	f000 f908 	bl	8009658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009448:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <pvPortMalloc+0x188>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <pvPortMalloc+0x188>)
 8009454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009456:	4b1a      	ldr	r3, [pc, #104]	; (80094c0 <pvPortMalloc+0x188>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <pvPortMalloc+0x190>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d203      	bcs.n	800946a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009462:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <pvPortMalloc+0x188>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a18      	ldr	r2, [pc, #96]	; (80094c8 <pvPortMalloc+0x190>)
 8009468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <pvPortMalloc+0x184>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	431a      	orrs	r2, r3
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <pvPortMalloc+0x194>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	4a11      	ldr	r2, [pc, #68]	; (80094cc <pvPortMalloc+0x194>)
 8009486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009488:	f001 fce6 	bl	800ae58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <pvPortMalloc+0x174>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60fb      	str	r3, [r7, #12]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <pvPortMalloc+0x172>
	return pvReturn;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3728      	adds	r7, #40	; 0x28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	24004588 	.word	0x24004588
 80094bc:	2400459c 	.word	0x2400459c
 80094c0:	2400458c 	.word	0x2400458c
 80094c4:	24004580 	.word	0x24004580
 80094c8:	24004590 	.word	0x24004590
 80094cc:	24004594 	.word	0x24004594

080094d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d04d      	beq.n	800957e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094e2:	2308      	movs	r3, #8
 80094e4:	425b      	negs	r3, r3
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4413      	add	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	4b24      	ldr	r3, [pc, #144]	; (8009588 <vPortFree+0xb8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4013      	ands	r3, r2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <vPortFree+0x44>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60fb      	str	r3, [r7, #12]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <vPortFree+0x62>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60bb      	str	r3, [r7, #8]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <vPortFree+0xb8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01e      	beq.n	800957e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11a      	bne.n	800957e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <vPortFree+0xb8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	43db      	mvns	r3, r3
 8009552:	401a      	ands	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009558:	f001 fc70 	bl	800ae3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <vPortFree+0xbc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4413      	add	r3, r2
 8009566:	4a09      	ldr	r2, [pc, #36]	; (800958c <vPortFree+0xbc>)
 8009568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800956a:	6938      	ldr	r0, [r7, #16]
 800956c:	f000 f874 	bl	8009658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <vPortFree+0xc0>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a06      	ldr	r2, [pc, #24]	; (8009590 <vPortFree+0xc0>)
 8009578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800957a:	f001 fc6d 	bl	800ae58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2400459c 	.word	0x2400459c
 800958c:	2400458c 	.word	0x2400458c
 8009590:	24004598 	.word	0x24004598

08009594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800959a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800959e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095a0:	4b27      	ldr	r3, [pc, #156]	; (8009640 <prvHeapInit+0xac>)
 80095a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3307      	adds	r3, #7
 80095b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	4a1f      	ldr	r2, [pc, #124]	; (8009640 <prvHeapInit+0xac>)
 80095c4:	4413      	add	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095cc:	4a1d      	ldr	r2, [pc, #116]	; (8009644 <prvHeapInit+0xb0>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095d2:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <prvHeapInit+0xb0>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095e0:	2208      	movs	r2, #8
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a15      	ldr	r2, [pc, #84]	; (8009648 <prvHeapInit+0xb4>)
 80095f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <prvHeapInit+0xb4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <prvHeapInit+0xb4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <prvHeapInit+0xb4>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a0a      	ldr	r2, [pc, #40]	; (800964c <prvHeapInit+0xb8>)
 8009622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4a09      	ldr	r2, [pc, #36]	; (8009650 <prvHeapInit+0xbc>)
 800962a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <prvHeapInit+0xc0>)
 800962e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009632:	601a      	str	r2, [r3, #0]
}
 8009634:	bf00      	nop
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	24000980 	.word	0x24000980
 8009644:	24004580 	.word	0x24004580
 8009648:	24004588 	.word	0x24004588
 800964c:	24004590 	.word	0x24004590
 8009650:	2400458c 	.word	0x2400458c
 8009654:	2400459c 	.word	0x2400459c

08009658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009660:	4b28      	ldr	r3, [pc, #160]	; (8009704 <prvInsertBlockIntoFreeList+0xac>)
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e002      	b.n	800966c <prvInsertBlockIntoFreeList+0x14>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	429a      	cmp	r2, r3
 8009674:	d8f7      	bhi.n	8009666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4413      	add	r3, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d108      	bne.n	800969a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	441a      	add	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	441a      	add	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d118      	bne.n	80096e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <prvInsertBlockIntoFreeList+0xb0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d00d      	beq.n	80096d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	441a      	add	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e008      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096d6:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <prvInsertBlockIntoFreeList+0xb0>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e003      	b.n	80096e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d002      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	24004580 	.word	0x24004580
 8009708:	24004588 	.word	0x24004588

0800970c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f103 0208 	add.w	r2, r3, #8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f103 0208 	add.w	r2, r3, #8
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f103 0208 	add.w	r2, r3, #8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
}
 80097a2:	bf00      	nop
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d103      	bne.n	80097ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	e00c      	b.n	80097e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3308      	adds	r3, #8
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e002      	b.n	80097dc <vListInsert+0x2e>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d2f6      	bcs.n	80097d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6892      	ldr	r2, [r2, #8]
 8009836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	6852      	ldr	r2, [r2, #4]
 8009840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d103      	bne.n	8009854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3b04      	subs	r3, #4
 8009884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800988c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3b04      	subs	r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f023 0201 	bic.w	r2, r3, #1
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3b04      	subs	r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098a4:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <pxPortInitialiseStack+0x64>)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3b14      	subs	r3, #20
 80098ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3b04      	subs	r3, #4
 80098ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f06f 0202 	mvn.w	r2, #2
 80098c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3b20      	subs	r3, #32
 80098c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ca:	68fb      	ldr	r3, [r7, #12]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	080098dd 	.word	0x080098dd

080098dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098e6:	4b12      	ldr	r3, [pc, #72]	; (8009930 <prvTaskExitError+0x54>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	d00a      	beq.n	8009906 <prvTaskExitError+0x2a>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <prvTaskExitError+0x28>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60bb      	str	r3, [r7, #8]
}
 8009918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800991a:	bf00      	nop
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0fc      	beq.n	800991c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	24000010 	.word	0x24000010
	...

08009940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <pxCurrentTCBConst2>)
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	6808      	ldr	r0, [r1, #0]
 8009946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	f380 8809 	msr	PSP, r0
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	4770      	bx	lr
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst2>:
 8009960:	240045a8 	.word	0x240045a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009968:	4808      	ldr	r0, [pc, #32]	; (800998c <prvPortStartFirstTask+0x24>)
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	6800      	ldr	r0, [r0, #0]
 800996e:	f380 8808 	msr	MSP, r0
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8814 	msr	CONTROL, r0
 800997a:	b662      	cpsie	i
 800997c:	b661      	cpsie	f
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	df00      	svc	0
 8009988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800998a:	bf00      	nop
 800998c:	e000ed08 	.word	0xe000ed08

08009990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009996:	4b46      	ldr	r3, [pc, #280]	; (8009ab0 <xPortStartScheduler+0x120>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a46      	ldr	r2, [pc, #280]	; (8009ab4 <xPortStartScheduler+0x124>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10a      	bne.n	80099b6 <xPortStartScheduler+0x26>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	613b      	str	r3, [r7, #16]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099b6:	4b3e      	ldr	r3, [pc, #248]	; (8009ab0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a3f      	ldr	r2, [pc, #252]	; (8009ab8 <xPortStartScheduler+0x128>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x46>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099d6:	4b39      	ldr	r3, [pc, #228]	; (8009abc <xPortStartScheduler+0x12c>)
 80099d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	22ff      	movs	r2, #255	; 0xff
 80099e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	4b31      	ldr	r3, [pc, #196]	; (8009ac0 <xPortStartScheduler+0x130>)
 80099fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099fe:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a00:	2207      	movs	r2, #7
 8009a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a04:	e009      	b.n	8009a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a06:	4b2f      	ldr	r3, [pc, #188]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d0ef      	beq.n	8009a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a26:	4b27      	ldr	r3, [pc, #156]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f1c3 0307 	rsb	r3, r3, #7
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d00a      	beq.n	8009a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60bb      	str	r3, [r7, #8]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	021b      	lsls	r3, r3, #8
 8009a4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a52:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ac4 <xPortStartScheduler+0x134>)
 8009a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <xPortStartScheduler+0x138>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a17      	ldr	r2, [pc, #92]	; (8009ac8 <xPortStartScheduler+0x138>)
 8009a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <xPortStartScheduler+0x138>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a14      	ldr	r2, [pc, #80]	; (8009ac8 <xPortStartScheduler+0x138>)
 8009a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a7e:	f000 f8dd 	bl	8009c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a82:	4b12      	ldr	r3, [pc, #72]	; (8009acc <xPortStartScheduler+0x13c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a88:	f000 f8fc 	bl	8009c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <xPortStartScheduler+0x140>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0f      	ldr	r2, [pc, #60]	; (8009ad0 <xPortStartScheduler+0x140>)
 8009a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a98:	f7ff ff66 	bl	8009968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a9c:	f001 fb44 	bl	800b128 <vTaskSwitchContext>
	prvTaskExitError();
 8009aa0:	f7ff ff1c 	bl	80098dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	e000ed00 	.word	0xe000ed00
 8009ab4:	410fc271 	.word	0x410fc271
 8009ab8:	410fc270 	.word	0x410fc270
 8009abc:	e000e400 	.word	0xe000e400
 8009ac0:	240045a0 	.word	0x240045a0
 8009ac4:	240045a4 	.word	0x240045a4
 8009ac8:	e000ed20 	.word	0xe000ed20
 8009acc:	24000010 	.word	0x24000010
 8009ad0:	e000ef34 	.word	0xe000ef34

08009ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	607b      	str	r3, [r7, #4]
}
 8009aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <vPortEnterCritical+0x58>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	4a0d      	ldr	r2, [pc, #52]	; (8009b2c <vPortEnterCritical+0x58>)
 8009af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <vPortEnterCritical+0x58>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d10f      	bne.n	8009b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b00:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <vPortEnterCritical+0x5c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	603b      	str	r3, [r7, #0]
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <vPortEnterCritical+0x4a>
	}
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	24000010 	.word	0x24000010
 8009b30:	e000ed04 	.word	0xe000ed04

08009b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b3a:	4b12      	ldr	r3, [pc, #72]	; (8009b84 <vPortExitCritical+0x50>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <vPortExitCritical+0x24>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	607b      	str	r3, [r7, #4]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b58:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <vPortExitCritical+0x50>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	4a09      	ldr	r2, [pc, #36]	; (8009b84 <vPortExitCritical+0x50>)
 8009b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <vPortExitCritical+0x50>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d105      	bne.n	8009b76 <vPortExitCritical+0x42>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	24000010 	.word	0x24000010
	...

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bb4:	f380 8811 	msr	BASEPRI, r0
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f001 fab2 	bl	800b128 <vTaskSwitchContext>
 8009bc4:	f04f 0000 	mov.w	r0, #0
 8009bc8:	f380 8811 	msr	BASEPRI, r0
 8009bcc:	bc09      	pop	{r0, r3}
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	6808      	ldr	r0, [r1, #0]
 8009bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	f01e 0f10 	tst.w	lr, #16
 8009bda:	bf08      	it	eq
 8009bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be0:	f380 8809 	msr	PSP, r0
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	240045a8 	.word	0x240045a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c12:	f001 f9cf 	bl	800afb4 <xTaskIncrementTick>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <xPortSysTickHandler+0x40>)
 8009c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f383 8811 	msr	BASEPRI, r3
}
 8009c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c40:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <vPortSetupTimerInterrupt+0x38>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <vPortSetupTimerInterrupt+0x3c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0a      	ldr	r2, [pc, #40]	; (8009c7c <vPortSetupTimerInterrupt+0x40>)
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	099b      	lsrs	r3, r3, #6
 8009c58:	4a09      	ldr	r2, [pc, #36]	; (8009c80 <vPortSetupTimerInterrupt+0x44>)
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c5e:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <vPortSetupTimerInterrupt+0x34>)
 8009c60:	2207      	movs	r2, #7
 8009c62:	601a      	str	r2, [r3, #0]
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	e000e010 	.word	0xe000e010
 8009c74:	e000e018 	.word	0xe000e018
 8009c78:	24000000 	.word	0x24000000
 8009c7c:	10624dd3 	.word	0x10624dd3
 8009c80:	e000e014 	.word	0xe000e014

08009c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c94 <vPortEnableVFP+0x10>
 8009c88:	6801      	ldr	r1, [r0, #0]
 8009c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c8e:	6001      	str	r1, [r0, #0]
 8009c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c92:	bf00      	nop
 8009c94:	e000ed88 	.word	0xe000ed88

08009c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d914      	bls.n	8009cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009caa:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <vPortValidateInterruptPriority+0x70>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <vPortValidateInterruptPriority+0x74>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	7afa      	ldrb	r2, [r7, #11]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d20a      	bcs.n	8009cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cd4:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <vPortValidateInterruptPriority+0x78>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <vPortValidateInterruptPriority+0x7c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d90a      	bls.n	8009cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	603b      	str	r3, [r7, #0]
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <vPortValidateInterruptPriority+0x60>
	}
 8009cfa:	bf00      	nop
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	e000e3f0 	.word	0xe000e3f0
 8009d0c:	240045a0 	.word	0x240045a0
 8009d10:	e000ed0c 	.word	0xe000ed0c
 8009d14:	240045a4 	.word	0x240045a4

08009d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericReset+0x2a>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60bb      	str	r3, [r7, #8]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d42:	f7ff fec7 	bl	8009ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4e:	68f9      	ldr	r1, [r7, #12]
 8009d50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d52:	fb01 f303 	mul.w	r3, r1, r3
 8009d56:	441a      	add	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d72:	3b01      	subs	r3, #1
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	441a      	add	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d114      	bne.n	8009dc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01a      	beq.n	8009dd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3310      	adds	r3, #16
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 fa73 	bl	800b290 <xTaskRemoveFromEventList>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d012      	beq.n	8009dd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009db0:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <xQueueGenericReset+0xcc>)
 8009db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	e009      	b.n	8009dd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3310      	adds	r3, #16
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fca0 	bl	800970c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3324      	adds	r3, #36	; 0x24
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff fc9b 	bl	800970c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dd6:	f7ff fead 	bl	8009b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dda:	2301      	movs	r3, #1
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	; 0x38
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <xQueueGenericCreateStatic+0x52>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <xQueueGenericCreateStatic+0x56>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <xQueueGenericCreateStatic+0x58>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <xQueueGenericCreateStatic+0x7e>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <xQueueGenericCreateStatic+0x82>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueGenericCreateStatic+0x84>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	61fb      	str	r3, [r7, #28]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e86:	2350      	movs	r3, #80	; 0x50
 8009e88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b50      	cmp	r3, #80	; 0x50
 8009e8e:	d00a      	beq.n	8009ea6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61bb      	str	r3, [r7, #24]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ea6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00d      	beq.n	8009ece <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009eba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f83f 	bl	8009f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3730      	adds	r7, #48	; 0x30
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	613b      	str	r3, [r7, #16]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	3350      	adds	r3, #80	; 0x50
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff fa11 	bl	8009338 <pvPortMalloc>
 8009f16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d011      	beq.n	8009f42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	3350      	adds	r3, #80	; 0x50
 8009f26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f30:	79fa      	ldrb	r2, [r7, #7]
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4613      	mov	r3, r2
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 f805 	bl	8009f4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f42:	69bb      	ldr	r3, [r7, #24]
	}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3720      	adds	r7, #32
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d103      	bne.n	8009f68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	e002      	b.n	8009f6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	69b8      	ldr	r0, [r7, #24]
 8009f7e:	f7ff fecb 	bl	8009d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b08a      	sub	sp, #40	; 0x28
 8009f96:	af02      	add	r7, sp, #8
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	61bb      	str	r3, [r7, #24]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d90a      	bls.n	8009fd8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	617b      	str	r3, [r7, #20]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fd8:	2302      	movs	r3, #2
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff ff00 	bl	8009de8 <xQueueGenericCreateStatic>
 8009fe8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ff6:	69fb      	ldr	r3, [r7, #28]
	}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	613b      	str	r3, [r7, #16]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d90a      	bls.n	800a044 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	60fb      	str	r3, [r7, #12]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a044:	2202      	movs	r2, #2
 800a046:	2100      	movs	r1, #0
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff ff45 	bl	8009ed8 <xQueueGenericCreate>
 800a04e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a05c:	697b      	ldr	r3, [r7, #20]
	}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08e      	sub	sp, #56	; 0x38
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a076:	2300      	movs	r3, #0
 800a078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10a      	bne.n	800a09a <xQueueGenericSend+0x32>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d103      	bne.n	800a0a8 <xQueueGenericSend+0x40>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <xQueueGenericSend+0x44>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <xQueueGenericSend+0x46>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10a      	bne.n	800a0c8 <xQueueGenericSend+0x60>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d103      	bne.n	800a0d6 <xQueueGenericSend+0x6e>
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <xQueueGenericSend+0x72>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <xQueueGenericSend+0x74>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	623b      	str	r3, [r7, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0f6:	f001 fa8d 	bl	800b614 <xTaskGetSchedulerState>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <xQueueGenericSend+0x9e>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <xQueueGenericSend+0xa2>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <xQueueGenericSend+0xa4>
 800a10a:	2300      	movs	r3, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <xQueueGenericSend+0xbe>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	61fb      	str	r3, [r7, #28]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a126:	f7ff fcd5 	bl	8009ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a132:	429a      	cmp	r2, r3
 800a134:	d302      	bcc.n	800a13c <xQueueGenericSend+0xd4>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d129      	bne.n	800a190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a142:	f000 faba 	bl	800a6ba <prvCopyDataToQueue>
 800a146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d010      	beq.n	800a172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	3324      	adds	r3, #36	; 0x24
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f89b 	bl	800b290 <xTaskRemoveFromEventList>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d013      	beq.n	800a188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a160:	4b3f      	ldr	r3, [pc, #252]	; (800a260 <xQueueGenericSend+0x1f8>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	e00a      	b.n	800a188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a178:	4b39      	ldr	r3, [pc, #228]	; (800a260 <xQueueGenericSend+0x1f8>)
 800a17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a188:	f7ff fcd4 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e063      	b.n	800a258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a196:	f7ff fccd 	bl	8009b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e05c      	b.n	800a258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d106      	bne.n	800a1b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1a4:	f107 0314 	add.w	r3, r7, #20
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 f8d5 	bl	800b358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1b2:	f7ff fcbf 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1b6:	f000 fe41 	bl	800ae3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1ba:	f7ff fc8b 	bl	8009ad4 <vPortEnterCritical>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1c4:	b25b      	sxtb	r3, r3
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d103      	bne.n	800a1d4 <xQueueGenericSend+0x16c>
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1da:	b25b      	sxtb	r3, r3
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d103      	bne.n	800a1ea <xQueueGenericSend+0x182>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ea:	f7ff fca3 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ee:	1d3a      	adds	r2, r7, #4
 800a1f0:	f107 0314 	add.w	r3, r7, #20
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 f8c4 	bl	800b384 <xTaskCheckForTimeOut>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d124      	bne.n	800a24c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a204:	f000 fb51 	bl	800a8aa <prvIsQueueFull>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d018      	beq.n	800a240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	3310      	adds	r3, #16
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f000 ffea 	bl	800b1f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a21e:	f000 fadc 	bl	800a7da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a222:	f000 fe19 	bl	800ae58 <xTaskResumeAll>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f47f af7c 	bne.w	800a126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a22e:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <xQueueGenericSend+0x1f8>)
 800a230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	e772      	b.n	800a126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a242:	f000 faca 	bl	800a7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a246:	f000 fe07 	bl	800ae58 <xTaskResumeAll>
 800a24a:	e76c      	b.n	800a126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24e:	f000 fac4 	bl	800a7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a252:	f000 fe01 	bl	800ae58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3738      	adds	r7, #56	; 0x38
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b090      	sub	sp, #64	; 0x40
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <xQueueGenericSendFromISR+0x3c>
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <xQueueGenericSendFromISR+0x40>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <xQueueGenericSendFromISR+0x42>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d103      	bne.n	800a2ce <xQueueGenericSendFromISR+0x6a>
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <xQueueGenericSendFromISR+0x6e>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xQueueGenericSendFromISR+0x70>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	623b      	str	r3, [r7, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ee:	f7ff fcd3 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 800a2f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	61fa      	str	r2, [r7, #28]
 800a308:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a30a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	429a      	cmp	r2, r3
 800a318:	d302      	bcc.n	800a320 <xQueueGenericSendFromISR+0xbc>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d12f      	bne.n	800a380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a336:	f000 f9c0 	bl	800a6ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a33a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a342:	d112      	bne.n	800a36a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d016      	beq.n	800a37a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	3324      	adds	r3, #36	; 0x24
 800a350:	4618      	mov	r0, r3
 800a352:	f000 ff9d 	bl	800b290 <xTaskRemoveFromEventList>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00e      	beq.n	800a37a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00b      	beq.n	800a37a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	e007      	b.n	800a37a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a36a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a36e:	3301      	adds	r3, #1
 800a370:	b2db      	uxtb	r3, r3
 800a372:	b25a      	sxtb	r2, r3
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a37a:	2301      	movs	r3, #1
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a37e:	e001      	b.n	800a384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a380:	2300      	movs	r3, #0
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f383 8811 	msr	BASEPRI, r3
}
 800a38e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a392:	4618      	mov	r0, r3
 800a394:	3740      	adds	r7, #64	; 0x40
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b08e      	sub	sp, #56	; 0x38
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	623b      	str	r3, [r7, #32]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	61fb      	str	r3, [r7, #28]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d103      	bne.n	800a3f2 <xQueueGiveFromISR+0x58>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <xQueueGiveFromISR+0x5c>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <xQueueGiveFromISR+0x5e>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10a      	bne.n	800a412 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	61bb      	str	r3, [r7, #24]
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a412:	f7ff fc41 	bl	8009c98 <vPortValidateInterruptPriority>
	__asm volatile
 800a416:	f3ef 8211 	mrs	r2, BASEPRI
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	617a      	str	r2, [r7, #20]
 800a42c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a42e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a43e:	429a      	cmp	r2, r3
 800a440:	d22b      	bcs.n	800a49a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	1c5a      	adds	r2, r3, #1
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d112      	bne.n	800a484 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d016      	beq.n	800a494 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	3324      	adds	r3, #36	; 0x24
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 ff10 	bl	800b290 <xTaskRemoveFromEventList>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00e      	beq.n	800a494 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00b      	beq.n	800a494 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2201      	movs	r2, #1
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e007      	b.n	800a494 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a488:	3301      	adds	r3, #1
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	b25a      	sxtb	r2, r3
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a494:	2301      	movs	r3, #1
 800a496:	637b      	str	r3, [r7, #52]	; 0x34
 800a498:	e001      	b.n	800a49e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f383 8811 	msr	BASEPRI, r3
}
 800a4a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3738      	adds	r7, #56	; 0x38
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08c      	sub	sp, #48	; 0x30
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <xQueueReceive+0x30>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	623b      	str	r3, [r7, #32]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d103      	bne.n	800a4f2 <xQueueReceive+0x3e>
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <xQueueReceive+0x42>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <xQueueReceive+0x44>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <xQueueReceive+0x5e>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	61fb      	str	r3, [r7, #28]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a512:	f001 f87f 	bl	800b614 <xTaskGetSchedulerState>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <xQueueReceive+0x6e>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <xQueueReceive+0x72>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <xQueueReceive+0x74>
 800a526:	2300      	movs	r3, #0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <xQueueReceive+0x8e>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	61bb      	str	r3, [r7, #24]
}
 800a53e:	bf00      	nop
 800a540:	e7fe      	b.n	800a540 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a542:	f7ff fac7 	bl	8009ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01f      	beq.n	800a592 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a556:	f000 f91a 	bl	800a78e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00f      	beq.n	800a58a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	3310      	adds	r3, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 fe8e 	bl	800b290 <xTaskRemoveFromEventList>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d007      	beq.n	800a58a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a57a:	4b3d      	ldr	r3, [pc, #244]	; (800a670 <xQueueReceive+0x1bc>)
 800a57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a58a:	f7ff fad3 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 800a58e:	2301      	movs	r3, #1
 800a590:	e069      	b.n	800a666 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a598:	f7ff facc 	bl	8009b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a59c:	2300      	movs	r3, #0
 800a59e:	e062      	b.n	800a666 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5a6:	f107 0310 	add.w	r3, r7, #16
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fed4 	bl	800b358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5b4:	f7ff fabe 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5b8:	f000 fc40 	bl	800ae3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5bc:	f7ff fa8a 	bl	8009ad4 <vPortEnterCritical>
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c6:	b25b      	sxtb	r3, r3
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d103      	bne.n	800a5d6 <xQueueReceive+0x122>
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e2:	d103      	bne.n	800a5ec <xQueueReceive+0x138>
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5ec:	f7ff faa2 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5f0:	1d3a      	adds	r2, r7, #4
 800a5f2:	f107 0310 	add.w	r3, r7, #16
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fec3 	bl	800b384 <xTaskCheckForTimeOut>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d123      	bne.n	800a64c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a606:	f000 f93a 	bl	800a87e <prvIsQueueEmpty>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d017      	beq.n	800a640 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	3324      	adds	r3, #36	; 0x24
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	4611      	mov	r1, r2
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fde9 	bl	800b1f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a61e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a620:	f000 f8db 	bl	800a7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a624:	f000 fc18 	bl	800ae58 <xTaskResumeAll>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d189      	bne.n	800a542 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <xQueueReceive+0x1bc>)
 800a630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	e780      	b.n	800a542 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a642:	f000 f8ca 	bl	800a7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a646:	f000 fc07 	bl	800ae58 <xTaskResumeAll>
 800a64a:	e77a      	b.n	800a542 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a64e:	f000 f8c4 	bl	800a7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a652:	f000 fc01 	bl	800ae58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a658:	f000 f911 	bl	800a87e <prvIsQueueEmpty>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f43f af6f 	beq.w	800a542 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a666:	4618      	mov	r0, r3
 800a668:	3730      	adds	r7, #48	; 0x30
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	e000ed04 	.word	0xe000ed04

0800a674 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <vQueueDelete+0x28>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60bb      	str	r3, [r7, #8]
}
 800a698:	bf00      	nop
 800a69a:	e7fe      	b.n	800a69a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 f947 	bl	800a930 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7fe ff0f 	bl	80094d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10d      	bne.n	800a6f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d14d      	bne.n	800a77c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 ffb3 	bl	800b650 <xTaskPriorityDisinherit>
 800a6ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]
 800a6f2:	e043      	b.n	800a77c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d119      	bne.n	800a72e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6858      	ldr	r0, [r3, #4]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	461a      	mov	r2, r3
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	f001 fcdf 	bl	800c0c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	441a      	add	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	429a      	cmp	r2, r3
 800a722:	d32b      	bcc.n	800a77c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	605a      	str	r2, [r3, #4]
 800a72c:	e026      	b.n	800a77c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	68d8      	ldr	r0, [r3, #12]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	461a      	mov	r2, r3
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	f001 fcc5 	bl	800c0c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	425b      	negs	r3, r3
 800a748:	441a      	add	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	429a      	cmp	r2, r3
 800a758:	d207      	bcs.n	800a76a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	425b      	negs	r3, r3
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d105      	bne.n	800a77c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	3b01      	subs	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a784:	697b      	ldr	r3, [r7, #20]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d018      	beq.n	800a7d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	441a      	add	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d303      	bcc.n	800a7c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68d9      	ldr	r1, [r3, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6838      	ldr	r0, [r7, #0]
 800a7ce:	f001 fc7b 	bl	800c0c8 <memcpy>
	}
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7e2:	f7ff f977 	bl	8009ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7ee:	e011      	b.n	800a814 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d012      	beq.n	800a81e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3324      	adds	r3, #36	; 0x24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fd47 	bl	800b290 <xTaskRemoveFromEventList>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a808:	f000 fe1e 	bl	800b448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
 800a80e:	3b01      	subs	r3, #1
 800a810:	b2db      	uxtb	r3, r3
 800a812:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dce9      	bgt.n	800a7f0 <prvUnlockQueue+0x16>
 800a81c:	e000      	b.n	800a820 <prvUnlockQueue+0x46>
					break;
 800a81e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	22ff      	movs	r2, #255	; 0xff
 800a824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a828:	f7ff f984 	bl	8009b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a82c:	f7ff f952 	bl	8009ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a836:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a838:	e011      	b.n	800a85e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d012      	beq.n	800a868 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3310      	adds	r3, #16
 800a846:	4618      	mov	r0, r3
 800a848:	f000 fd22 	bl	800b290 <xTaskRemoveFromEventList>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a852:	f000 fdf9 	bl	800b448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	3b01      	subs	r3, #1
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a862:	2b00      	cmp	r3, #0
 800a864:	dce9      	bgt.n	800a83a <prvUnlockQueue+0x60>
 800a866:	e000      	b.n	800a86a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a868:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	22ff      	movs	r2, #255	; 0xff
 800a86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a872:	f7ff f95f 	bl	8009b34 <vPortExitCritical>
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a886:	f7ff f925 	bl	8009ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d102      	bne.n	800a898 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a892:	2301      	movs	r3, #1
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	e001      	b.n	800a89c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a89c:	f7ff f94a 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8b2:	f7ff f90f 	bl	8009ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d102      	bne.n	800a8c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e001      	b.n	800a8cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8cc:	f7ff f932 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	e014      	b.n	800a916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8ec:	4a0f      	ldr	r2, [pc, #60]	; (800a92c <vQueueAddToRegistry+0x50>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8f8:	490c      	ldr	r1, [pc, #48]	; (800a92c <vQueueAddToRegistry+0x50>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a902:	4a0a      	ldr	r2, [pc, #40]	; (800a92c <vQueueAddToRegistry+0x50>)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	00db      	lsls	r3, r3, #3
 800a908:	4413      	add	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a90e:	e006      	b.n	800a91e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b07      	cmp	r3, #7
 800a91a:	d9e7      	bls.n	800a8ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	24004f20 	.word	0x24004f20

0800a930 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e016      	b.n	800a96c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a93e:	4a10      	ldr	r2, [pc, #64]	; (800a980 <vQueueUnregisterQueue+0x50>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d10b      	bne.n	800a966 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a94e:	4a0c      	ldr	r2, [pc, #48]	; (800a980 <vQueueUnregisterQueue+0x50>)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2100      	movs	r1, #0
 800a954:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a958:	4a09      	ldr	r2, [pc, #36]	; (800a980 <vQueueUnregisterQueue+0x50>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4413      	add	r3, r2
 800a960:	2200      	movs	r2, #0
 800a962:	605a      	str	r2, [r3, #4]
				break;
 800a964:	e006      	b.n	800a974 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b07      	cmp	r3, #7
 800a970:	d9e5      	bls.n	800a93e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	24004f20 	.word	0x24004f20

0800a984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a994:	f7ff f89e 	bl	8009ad4 <vPortEnterCritical>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99e:	b25b      	sxtb	r3, r3
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a4:	d103      	bne.n	800a9ae <vQueueWaitForMessageRestricted+0x2a>
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ba:	d103      	bne.n	800a9c4 <vQueueWaitForMessageRestricted+0x40>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9c4:	f7ff f8b6 	bl	8009b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fc2d 	bl	800b238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9de:	6978      	ldr	r0, [r7, #20]
 800a9e0:	f7ff fefb 	bl	800a7da <prvUnlockQueue>
	}
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08e      	sub	sp, #56	; 0x38
 800a9f0:	af04      	add	r7, sp, #16
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	623b      	str	r3, [r7, #32]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	61fb      	str	r3, [r7, #28]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa32:	23bc      	movs	r3, #188	; 0xbc
 800aa34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2bbc      	cmp	r3, #188	; 0xbc
 800aa3a:	d00a      	beq.n	800aa52 <xTaskCreateStatic+0x66>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	61bb      	str	r3, [r7, #24]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d01e      	beq.n	800aa98 <xTaskCreateStatic+0xac>
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01b      	beq.n	800aa98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa72:	2300      	movs	r3, #0
 800aa74:	9303      	str	r3, [sp, #12]
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	9302      	str	r3, [sp, #8]
 800aa7a:	f107 0314 	add.w	r3, r7, #20
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 f850 	bl	800ab30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa92:	f000 f8f3 	bl	800ac7c <prvAddNewTaskToReadyList>
 800aa96:	e001      	b.n	800aa9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa9c:	697b      	ldr	r3, [r7, #20]
	}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3728      	adds	r7, #40	; 0x28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b08c      	sub	sp, #48	; 0x30
 800aaaa:	af04      	add	r7, sp, #16
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	603b      	str	r3, [r7, #0]
 800aab2:	4613      	mov	r3, r2
 800aab4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aab6:	88fb      	ldrh	r3, [r7, #6]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fc3c 	bl	8009338 <pvPortMalloc>
 800aac0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00e      	beq.n	800aae6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aac8:	20bc      	movs	r0, #188	; 0xbc
 800aaca:	f7fe fc35 	bl	8009338 <pvPortMalloc>
 800aace:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	631a      	str	r2, [r3, #48]	; 0x30
 800aadc:	e005      	b.n	800aaea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aade:	6978      	ldr	r0, [r7, #20]
 800aae0:	f7fe fcf6 	bl	80094d0 <vPortFree>
 800aae4:	e001      	b.n	800aaea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d017      	beq.n	800ab20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaf8:	88fa      	ldrh	r2, [r7, #6]
 800aafa:	2300      	movs	r3, #0
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	9302      	str	r3, [sp, #8]
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 f80e 	bl	800ab30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab14:	69f8      	ldr	r0, [r7, #28]
 800ab16:	f000 f8b1 	bl	800ac7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	61bb      	str	r3, [r7, #24]
 800ab1e:	e002      	b.n	800ab26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab20:	f04f 33ff 	mov.w	r3, #4294967295
 800ab24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab26:	69bb      	ldr	r3, [r7, #24]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3720      	adds	r7, #32
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	461a      	mov	r2, r3
 800ab48:	21a5      	movs	r1, #165	; 0xa5
 800ab4a:	f001 facb 	bl	800c0e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ab58:	440b      	add	r3, r1
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617b      	str	r3, [r7, #20]
}
 800ab84:	bf00      	nop
 800ab86:	e7fe      	b.n	800ab86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01f      	beq.n	800abce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab8e:	2300      	movs	r3, #0
 800ab90:	61fb      	str	r3, [r7, #28]
 800ab92:	e012      	b.n	800abba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	7819      	ldrb	r1, [r3, #0]
 800ab9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	4413      	add	r3, r2
 800aba2:	3334      	adds	r3, #52	; 0x34
 800aba4:	460a      	mov	r2, r1
 800aba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	3301      	adds	r3, #1
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2b0f      	cmp	r3, #15
 800abbe:	d9e9      	bls.n	800ab94 <prvInitialiseNewTask+0x64>
 800abc0:	e000      	b.n	800abc4 <prvInitialiseNewTask+0x94>
			{
				break;
 800abc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abcc:	e003      	b.n	800abd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	2b37      	cmp	r3, #55	; 0x37
 800abda:	d901      	bls.n	800abe0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abdc:	2337      	movs	r3, #55	; 0x37
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	2200      	movs	r2, #0
 800abf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	3304      	adds	r3, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe fda8 	bl	800974c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	3318      	adds	r3, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fda3 	bl	800974c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	3354      	adds	r3, #84	; 0x54
 800ac30:	2260      	movs	r2, #96	; 0x60
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 fa55 	bl	800c0e4 <memset>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	4a0c      	ldr	r2, [pc, #48]	; (800ac70 <prvInitialiseNewTask+0x140>)
 800ac3e:	659a      	str	r2, [r3, #88]	; 0x58
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	4a0c      	ldr	r2, [pc, #48]	; (800ac74 <prvInitialiseNewTask+0x144>)
 800ac44:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	4a0b      	ldr	r2, [pc, #44]	; (800ac78 <prvInitialiseNewTask+0x148>)
 800ac4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	69b8      	ldr	r0, [r7, #24]
 800ac52:	f7fe fe0f 	bl	8009874 <pxPortInitialiseStack>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac68:	bf00      	nop
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	0800e9d0 	.word	0x0800e9d0
 800ac74:	0800e9f0 	.word	0x0800e9f0
 800ac78:	0800e9b0 	.word	0x0800e9b0

0800ac7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac84:	f7fe ff26 	bl	8009ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac88:	4b2d      	ldr	r3, [pc, #180]	; (800ad40 <prvAddNewTaskToReadyList+0xc4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	4a2c      	ldr	r2, [pc, #176]	; (800ad40 <prvAddNewTaskToReadyList+0xc4>)
 800ac90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac92:	4b2c      	ldr	r3, [pc, #176]	; (800ad44 <prvAddNewTaskToReadyList+0xc8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d109      	bne.n	800acae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac9a:	4a2a      	ldr	r2, [pc, #168]	; (800ad44 <prvAddNewTaskToReadyList+0xc8>)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aca0:	4b27      	ldr	r3, [pc, #156]	; (800ad40 <prvAddNewTaskToReadyList+0xc4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d110      	bne.n	800acca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aca8:	f000 fbf2 	bl	800b490 <prvInitialiseTaskLists>
 800acac:	e00d      	b.n	800acca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acae:	4b26      	ldr	r3, [pc, #152]	; (800ad48 <prvAddNewTaskToReadyList+0xcc>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acb6:	4b23      	ldr	r3, [pc, #140]	; (800ad44 <prvAddNewTaskToReadyList+0xc8>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d802      	bhi.n	800acca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acc4:	4a1f      	ldr	r2, [pc, #124]	; (800ad44 <prvAddNewTaskToReadyList+0xc8>)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acca:	4b20      	ldr	r3, [pc, #128]	; (800ad4c <prvAddNewTaskToReadyList+0xd0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3301      	adds	r3, #1
 800acd0:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <prvAddNewTaskToReadyList+0xd0>)
 800acd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acd4:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <prvAddNewTaskToReadyList+0xd0>)
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <prvAddNewTaskToReadyList+0xd4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d903      	bls.n	800acf0 <prvAddNewTaskToReadyList+0x74>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	4a18      	ldr	r2, [pc, #96]	; (800ad50 <prvAddNewTaskToReadyList+0xd4>)
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4a15      	ldr	r2, [pc, #84]	; (800ad54 <prvAddNewTaskToReadyList+0xd8>)
 800acfe:	441a      	add	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fe fd2d 	bl	8009766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad0c:	f7fe ff12 	bl	8009b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad10:	4b0d      	ldr	r3, [pc, #52]	; (800ad48 <prvAddNewTaskToReadyList+0xcc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00e      	beq.n	800ad36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <prvAddNewTaskToReadyList+0xc8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d207      	bcs.n	800ad36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <prvAddNewTaskToReadyList+0xdc>)
 800ad28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	24004a7c 	.word	0x24004a7c
 800ad44:	240045a8 	.word	0x240045a8
 800ad48:	24004a88 	.word	0x24004a88
 800ad4c:	24004a98 	.word	0x24004a98
 800ad50:	24004a84 	.word	0x24004a84
 800ad54:	240045ac 	.word	0x240045ac
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08a      	sub	sp, #40	; 0x28
 800ad60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad6a:	463a      	mov	r2, r7
 800ad6c:	1d39      	adds	r1, r7, #4
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fa5a 	bl	800922c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	9202      	str	r2, [sp, #8]
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	2300      	movs	r3, #0
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	2300      	movs	r3, #0
 800ad88:	460a      	mov	r2, r1
 800ad8a:	4924      	ldr	r1, [pc, #144]	; (800ae1c <vTaskStartScheduler+0xc0>)
 800ad8c:	4824      	ldr	r0, [pc, #144]	; (800ae20 <vTaskStartScheduler+0xc4>)
 800ad8e:	f7ff fe2d 	bl	800a9ec <xTaskCreateStatic>
 800ad92:	4603      	mov	r3, r0
 800ad94:	4a23      	ldr	r2, [pc, #140]	; (800ae24 <vTaskStartScheduler+0xc8>)
 800ad96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad98:	4b22      	ldr	r3, [pc, #136]	; (800ae24 <vTaskStartScheduler+0xc8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ada0:	2301      	movs	r3, #1
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e001      	b.n	800adaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d102      	bne.n	800adb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adb0:	f000 fd10 	bl	800b7d4 <xTimerCreateTimerTask>
 800adb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d11b      	bne.n	800adf4 <vTaskStartScheduler+0x98>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	613b      	str	r3, [r7, #16]
}
 800adce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800add0:	4b15      	ldr	r3, [pc, #84]	; (800ae28 <vTaskStartScheduler+0xcc>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3354      	adds	r3, #84	; 0x54
 800add6:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <vTaskStartScheduler+0xd0>)
 800add8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adda:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <vTaskStartScheduler+0xd4>)
 800addc:	f04f 32ff 	mov.w	r2, #4294967295
 800ade0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ade2:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <vTaskStartScheduler+0xd8>)
 800ade4:	2201      	movs	r2, #1
 800ade6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ade8:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <vTaskStartScheduler+0xdc>)
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adee:	f7fe fdcf 	bl	8009990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adf2:	e00e      	b.n	800ae12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d10a      	bne.n	800ae12 <vTaskStartScheduler+0xb6>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	60fb      	str	r3, [r7, #12]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <vTaskStartScheduler+0xb4>
}
 800ae12:	bf00      	nop
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800e8dc 	.word	0x0800e8dc
 800ae20:	0800b461 	.word	0x0800b461
 800ae24:	24004aa0 	.word	0x24004aa0
 800ae28:	240045a8 	.word	0x240045a8
 800ae2c:	24000014 	.word	0x24000014
 800ae30:	24004a9c 	.word	0x24004a9c
 800ae34:	24004a88 	.word	0x24004a88
 800ae38:	24004a80 	.word	0x24004a80

0800ae3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae40:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <vTaskSuspendAll+0x18>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	4a03      	ldr	r2, [pc, #12]	; (800ae54 <vTaskSuspendAll+0x18>)
 800ae48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	24004aa4 	.word	0x24004aa4

0800ae58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae66:	4b42      	ldr	r3, [pc, #264]	; (800af70 <xTaskResumeAll+0x118>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	603b      	str	r3, [r7, #0]
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae84:	f7fe fe26 	bl	8009ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae88:	4b39      	ldr	r3, [pc, #228]	; (800af70 <xTaskResumeAll+0x118>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	4a38      	ldr	r2, [pc, #224]	; (800af70 <xTaskResumeAll+0x118>)
 800ae90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae92:	4b37      	ldr	r3, [pc, #220]	; (800af70 <xTaskResumeAll+0x118>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d162      	bne.n	800af60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae9a:	4b36      	ldr	r3, [pc, #216]	; (800af74 <xTaskResumeAll+0x11c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d05e      	beq.n	800af60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aea2:	e02f      	b.n	800af04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea4:	4b34      	ldr	r3, [pc, #208]	; (800af78 <xTaskResumeAll+0x120>)
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3318      	adds	r3, #24
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fcb5 	bl	8009820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fcb0 	bl	8009820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	4b2d      	ldr	r3, [pc, #180]	; (800af7c <xTaskResumeAll+0x124>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d903      	bls.n	800aed4 <xTaskResumeAll+0x7c>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	4a2a      	ldr	r2, [pc, #168]	; (800af7c <xTaskResumeAll+0x124>)
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4a27      	ldr	r2, [pc, #156]	; (800af80 <xTaskResumeAll+0x128>)
 800aee2:	441a      	add	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3304      	adds	r3, #4
 800aee8:	4619      	mov	r1, r3
 800aeea:	4610      	mov	r0, r2
 800aeec:	f7fe fc3b 	bl	8009766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef4:	4b23      	ldr	r3, [pc, #140]	; (800af84 <xTaskResumeAll+0x12c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d302      	bcc.n	800af04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aefe:	4b22      	ldr	r3, [pc, #136]	; (800af88 <xTaskResumeAll+0x130>)
 800af00:	2201      	movs	r2, #1
 800af02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af04:	4b1c      	ldr	r3, [pc, #112]	; (800af78 <xTaskResumeAll+0x120>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1cb      	bne.n	800aea4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af12:	f000 fb5f 	bl	800b5d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af16:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <xTaskResumeAll+0x134>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d010      	beq.n	800af44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af22:	f000 f847 	bl	800afb4 <xTaskIncrementTick>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af2c:	4b16      	ldr	r3, [pc, #88]	; (800af88 <xTaskResumeAll+0x130>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3b01      	subs	r3, #1
 800af36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f1      	bne.n	800af22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <xTaskResumeAll+0x134>)
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af44:	4b10      	ldr	r3, [pc, #64]	; (800af88 <xTaskResumeAll+0x130>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d009      	beq.n	800af60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <xTaskResumeAll+0x138>)
 800af52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af60:	f7fe fde8 	bl	8009b34 <vPortExitCritical>

	return xAlreadyYielded;
 800af64:	68bb      	ldr	r3, [r7, #8]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	24004aa4 	.word	0x24004aa4
 800af74:	24004a7c 	.word	0x24004a7c
 800af78:	24004a3c 	.word	0x24004a3c
 800af7c:	24004a84 	.word	0x24004a84
 800af80:	240045ac 	.word	0x240045ac
 800af84:	240045a8 	.word	0x240045a8
 800af88:	24004a90 	.word	0x24004a90
 800af8c:	24004a8c 	.word	0x24004a8c
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <xTaskGetTickCount+0x1c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afa0:	687b      	ldr	r3, [r7, #4]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	24004a80 	.word	0x24004a80

0800afb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afbe:	4b4f      	ldr	r3, [pc, #316]	; (800b0fc <xTaskIncrementTick+0x148>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f040 808f 	bne.w	800b0e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afc8:	4b4d      	ldr	r3, [pc, #308]	; (800b100 <xTaskIncrementTick+0x14c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3301      	adds	r3, #1
 800afce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afd0:	4a4b      	ldr	r2, [pc, #300]	; (800b100 <xTaskIncrementTick+0x14c>)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d120      	bne.n	800b01e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afdc:	4b49      	ldr	r3, [pc, #292]	; (800b104 <xTaskIncrementTick+0x150>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <xTaskIncrementTick+0x48>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	603b      	str	r3, [r7, #0]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <xTaskIncrementTick+0x46>
 800affc:	4b41      	ldr	r3, [pc, #260]	; (800b104 <xTaskIncrementTick+0x150>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	4b41      	ldr	r3, [pc, #260]	; (800b108 <xTaskIncrementTick+0x154>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a3f      	ldr	r2, [pc, #252]	; (800b104 <xTaskIncrementTick+0x150>)
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	4a3f      	ldr	r2, [pc, #252]	; (800b108 <xTaskIncrementTick+0x154>)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	4b3e      	ldr	r3, [pc, #248]	; (800b10c <xTaskIncrementTick+0x158>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3301      	adds	r3, #1
 800b016:	4a3d      	ldr	r2, [pc, #244]	; (800b10c <xTaskIncrementTick+0x158>)
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	f000 fadb 	bl	800b5d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b01e:	4b3c      	ldr	r3, [pc, #240]	; (800b110 <xTaskIncrementTick+0x15c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	429a      	cmp	r2, r3
 800b026:	d349      	bcc.n	800b0bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b028:	4b36      	ldr	r3, [pc, #216]	; (800b104 <xTaskIncrementTick+0x150>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b032:	4b37      	ldr	r3, [pc, #220]	; (800b110 <xTaskIncrementTick+0x15c>)
 800b034:	f04f 32ff 	mov.w	r2, #4294967295
 800b038:	601a      	str	r2, [r3, #0]
					break;
 800b03a:	e03f      	b.n	800b0bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b03c:	4b31      	ldr	r3, [pc, #196]	; (800b104 <xTaskIncrementTick+0x150>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d203      	bcs.n	800b05c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b054:	4a2e      	ldr	r2, [pc, #184]	; (800b110 <xTaskIncrementTick+0x15c>)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b05a:	e02f      	b.n	800b0bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3304      	adds	r3, #4
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe fbdd 	bl	8009820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d004      	beq.n	800b078 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	3318      	adds	r3, #24
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe fbd4 	bl	8009820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07c:	4b25      	ldr	r3, [pc, #148]	; (800b114 <xTaskIncrementTick+0x160>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d903      	bls.n	800b08c <xTaskIncrementTick+0xd8>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	4a22      	ldr	r2, [pc, #136]	; (800b114 <xTaskIncrementTick+0x160>)
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4a1f      	ldr	r2, [pc, #124]	; (800b118 <xTaskIncrementTick+0x164>)
 800b09a:	441a      	add	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f7fe fb5f 	bl	8009766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	4b1b      	ldr	r3, [pc, #108]	; (800b11c <xTaskIncrementTick+0x168>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d3b8      	bcc.n	800b028 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ba:	e7b5      	b.n	800b028 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0bc:	4b17      	ldr	r3, [pc, #92]	; (800b11c <xTaskIncrementTick+0x168>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c2:	4915      	ldr	r1, [pc, #84]	; (800b118 <xTaskIncrementTick+0x164>)
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d901      	bls.n	800b0d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0d8:	4b11      	ldr	r3, [pc, #68]	; (800b120 <xTaskIncrementTick+0x16c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d007      	beq.n	800b0f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e004      	b.n	800b0f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <xTaskIncrementTick+0x170>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	4a0d      	ldr	r2, [pc, #52]	; (800b124 <xTaskIncrementTick+0x170>)
 800b0ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0f0:	697b      	ldr	r3, [r7, #20]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	24004aa4 	.word	0x24004aa4
 800b100:	24004a80 	.word	0x24004a80
 800b104:	24004a34 	.word	0x24004a34
 800b108:	24004a38 	.word	0x24004a38
 800b10c:	24004a94 	.word	0x24004a94
 800b110:	24004a9c 	.word	0x24004a9c
 800b114:	24004a84 	.word	0x24004a84
 800b118:	240045ac 	.word	0x240045ac
 800b11c:	240045a8 	.word	0x240045a8
 800b120:	24004a90 	.word	0x24004a90
 800b124:	24004a8c 	.word	0x24004a8c

0800b128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b12e:	4b2a      	ldr	r3, [pc, #168]	; (800b1d8 <vTaskSwitchContext+0xb0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b136:	4b29      	ldr	r3, [pc, #164]	; (800b1dc <vTaskSwitchContext+0xb4>)
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b13c:	e046      	b.n	800b1cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b13e:	4b27      	ldr	r3, [pc, #156]	; (800b1dc <vTaskSwitchContext+0xb4>)
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b144:	4b26      	ldr	r3, [pc, #152]	; (800b1e0 <vTaskSwitchContext+0xb8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	60fb      	str	r3, [r7, #12]
 800b14a:	e010      	b.n	800b16e <vTaskSwitchContext+0x46>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vTaskSwitchContext+0x40>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	607b      	str	r3, [r7, #4]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vTaskSwitchContext+0x3e>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	491d      	ldr	r1, [pc, #116]	; (800b1e4 <vTaskSwitchContext+0xbc>)
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0e4      	beq.n	800b14c <vTaskSwitchContext+0x24>
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a15      	ldr	r2, [pc, #84]	; (800b1e4 <vTaskSwitchContext+0xbc>)
 800b18e:	4413      	add	r3, r2
 800b190:	60bb      	str	r3, [r7, #8]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	605a      	str	r2, [r3, #4]
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d104      	bne.n	800b1b2 <vTaskSwitchContext+0x8a>
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	605a      	str	r2, [r3, #4]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	4a0b      	ldr	r2, [pc, #44]	; (800b1e8 <vTaskSwitchContext+0xc0>)
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <vTaskSwitchContext+0xb8>)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <vTaskSwitchContext+0xc0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3354      	adds	r3, #84	; 0x54
 800b1c8:	4a08      	ldr	r2, [pc, #32]	; (800b1ec <vTaskSwitchContext+0xc4>)
 800b1ca:	6013      	str	r3, [r2, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	24004aa4 	.word	0x24004aa4
 800b1dc:	24004a90 	.word	0x24004a90
 800b1e0:	24004a84 	.word	0x24004a84
 800b1e4:	240045ac 	.word	0x240045ac
 800b1e8:	240045a8 	.word	0x240045a8
 800b1ec:	24000014 	.word	0x24000014

0800b1f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b216:	4b07      	ldr	r3, [pc, #28]	; (800b234 <vTaskPlaceOnEventList+0x44>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3318      	adds	r3, #24
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7fe fac5 	bl	80097ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b224:	2101      	movs	r1, #1
 800b226:	6838      	ldr	r0, [r7, #0]
 800b228:	f000 fa80 	bl	800b72c <prvAddCurrentTaskToDelayedList>
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	240045a8 	.word	0x240045a8

0800b238 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10a      	bne.n	800b260 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	617b      	str	r3, [r7, #20]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b260:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <vTaskPlaceOnEventListRestricted+0x54>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3318      	adds	r3, #24
 800b266:	4619      	mov	r1, r3
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7fe fa7c 	bl	8009766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b274:	f04f 33ff 	mov.w	r3, #4294967295
 800b278:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	68b8      	ldr	r0, [r7, #8]
 800b27e:	f000 fa55 	bl	800b72c <prvAddCurrentTaskToDelayedList>
	}
 800b282:	bf00      	nop
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	240045a8 	.word	0x240045a8

0800b290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60fb      	str	r3, [r7, #12]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3318      	adds	r3, #24
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe faad 	bl	8009820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c6:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <xTaskRemoveFromEventList+0xb0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d11d      	bne.n	800b30a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe faa4 	bl	8009820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2dc:	4b19      	ldr	r3, [pc, #100]	; (800b344 <xTaskRemoveFromEventList+0xb4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d903      	bls.n	800b2ec <xTaskRemoveFromEventList+0x5c>
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	4a16      	ldr	r2, [pc, #88]	; (800b344 <xTaskRemoveFromEventList+0xb4>)
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4a13      	ldr	r2, [pc, #76]	; (800b348 <xTaskRemoveFromEventList+0xb8>)
 800b2fa:	441a      	add	r2, r3
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f7fe fa2f 	bl	8009766 <vListInsertEnd>
 800b308:	e005      	b.n	800b316 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	3318      	adds	r3, #24
 800b30e:	4619      	mov	r1, r3
 800b310:	480e      	ldr	r0, [pc, #56]	; (800b34c <xTaskRemoveFromEventList+0xbc>)
 800b312:	f7fe fa28 	bl	8009766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31a:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <xTaskRemoveFromEventList+0xc0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	429a      	cmp	r2, r3
 800b322:	d905      	bls.n	800b330 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b324:	2301      	movs	r3, #1
 800b326:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b328:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <xTaskRemoveFromEventList+0xc4>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	e001      	b.n	800b334 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b334:	697b      	ldr	r3, [r7, #20]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	24004aa4 	.word	0x24004aa4
 800b344:	24004a84 	.word	0x24004a84
 800b348:	240045ac 	.word	0x240045ac
 800b34c:	24004a3c 	.word	0x24004a3c
 800b350:	240045a8 	.word	0x240045a8
 800b354:	24004a90 	.word	0x24004a90

0800b358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b360:	4b06      	ldr	r3, [pc, #24]	; (800b37c <vTaskInternalSetTimeOutState+0x24>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <vTaskInternalSetTimeOutState+0x28>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	605a      	str	r2, [r3, #4]
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	24004a94 	.word	0x24004a94
 800b380:	24004a80 	.word	0x24004a80

0800b384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	613b      	str	r3, [r7, #16]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	60fb      	str	r3, [r7, #12]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3c6:	f7fe fb85 	bl	8009ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3ca:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <xTaskCheckForTimeOut+0xbc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e2:	d102      	bne.n	800b3ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	e023      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b15      	ldr	r3, [pc, #84]	; (800b444 <xTaskCheckForTimeOut+0xc0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d007      	beq.n	800b406 <xTaskCheckForTimeOut+0x82>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d302      	bcc.n	800b406 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b400:	2301      	movs	r3, #1
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e015      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d20b      	bcs.n	800b428 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	1ad2      	subs	r2, r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ff9b 	bl	800b358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	61fb      	str	r3, [r7, #28]
 800b426:	e004      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b432:	f7fe fb7f 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	24004a80 	.word	0x24004a80
 800b444:	24004a94 	.word	0x24004a94

0800b448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b44c:	4b03      	ldr	r3, [pc, #12]	; (800b45c <vTaskMissedYield+0x14>)
 800b44e:	2201      	movs	r2, #1
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	24004a90 	.word	0x24004a90

0800b460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b468:	f000 f852 	bl	800b510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <prvIdleTask+0x28>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d9f9      	bls.n	800b468 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <prvIdleTask+0x2c>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b484:	e7f0      	b.n	800b468 <prvIdleTask+0x8>
 800b486:	bf00      	nop
 800b488:	240045ac 	.word	0x240045ac
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b496:	2300      	movs	r3, #0
 800b498:	607b      	str	r3, [r7, #4]
 800b49a:	e00c      	b.n	800b4b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4a12      	ldr	r2, [pc, #72]	; (800b4f0 <prvInitialiseTaskLists+0x60>)
 800b4a8:	4413      	add	r3, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fe f92e 	bl	800970c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b37      	cmp	r3, #55	; 0x37
 800b4ba:	d9ef      	bls.n	800b49c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4bc:	480d      	ldr	r0, [pc, #52]	; (800b4f4 <prvInitialiseTaskLists+0x64>)
 800b4be:	f7fe f925 	bl	800970c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4c2:	480d      	ldr	r0, [pc, #52]	; (800b4f8 <prvInitialiseTaskLists+0x68>)
 800b4c4:	f7fe f922 	bl	800970c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4c8:	480c      	ldr	r0, [pc, #48]	; (800b4fc <prvInitialiseTaskLists+0x6c>)
 800b4ca:	f7fe f91f 	bl	800970c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4ce:	480c      	ldr	r0, [pc, #48]	; (800b500 <prvInitialiseTaskLists+0x70>)
 800b4d0:	f7fe f91c 	bl	800970c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4d4:	480b      	ldr	r0, [pc, #44]	; (800b504 <prvInitialiseTaskLists+0x74>)
 800b4d6:	f7fe f919 	bl	800970c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <prvInitialiseTaskLists+0x78>)
 800b4dc:	4a05      	ldr	r2, [pc, #20]	; (800b4f4 <prvInitialiseTaskLists+0x64>)
 800b4de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <prvInitialiseTaskLists+0x7c>)
 800b4e2:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <prvInitialiseTaskLists+0x68>)
 800b4e4:	601a      	str	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	240045ac 	.word	0x240045ac
 800b4f4:	24004a0c 	.word	0x24004a0c
 800b4f8:	24004a20 	.word	0x24004a20
 800b4fc:	24004a3c 	.word	0x24004a3c
 800b500:	24004a50 	.word	0x24004a50
 800b504:	24004a68 	.word	0x24004a68
 800b508:	24004a34 	.word	0x24004a34
 800b50c:	24004a38 	.word	0x24004a38

0800b510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b516:	e019      	b.n	800b54c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b518:	f7fe fadc 	bl	8009ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <prvCheckTasksWaitingTermination+0x50>)
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3304      	adds	r3, #4
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe f979 	bl	8009820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b52e:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <prvCheckTasksWaitingTermination+0x54>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3b01      	subs	r3, #1
 800b534:	4a0b      	ldr	r2, [pc, #44]	; (800b564 <prvCheckTasksWaitingTermination+0x54>)
 800b536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b538:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4a0a      	ldr	r2, [pc, #40]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b542:	f7fe faf7 	bl	8009b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f810 	bl	800b56c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e1      	bne.n	800b518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	24004a50 	.word	0x24004a50
 800b564:	24004a7c 	.word	0x24004a7c
 800b568:	24004a64 	.word	0x24004a64

0800b56c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3354      	adds	r3, #84	; 0x54
 800b578:	4618      	mov	r0, r3
 800b57a:	f001 fab5 	bl	800cae8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b584:	2b00      	cmp	r3, #0
 800b586:	d108      	bne.n	800b59a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fd ff9f 	bl	80094d0 <vPortFree>
				vPortFree( pxTCB );
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fd ff9c 	bl	80094d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b598:	e018      	b.n	800b5cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d103      	bne.n	800b5ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7fd ff93 	bl	80094d0 <vPortFree>
	}
 800b5aa:	e00f      	b.n	800b5cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d00a      	beq.n	800b5cc <prvDeleteTCB+0x60>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60fb      	str	r3, [r7, #12]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <prvDeleteTCB+0x5e>
	}
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <prvResetNextTaskUnblockTime+0x38>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <prvResetNextTaskUnblockTime+0x3c>)
 800b5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5ec:	e008      	b.n	800b600 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <prvResetNextTaskUnblockTime+0x38>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a04      	ldr	r2, [pc, #16]	; (800b610 <prvResetNextTaskUnblockTime+0x3c>)
 800b5fe:	6013      	str	r3, [r2, #0]
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	24004a34 	.word	0x24004a34
 800b610:	24004a9c 	.word	0x24004a9c

0800b614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <xTaskGetSchedulerState+0x34>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d102      	bne.n	800b628 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b622:	2301      	movs	r3, #1
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	e008      	b.n	800b63a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b628:	4b08      	ldr	r3, [pc, #32]	; (800b64c <xTaskGetSchedulerState+0x38>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d102      	bne.n	800b636 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b630:	2302      	movs	r3, #2
 800b632:	607b      	str	r3, [r7, #4]
 800b634:	e001      	b.n	800b63a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b636:	2300      	movs	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b63a:	687b      	ldr	r3, [r7, #4]
	}
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	24004a88 	.word	0x24004a88
 800b64c:	24004aa4 	.word	0x24004aa4

0800b650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d056      	beq.n	800b714 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b666:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <xTaskPriorityDisinherit+0xd0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d00a      	beq.n	800b686 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	60fb      	str	r3, [r7, #12]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60bb      	str	r3, [r7, #8]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a8:	1e5a      	subs	r2, r3, #1
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d02c      	beq.n	800b714 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d128      	bne.n	800b714 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe f8aa 	bl	8009820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4b0f      	ldr	r3, [pc, #60]	; (800b724 <xTaskPriorityDisinherit+0xd4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d903      	bls.n	800b6f4 <xTaskPriorityDisinherit+0xa4>
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a0c      	ldr	r2, [pc, #48]	; (800b724 <xTaskPriorityDisinherit+0xd4>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a09      	ldr	r2, [pc, #36]	; (800b728 <xTaskPriorityDisinherit+0xd8>)
 800b702:	441a      	add	r2, r3
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe f82b 	bl	8009766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b714:	697b      	ldr	r3, [r7, #20]
	}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	240045a8 	.word	0x240045a8
 800b724:	24004a84 	.word	0x24004a84
 800b728:	240045ac 	.word	0x240045ac

0800b72c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b736:	4b21      	ldr	r3, [pc, #132]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73c:	4b20      	ldr	r3, [pc, #128]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe f86c 	bl	8009820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74e:	d10a      	bne.n	800b766 <prvAddCurrentTaskToDelayedList+0x3a>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3304      	adds	r3, #4
 800b75c:	4619      	mov	r1, r3
 800b75e:	4819      	ldr	r0, [pc, #100]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b760:	f7fe f801 	bl	8009766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b764:	e026      	b.n	800b7b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4413      	add	r3, r2
 800b76c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b76e:	4b14      	ldr	r3, [pc, #80]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d209      	bcs.n	800b792 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b77e:	4b12      	ldr	r3, [pc, #72]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3304      	adds	r3, #4
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fe f80f 	bl	80097ae <vListInsert>
}
 800b790:	e010      	b.n	800b7b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b792:	4b0e      	ldr	r3, [pc, #56]	; (800b7cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3304      	adds	r3, #4
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7fe f805 	bl	80097ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d202      	bcs.n	800b7b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7ae:	4a08      	ldr	r2, [pc, #32]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	6013      	str	r3, [r2, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	24004a80 	.word	0x24004a80
 800b7c0:	240045a8 	.word	0x240045a8
 800b7c4:	24004a68 	.word	0x24004a68
 800b7c8:	24004a38 	.word	0x24004a38
 800b7cc:	24004a34 	.word	0x24004a34
 800b7d0:	24004a9c 	.word	0x24004a9c

0800b7d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08a      	sub	sp, #40	; 0x28
 800b7d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7de:	f000 fb07 	bl	800bdf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7e2:	4b1c      	ldr	r3, [pc, #112]	; (800b854 <xTimerCreateTimerTask+0x80>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d021      	beq.n	800b82e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7f2:	1d3a      	adds	r2, r7, #4
 800b7f4:	f107 0108 	add.w	r1, r7, #8
 800b7f8:	f107 030c 	add.w	r3, r7, #12
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fd fd2f 	bl	8009260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	9202      	str	r2, [sp, #8]
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	2302      	movs	r3, #2
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	2300      	movs	r3, #0
 800b812:	460a      	mov	r2, r1
 800b814:	4910      	ldr	r1, [pc, #64]	; (800b858 <xTimerCreateTimerTask+0x84>)
 800b816:	4811      	ldr	r0, [pc, #68]	; (800b85c <xTimerCreateTimerTask+0x88>)
 800b818:	f7ff f8e8 	bl	800a9ec <xTaskCreateStatic>
 800b81c:	4603      	mov	r3, r0
 800b81e:	4a10      	ldr	r2, [pc, #64]	; (800b860 <xTimerCreateTimerTask+0x8c>)
 800b820:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b822:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <xTimerCreateTimerTask+0x8c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b82a:	2301      	movs	r3, #1
 800b82c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	613b      	str	r3, [r7, #16]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b84a:	697b      	ldr	r3, [r7, #20]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	24004ad8 	.word	0x24004ad8
 800b858:	0800e8e4 	.word	0x0800e8e4
 800b85c:	0800b999 	.word	0x0800b999
 800b860:	24004adc 	.word	0x24004adc

0800b864 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b872:	2300      	movs	r3, #0
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b892:	4b1a      	ldr	r3, [pc, #104]	; (800b8fc <xTimerGenericCommand+0x98>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d02a      	beq.n	800b8f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b05      	cmp	r3, #5
 800b8aa:	dc18      	bgt.n	800b8de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8ac:	f7ff feb2 	bl	800b614 <xTaskGetSchedulerState>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d109      	bne.n	800b8ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <xTimerGenericCommand+0x98>)
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	f107 0110 	add.w	r1, r7, #16
 800b8be:	2300      	movs	r3, #0
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	f7fe fbd1 	bl	800a068 <xQueueGenericSend>
 800b8c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b8c8:	e012      	b.n	800b8f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <xTimerGenericCommand+0x98>)
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f107 0110 	add.w	r1, r7, #16
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f7fe fbc7 	bl	800a068 <xQueueGenericSend>
 800b8da:	6278      	str	r0, [r7, #36]	; 0x24
 800b8dc:	e008      	b.n	800b8f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8de:	4b07      	ldr	r3, [pc, #28]	; (800b8fc <xTimerGenericCommand+0x98>)
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	f107 0110 	add.w	r1, r7, #16
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	f7fe fcbb 	bl	800a264 <xQueueGenericSendFromISR>
 800b8ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3728      	adds	r7, #40	; 0x28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	24004ad8 	.word	0x24004ad8

0800b900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af02      	add	r7, sp, #8
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b90a:	4b22      	ldr	r3, [pc, #136]	; (800b994 <prvProcessExpiredTimer+0x94>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3304      	adds	r3, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fd ff81 	bl	8009820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d022      	beq.n	800b972 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	699a      	ldr	r2, [r3, #24]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	18d1      	adds	r1, r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	6978      	ldr	r0, [r7, #20]
 800b93a:	f000 f8d1 	bl	800bae0 <prvInsertTimerInActiveList>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01f      	beq.n	800b984 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b944:	2300      	movs	r3, #0
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	2300      	movs	r3, #0
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	2100      	movs	r1, #0
 800b94e:	6978      	ldr	r0, [r7, #20]
 800b950:	f7ff ff88 	bl	800b864 <xTimerGenericCommand>
 800b954:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d113      	bne.n	800b984 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60fb      	str	r3, [r7, #12]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b978:	f023 0301 	bic.w	r3, r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	6a1b      	ldr	r3, [r3, #32]
 800b988:	6978      	ldr	r0, [r7, #20]
 800b98a:	4798      	blx	r3
}
 800b98c:	bf00      	nop
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	24004ad0 	.word	0x24004ad0

0800b998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f857 	bl	800ba58 <prvGetNextExpireTime>
 800b9aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f000 f803 	bl	800b9bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9b6:	f000 f8d5 	bl	800bb64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9ba:	e7f1      	b.n	800b9a0 <prvTimerTask+0x8>

0800b9bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9c6:	f7ff fa39 	bl	800ae3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9ca:	f107 0308 	add.w	r3, r7, #8
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 f866 	bl	800baa0 <prvSampleTimeNow>
 800b9d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d130      	bne.n	800ba3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <prvProcessTimerOrBlockTask+0x3c>
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d806      	bhi.n	800b9f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9ea:	f7ff fa35 	bl	800ae58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff ff85 	bl	800b900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9f6:	e024      	b.n	800ba42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d008      	beq.n	800ba10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9fe:	4b13      	ldr	r3, [pc, #76]	; (800ba4c <prvProcessTimerOrBlockTask+0x90>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <prvProcessTimerOrBlockTask+0x50>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e000      	b.n	800ba0e <prvProcessTimerOrBlockTask+0x52>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba10:	4b0f      	ldr	r3, [pc, #60]	; (800ba50 <prvProcessTimerOrBlockTask+0x94>)
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f7fe ffb1 	bl	800a984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba22:	f7ff fa19 	bl	800ae58 <xTaskResumeAll>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <prvProcessTimerOrBlockTask+0x98>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	f3bf 8f6f 	isb	sy
}
 800ba3c:	e001      	b.n	800ba42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba3e:	f7ff fa0b 	bl	800ae58 <xTaskResumeAll>
}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	24004ad4 	.word	0x24004ad4
 800ba50:	24004ad8 	.word	0x24004ad8
 800ba54:	e000ed04 	.word	0xe000ed04

0800ba58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba60:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <prvGetNextExpireTime+0x44>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <prvGetNextExpireTime+0x16>
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	e000      	b.n	800ba70 <prvGetNextExpireTime+0x18>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d105      	bne.n	800ba88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <prvGetNextExpireTime+0x44>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	e001      	b.n	800ba8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	24004ad0 	.word	0x24004ad0

0800baa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800baa8:	f7ff fa74 	bl	800af94 <xTaskGetTickCount>
 800baac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800baae:	4b0b      	ldr	r3, [pc, #44]	; (800badc <prvSampleTimeNow+0x3c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d205      	bcs.n	800bac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bab8:	f000 f936 	bl	800bd28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e002      	b.n	800baca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800baca:	4a04      	ldr	r2, [pc, #16]	; (800badc <prvSampleTimeNow+0x3c>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bad0:	68fb      	ldr	r3, [r7, #12]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	24004ae0 	.word	0x24004ae0

0800bae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d812      	bhi.n	800bb2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	1ad2      	subs	r2, r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d302      	bcc.n	800bb1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	617b      	str	r3, [r7, #20]
 800bb18:	e01b      	b.n	800bb52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb1a:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <prvInsertTimerInActiveList+0x7c>)
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3304      	adds	r3, #4
 800bb22:	4619      	mov	r1, r3
 800bb24:	4610      	mov	r0, r2
 800bb26:	f7fd fe42 	bl	80097ae <vListInsert>
 800bb2a:	e012      	b.n	800bb52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d206      	bcs.n	800bb42 <prvInsertTimerInActiveList+0x62>
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d302      	bcc.n	800bb42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e007      	b.n	800bb52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <prvInsertTimerInActiveList+0x80>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fd fe2e 	bl	80097ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb52:	697b      	ldr	r3, [r7, #20]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	24004ad4 	.word	0x24004ad4
 800bb60:	24004ad0 	.word	0x24004ad0

0800bb64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb6a:	e0ca      	b.n	800bd02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	da18      	bge.n	800bba4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb72:	1d3b      	adds	r3, r7, #4
 800bb74:	3304      	adds	r3, #4
 800bb76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	61fb      	str	r3, [r7, #28]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9a:	6850      	ldr	r0, [r2, #4]
 800bb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9e:	6892      	ldr	r2, [r2, #8]
 800bba0:	4611      	mov	r1, r2
 800bba2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f2c0 80aa 	blt.w	800bd00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d004      	beq.n	800bbc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fd fe2f 	bl	8009820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbc2:	463b      	mov	r3, r7
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff ff6b 	bl	800baa0 <prvSampleTimeNow>
 800bbca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	f200 8097 	bhi.w	800bd02 <prvProcessReceivedCommands+0x19e>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <prvProcessReceivedCommands+0x78>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bc05 	.word	0x0800bc05
 800bbe0:	0800bc05 	.word	0x0800bc05
 800bbe4:	0800bc05 	.word	0x0800bc05
 800bbe8:	0800bc79 	.word	0x0800bc79
 800bbec:	0800bc8d 	.word	0x0800bc8d
 800bbf0:	0800bcd7 	.word	0x0800bcd7
 800bbf4:	0800bc05 	.word	0x0800bc05
 800bbf8:	0800bc05 	.word	0x0800bc05
 800bbfc:	0800bc79 	.word	0x0800bc79
 800bc00:	0800bc8d 	.word	0x0800bc8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc0a:	f043 0301 	orr.w	r3, r3, #1
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	18d1      	adds	r1, r2, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc24:	f7ff ff5c 	bl	800bae0 <prvInsertTimerInActiveList>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d069      	beq.n	800bd02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d05e      	beq.n	800bd02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	441a      	add	r2, r3
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	2300      	movs	r3, #0
 800bc52:	2100      	movs	r1, #0
 800bc54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc56:	f7ff fe05 	bl	800b864 <xTimerGenericCommand>
 800bc5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc5c:	6a3b      	ldr	r3, [r7, #32]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d14f      	bne.n	800bd02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	61bb      	str	r3, [r7, #24]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7e:	f023 0301 	bic.w	r3, r3, #1
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc8a:	e03a      	b.n	800bd02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10a      	bne.n	800bcc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	617b      	str	r3, [r7, #20]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc4:	699a      	ldr	r2, [r3, #24]
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	18d1      	adds	r1, r2, r3
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd0:	f7ff ff06 	bl	800bae0 <prvInsertTimerInActiveList>
					break;
 800bcd4:	e015      	b.n	800bd02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d103      	bne.n	800bcec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce6:	f7fd fbf3 	bl	80094d0 <vPortFree>
 800bcea:	e00a      	b.n	800bd02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf2:	f023 0301 	bic.w	r3, r3, #1
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcfe:	e000      	b.n	800bd02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd02:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <prvProcessReceivedCommands+0x1c0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	1d39      	adds	r1, r7, #4
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fbd2 	bl	800a4b4 <xQueueReceive>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f47f af2a 	bne.w	800bb6c <prvProcessReceivedCommands+0x8>
	}
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	3730      	adds	r7, #48	; 0x30
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	24004ad8 	.word	0x24004ad8

0800bd28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd2e:	e048      	b.n	800bdc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd30:	4b2d      	ldr	r3, [pc, #180]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3a:	4b2b      	ldr	r3, [pc, #172]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fd fd69 	bl	8009820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02e      	beq.n	800bdc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d90e      	bls.n	800bd94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd82:	4b19      	ldr	r3, [pc, #100]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7fd fd0e 	bl	80097ae <vListInsert>
 800bd92:	e016      	b.n	800bdc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd94:	2300      	movs	r3, #0
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff fd60 	bl	800b864 <xTimerGenericCommand>
 800bda4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	603b      	str	r3, [r7, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1b1      	bne.n	800bd30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdcc:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdd2:	4b06      	ldr	r3, [pc, #24]	; (800bdec <prvSwitchTimerLists+0xc4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a04      	ldr	r2, [pc, #16]	; (800bde8 <prvSwitchTimerLists+0xc0>)
 800bdd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdda:	4a04      	ldr	r2, [pc, #16]	; (800bdec <prvSwitchTimerLists+0xc4>)
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	6013      	str	r3, [r2, #0]
}
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	24004ad0 	.word	0x24004ad0
 800bdec:	24004ad4 	.word	0x24004ad4

0800bdf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdf6:	f7fd fe6d 	bl	8009ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdfa:	4b15      	ldr	r3, [pc, #84]	; (800be50 <prvCheckForValidListAndQueue+0x60>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d120      	bne.n	800be44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be02:	4814      	ldr	r0, [pc, #80]	; (800be54 <prvCheckForValidListAndQueue+0x64>)
 800be04:	f7fd fc82 	bl	800970c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be08:	4813      	ldr	r0, [pc, #76]	; (800be58 <prvCheckForValidListAndQueue+0x68>)
 800be0a:	f7fd fc7f 	bl	800970c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be0e:	4b13      	ldr	r3, [pc, #76]	; (800be5c <prvCheckForValidListAndQueue+0x6c>)
 800be10:	4a10      	ldr	r2, [pc, #64]	; (800be54 <prvCheckForValidListAndQueue+0x64>)
 800be12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be14:	4b12      	ldr	r3, [pc, #72]	; (800be60 <prvCheckForValidListAndQueue+0x70>)
 800be16:	4a10      	ldr	r2, [pc, #64]	; (800be58 <prvCheckForValidListAndQueue+0x68>)
 800be18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be1a:	2300      	movs	r3, #0
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	4b11      	ldr	r3, [pc, #68]	; (800be64 <prvCheckForValidListAndQueue+0x74>)
 800be20:	4a11      	ldr	r2, [pc, #68]	; (800be68 <prvCheckForValidListAndQueue+0x78>)
 800be22:	2110      	movs	r1, #16
 800be24:	200a      	movs	r0, #10
 800be26:	f7fd ffdf 	bl	8009de8 <xQueueGenericCreateStatic>
 800be2a:	4603      	mov	r3, r0
 800be2c:	4a08      	ldr	r2, [pc, #32]	; (800be50 <prvCheckForValidListAndQueue+0x60>)
 800be2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be30:	4b07      	ldr	r3, [pc, #28]	; (800be50 <prvCheckForValidListAndQueue+0x60>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d005      	beq.n	800be44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <prvCheckForValidListAndQueue+0x60>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	490b      	ldr	r1, [pc, #44]	; (800be6c <prvCheckForValidListAndQueue+0x7c>)
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fd4c 	bl	800a8dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be44:	f7fd fe76 	bl	8009b34 <vPortExitCritical>
}
 800be48:	bf00      	nop
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	24004ad8 	.word	0x24004ad8
 800be54:	24004aa8 	.word	0x24004aa8
 800be58:	24004abc 	.word	0x24004abc
 800be5c:	24004ad0 	.word	0x24004ad0
 800be60:	24004ad4 	.word	0x24004ad4
 800be64:	24004b84 	.word	0x24004b84
 800be68:	24004ae4 	.word	0x24004ae4
 800be6c:	0800e8ec 	.word	0x0800e8ec

0800be70 <__errno>:
 800be70:	4b01      	ldr	r3, [pc, #4]	; (800be78 <__errno+0x8>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	24000014 	.word	0x24000014

0800be7c <std>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	e9c0 3300 	strd	r3, r3, [r0]
 800be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	8181      	strh	r1, [r0, #12]
 800be8e:	6643      	str	r3, [r0, #100]	; 0x64
 800be90:	81c2      	strh	r2, [r0, #14]
 800be92:	6183      	str	r3, [r0, #24]
 800be94:	4619      	mov	r1, r3
 800be96:	2208      	movs	r2, #8
 800be98:	305c      	adds	r0, #92	; 0x5c
 800be9a:	f000 f923 	bl	800c0e4 <memset>
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x38>)
 800bea0:	6263      	str	r3, [r4, #36]	; 0x24
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x3c>)
 800bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x40>)
 800bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x44>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	0800cbc1 	.word	0x0800cbc1
 800beb8:	0800cbe3 	.word	0x0800cbe3
 800bebc:	0800cc1b 	.word	0x0800cc1b
 800bec0:	0800cc3f 	.word	0x0800cc3f

0800bec4 <_cleanup_r>:
 800bec4:	4901      	ldr	r1, [pc, #4]	; (800becc <_cleanup_r+0x8>)
 800bec6:	f000 b8af 	b.w	800c028 <_fwalk_reent>
 800beca:	bf00      	nop
 800becc:	0800db39 	.word	0x0800db39

0800bed0 <__sfmoreglue>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	1e4a      	subs	r2, r1, #1
 800bed4:	2568      	movs	r5, #104	; 0x68
 800bed6:	4355      	muls	r5, r2
 800bed8:	460e      	mov	r6, r1
 800beda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bede:	f000 f959 	bl	800c194 <_malloc_r>
 800bee2:	4604      	mov	r4, r0
 800bee4:	b140      	cbz	r0, 800bef8 <__sfmoreglue+0x28>
 800bee6:	2100      	movs	r1, #0
 800bee8:	e9c0 1600 	strd	r1, r6, [r0]
 800beec:	300c      	adds	r0, #12
 800beee:	60a0      	str	r0, [r4, #8]
 800bef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bef4:	f000 f8f6 	bl	800c0e4 <memset>
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <__sfp_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sfp_lock_acquire+0x8>)
 800befe:	f000 b8d8 	b.w	800c0b2 <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	24004f68 	.word	0x24004f68

0800bf08 <__sfp_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_release+0x8>)
 800bf0a:	f000 b8d3 	b.w	800c0b4 <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	24004f68 	.word	0x24004f68

0800bf14 <__sinit_lock_acquire>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sinit_lock_acquire+0x8>)
 800bf16:	f000 b8cc 	b.w	800c0b2 <__retarget_lock_acquire_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	24004f63 	.word	0x24004f63

0800bf20 <__sinit_lock_release>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_release+0x8>)
 800bf22:	f000 b8c7 	b.w	800c0b4 <__retarget_lock_release_recursive>
 800bf26:	bf00      	nop
 800bf28:	24004f63 	.word	0x24004f63

0800bf2c <__sinit>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	f7ff fff0 	bl	800bf14 <__sinit_lock_acquire>
 800bf34:	69a3      	ldr	r3, [r4, #24]
 800bf36:	b11b      	cbz	r3, 800bf40 <__sinit+0x14>
 800bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3c:	f7ff bff0 	b.w	800bf20 <__sinit_lock_release>
 800bf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf44:	6523      	str	r3, [r4, #80]	; 0x50
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <__sinit+0x68>)
 800bf48:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <__sinit+0x6c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	bf04      	itt	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	61a3      	streq	r3, [r4, #24]
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 f820 	bl	800bf9c <__sfp>
 800bf5c:	6060      	str	r0, [r4, #4]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f81c 	bl	800bf9c <__sfp>
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f818 	bl	800bf9c <__sfp>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	60e0      	str	r0, [r4, #12]
 800bf70:	2104      	movs	r1, #4
 800bf72:	6860      	ldr	r0, [r4, #4]
 800bf74:	f7ff ff82 	bl	800be7c <std>
 800bf78:	68a0      	ldr	r0, [r4, #8]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2109      	movs	r1, #9
 800bf7e:	f7ff ff7d 	bl	800be7c <std>
 800bf82:	68e0      	ldr	r0, [r4, #12]
 800bf84:	2202      	movs	r2, #2
 800bf86:	2112      	movs	r1, #18
 800bf88:	f7ff ff78 	bl	800be7c <std>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	61a3      	str	r3, [r4, #24]
 800bf90:	e7d2      	b.n	800bf38 <__sinit+0xc>
 800bf92:	bf00      	nop
 800bf94:	0800ea10 	.word	0x0800ea10
 800bf98:	0800bec5 	.word	0x0800bec5

0800bf9c <__sfp>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	f7ff ffac 	bl	800befc <__sfp_lock_acquire>
 800bfa4:	4b1e      	ldr	r3, [pc, #120]	; (800c020 <__sfp+0x84>)
 800bfa6:	681e      	ldr	r6, [r3, #0]
 800bfa8:	69b3      	ldr	r3, [r6, #24]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <__sfp+0x16>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffbd 	bl	800bf2c <__sinit>
 800bfb2:	3648      	adds	r6, #72	; 0x48
 800bfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	d503      	bpl.n	800bfc4 <__sfp+0x28>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	b30b      	cbz	r3, 800c004 <__sfp+0x68>
 800bfc0:	6836      	ldr	r6, [r6, #0]
 800bfc2:	e7f7      	b.n	800bfb4 <__sfp+0x18>
 800bfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfc8:	b9d5      	cbnz	r5, 800c000 <__sfp+0x64>
 800bfca:	4b16      	ldr	r3, [pc, #88]	; (800c024 <__sfp+0x88>)
 800bfcc:	60e3      	str	r3, [r4, #12]
 800bfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bfd4:	f000 f86c 	bl	800c0b0 <__retarget_lock_init_recursive>
 800bfd8:	f7ff ff96 	bl	800bf08 <__sfp_lock_release>
 800bfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfe4:	6025      	str	r5, [r4, #0]
 800bfe6:	61a5      	str	r5, [r4, #24]
 800bfe8:	2208      	movs	r2, #8
 800bfea:	4629      	mov	r1, r5
 800bfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff0:	f000 f878 	bl	800c0e4 <memset>
 800bff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bffc:	4620      	mov	r0, r4
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	3468      	adds	r4, #104	; 0x68
 800c002:	e7d9      	b.n	800bfb8 <__sfp+0x1c>
 800c004:	2104      	movs	r1, #4
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff62 	bl	800bed0 <__sfmoreglue>
 800c00c:	4604      	mov	r4, r0
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	2800      	cmp	r0, #0
 800c012:	d1d5      	bne.n	800bfc0 <__sfp+0x24>
 800c014:	f7ff ff78 	bl	800bf08 <__sfp_lock_release>
 800c018:	230c      	movs	r3, #12
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	e7ee      	b.n	800bffc <__sfp+0x60>
 800c01e:	bf00      	nop
 800c020:	0800ea10 	.word	0x0800ea10
 800c024:	ffff0001 	.word	0xffff0001

0800c028 <_fwalk_reent>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4606      	mov	r6, r0
 800c02e:	4688      	mov	r8, r1
 800c030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c034:	2700      	movs	r7, #0
 800c036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c03a:	f1b9 0901 	subs.w	r9, r9, #1
 800c03e:	d505      	bpl.n	800c04c <_fwalk_reent+0x24>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	2c00      	cmp	r4, #0
 800c044:	d1f7      	bne.n	800c036 <_fwalk_reent+0xe>
 800c046:	4638      	mov	r0, r7
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	89ab      	ldrh	r3, [r5, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d907      	bls.n	800c062 <_fwalk_reent+0x3a>
 800c052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c056:	3301      	adds	r3, #1
 800c058:	d003      	beq.n	800c062 <_fwalk_reent+0x3a>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	47c0      	blx	r8
 800c060:	4307      	orrs	r7, r0
 800c062:	3568      	adds	r5, #104	; 0x68
 800c064:	e7e9      	b.n	800c03a <_fwalk_reent+0x12>
	...

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	4d0d      	ldr	r5, [pc, #52]	; (800c0a0 <__libc_init_array+0x38>)
 800c06c:	4c0d      	ldr	r4, [pc, #52]	; (800c0a4 <__libc_init_array+0x3c>)
 800c06e:	1b64      	subs	r4, r4, r5
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	2600      	movs	r6, #0
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	4d0b      	ldr	r5, [pc, #44]	; (800c0a8 <__libc_init_array+0x40>)
 800c07a:	4c0c      	ldr	r4, [pc, #48]	; (800c0ac <__libc_init_array+0x44>)
 800c07c:	f002 fbd2 	bl	800e824 <_init>
 800c080:	1b64      	subs	r4, r4, r5
 800c082:	10a4      	asrs	r4, r4, #2
 800c084:	2600      	movs	r6, #0
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800ed9c 	.word	0x0800ed9c
 800c0a4:	0800ed9c 	.word	0x0800ed9c
 800c0a8:	0800ed9c 	.word	0x0800ed9c
 800c0ac:	0800eda0 	.word	0x0800eda0

0800c0b0 <__retarget_lock_init_recursive>:
 800c0b0:	4770      	bx	lr

0800c0b2 <__retarget_lock_acquire_recursive>:
 800c0b2:	4770      	bx	lr

0800c0b4 <__retarget_lock_release_recursive>:
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <malloc>:
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <malloc+0xc>)
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	f000 b869 	b.w	800c194 <_malloc_r>
 800c0c2:	bf00      	nop
 800c0c4:	24000014 	.word	0x24000014

0800c0c8 <memcpy>:
 800c0c8:	440a      	add	r2, r1
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0d0:	d100      	bne.n	800c0d4 <memcpy+0xc>
 800c0d2:	4770      	bx	lr
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	d1f9      	bne.n	800c0d6 <memcpy+0xe>
 800c0e2:	bd10      	pop	{r4, pc}

0800c0e4 <memset>:
 800c0e4:	4402      	add	r2, r0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d100      	bne.n	800c0ee <memset+0xa>
 800c0ec:	4770      	bx	lr
 800c0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f2:	e7f9      	b.n	800c0e8 <memset+0x4>

0800c0f4 <_free_r>:
 800c0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0f6:	2900      	cmp	r1, #0
 800c0f8:	d048      	beq.n	800c18c <_free_r+0x98>
 800c0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0fe:	9001      	str	r0, [sp, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	f1a1 0404 	sub.w	r4, r1, #4
 800c106:	bfb8      	it	lt
 800c108:	18e4      	addlt	r4, r4, r3
 800c10a:	f001 fdcb 	bl	800dca4 <__malloc_lock>
 800c10e:	4a20      	ldr	r2, [pc, #128]	; (800c190 <_free_r+0x9c>)
 800c110:	9801      	ldr	r0, [sp, #4]
 800c112:	6813      	ldr	r3, [r2, #0]
 800c114:	4615      	mov	r5, r2
 800c116:	b933      	cbnz	r3, 800c126 <_free_r+0x32>
 800c118:	6063      	str	r3, [r4, #4]
 800c11a:	6014      	str	r4, [r2, #0]
 800c11c:	b003      	add	sp, #12
 800c11e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c122:	f001 bdc5 	b.w	800dcb0 <__malloc_unlock>
 800c126:	42a3      	cmp	r3, r4
 800c128:	d90b      	bls.n	800c142 <_free_r+0x4e>
 800c12a:	6821      	ldr	r1, [r4, #0]
 800c12c:	1862      	adds	r2, r4, r1
 800c12e:	4293      	cmp	r3, r2
 800c130:	bf04      	itt	eq
 800c132:	681a      	ldreq	r2, [r3, #0]
 800c134:	685b      	ldreq	r3, [r3, #4]
 800c136:	6063      	str	r3, [r4, #4]
 800c138:	bf04      	itt	eq
 800c13a:	1852      	addeq	r2, r2, r1
 800c13c:	6022      	streq	r2, [r4, #0]
 800c13e:	602c      	str	r4, [r5, #0]
 800c140:	e7ec      	b.n	800c11c <_free_r+0x28>
 800c142:	461a      	mov	r2, r3
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	b10b      	cbz	r3, 800c14c <_free_r+0x58>
 800c148:	42a3      	cmp	r3, r4
 800c14a:	d9fa      	bls.n	800c142 <_free_r+0x4e>
 800c14c:	6811      	ldr	r1, [r2, #0]
 800c14e:	1855      	adds	r5, r2, r1
 800c150:	42a5      	cmp	r5, r4
 800c152:	d10b      	bne.n	800c16c <_free_r+0x78>
 800c154:	6824      	ldr	r4, [r4, #0]
 800c156:	4421      	add	r1, r4
 800c158:	1854      	adds	r4, r2, r1
 800c15a:	42a3      	cmp	r3, r4
 800c15c:	6011      	str	r1, [r2, #0]
 800c15e:	d1dd      	bne.n	800c11c <_free_r+0x28>
 800c160:	681c      	ldr	r4, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	6053      	str	r3, [r2, #4]
 800c166:	4421      	add	r1, r4
 800c168:	6011      	str	r1, [r2, #0]
 800c16a:	e7d7      	b.n	800c11c <_free_r+0x28>
 800c16c:	d902      	bls.n	800c174 <_free_r+0x80>
 800c16e:	230c      	movs	r3, #12
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	e7d3      	b.n	800c11c <_free_r+0x28>
 800c174:	6825      	ldr	r5, [r4, #0]
 800c176:	1961      	adds	r1, r4, r5
 800c178:	428b      	cmp	r3, r1
 800c17a:	bf04      	itt	eq
 800c17c:	6819      	ldreq	r1, [r3, #0]
 800c17e:	685b      	ldreq	r3, [r3, #4]
 800c180:	6063      	str	r3, [r4, #4]
 800c182:	bf04      	itt	eq
 800c184:	1949      	addeq	r1, r1, r5
 800c186:	6021      	streq	r1, [r4, #0]
 800c188:	6054      	str	r4, [r2, #4]
 800c18a:	e7c7      	b.n	800c11c <_free_r+0x28>
 800c18c:	b003      	add	sp, #12
 800c18e:	bd30      	pop	{r4, r5, pc}
 800c190:	24004bd4 	.word	0x24004bd4

0800c194 <_malloc_r>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	1ccd      	adds	r5, r1, #3
 800c198:	f025 0503 	bic.w	r5, r5, #3
 800c19c:	3508      	adds	r5, #8
 800c19e:	2d0c      	cmp	r5, #12
 800c1a0:	bf38      	it	cc
 800c1a2:	250c      	movcc	r5, #12
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	db01      	blt.n	800c1ae <_malloc_r+0x1a>
 800c1aa:	42a9      	cmp	r1, r5
 800c1ac:	d903      	bls.n	800c1b6 <_malloc_r+0x22>
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	6033      	str	r3, [r6, #0]
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b6:	f001 fd75 	bl	800dca4 <__malloc_lock>
 800c1ba:	4921      	ldr	r1, [pc, #132]	; (800c240 <_malloc_r+0xac>)
 800c1bc:	680a      	ldr	r2, [r1, #0]
 800c1be:	4614      	mov	r4, r2
 800c1c0:	b99c      	cbnz	r4, 800c1ea <_malloc_r+0x56>
 800c1c2:	4f20      	ldr	r7, [pc, #128]	; (800c244 <_malloc_r+0xb0>)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	b923      	cbnz	r3, 800c1d2 <_malloc_r+0x3e>
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f000 fce8 	bl	800cba0 <_sbrk_r>
 800c1d0:	6038      	str	r0, [r7, #0]
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 fce3 	bl	800cba0 <_sbrk_r>
 800c1da:	1c43      	adds	r3, r0, #1
 800c1dc:	d123      	bne.n	800c226 <_malloc_r+0x92>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	6033      	str	r3, [r6, #0]
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f001 fd64 	bl	800dcb0 <__malloc_unlock>
 800c1e8:	e7e3      	b.n	800c1b2 <_malloc_r+0x1e>
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	1b5b      	subs	r3, r3, r5
 800c1ee:	d417      	bmi.n	800c220 <_malloc_r+0x8c>
 800c1f0:	2b0b      	cmp	r3, #11
 800c1f2:	d903      	bls.n	800c1fc <_malloc_r+0x68>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	441c      	add	r4, r3
 800c1f8:	6025      	str	r5, [r4, #0]
 800c1fa:	e004      	b.n	800c206 <_malloc_r+0x72>
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	42a2      	cmp	r2, r4
 800c200:	bf0c      	ite	eq
 800c202:	600b      	streq	r3, [r1, #0]
 800c204:	6053      	strne	r3, [r2, #4]
 800c206:	4630      	mov	r0, r6
 800c208:	f001 fd52 	bl	800dcb0 <__malloc_unlock>
 800c20c:	f104 000b 	add.w	r0, r4, #11
 800c210:	1d23      	adds	r3, r4, #4
 800c212:	f020 0007 	bic.w	r0, r0, #7
 800c216:	1ac2      	subs	r2, r0, r3
 800c218:	d0cc      	beq.n	800c1b4 <_malloc_r+0x20>
 800c21a:	1a1b      	subs	r3, r3, r0
 800c21c:	50a3      	str	r3, [r4, r2]
 800c21e:	e7c9      	b.n	800c1b4 <_malloc_r+0x20>
 800c220:	4622      	mov	r2, r4
 800c222:	6864      	ldr	r4, [r4, #4]
 800c224:	e7cc      	b.n	800c1c0 <_malloc_r+0x2c>
 800c226:	1cc4      	adds	r4, r0, #3
 800c228:	f024 0403 	bic.w	r4, r4, #3
 800c22c:	42a0      	cmp	r0, r4
 800c22e:	d0e3      	beq.n	800c1f8 <_malloc_r+0x64>
 800c230:	1a21      	subs	r1, r4, r0
 800c232:	4630      	mov	r0, r6
 800c234:	f000 fcb4 	bl	800cba0 <_sbrk_r>
 800c238:	3001      	adds	r0, #1
 800c23a:	d1dd      	bne.n	800c1f8 <_malloc_r+0x64>
 800c23c:	e7cf      	b.n	800c1de <_malloc_r+0x4a>
 800c23e:	bf00      	nop
 800c240:	24004bd4 	.word	0x24004bd4
 800c244:	24004bd8 	.word	0x24004bd8

0800c248 <__cvt>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	ed2d 8b02 	vpush	{d8}
 800c24e:	eeb0 8b40 	vmov.f64	d8, d0
 800c252:	b085      	sub	sp, #20
 800c254:	4617      	mov	r7, r2
 800c256:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c258:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c25a:	ee18 2a90 	vmov	r2, s17
 800c25e:	f025 0520 	bic.w	r5, r5, #32
 800c262:	2a00      	cmp	r2, #0
 800c264:	bfb6      	itet	lt
 800c266:	222d      	movlt	r2, #45	; 0x2d
 800c268:	2200      	movge	r2, #0
 800c26a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c26e:	2d46      	cmp	r5, #70	; 0x46
 800c270:	460c      	mov	r4, r1
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	d004      	beq.n	800c280 <__cvt+0x38>
 800c276:	2d45      	cmp	r5, #69	; 0x45
 800c278:	d100      	bne.n	800c27c <__cvt+0x34>
 800c27a:	3401      	adds	r4, #1
 800c27c:	2102      	movs	r1, #2
 800c27e:	e000      	b.n	800c282 <__cvt+0x3a>
 800c280:	2103      	movs	r1, #3
 800c282:	ab03      	add	r3, sp, #12
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	ab02      	add	r3, sp, #8
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	4622      	mov	r2, r4
 800c28c:	4633      	mov	r3, r6
 800c28e:	eeb0 0b48 	vmov.f64	d0, d8
 800c292:	f000 fe49 	bl	800cf28 <_dtoa_r>
 800c296:	2d47      	cmp	r5, #71	; 0x47
 800c298:	d109      	bne.n	800c2ae <__cvt+0x66>
 800c29a:	07fb      	lsls	r3, r7, #31
 800c29c:	d407      	bmi.n	800c2ae <__cvt+0x66>
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2a2:	1a1b      	subs	r3, r3, r0
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	b005      	add	sp, #20
 800c2a8:	ecbd 8b02 	vpop	{d8}
 800c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ae:	2d46      	cmp	r5, #70	; 0x46
 800c2b0:	eb00 0204 	add.w	r2, r0, r4
 800c2b4:	d10c      	bne.n	800c2d0 <__cvt+0x88>
 800c2b6:	7803      	ldrb	r3, [r0, #0]
 800c2b8:	2b30      	cmp	r3, #48	; 0x30
 800c2ba:	d107      	bne.n	800c2cc <__cvt+0x84>
 800c2bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	bf1c      	itt	ne
 800c2c6:	f1c4 0401 	rsbne	r4, r4, #1
 800c2ca:	6034      	strne	r4, [r6, #0]
 800c2cc:	6833      	ldr	r3, [r6, #0]
 800c2ce:	441a      	add	r2, r3
 800c2d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d8:	bf08      	it	eq
 800c2da:	9203      	streq	r2, [sp, #12]
 800c2dc:	2130      	movs	r1, #48	; 0x30
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d2dc      	bcs.n	800c29e <__cvt+0x56>
 800c2e4:	1c5c      	adds	r4, r3, #1
 800c2e6:	9403      	str	r4, [sp, #12]
 800c2e8:	7019      	strb	r1, [r3, #0]
 800c2ea:	e7f8      	b.n	800c2de <__cvt+0x96>

0800c2ec <__exponent>:
 800c2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	bfb8      	it	lt
 800c2f4:	4249      	neglt	r1, r1
 800c2f6:	f803 2b02 	strb.w	r2, [r3], #2
 800c2fa:	bfb4      	ite	lt
 800c2fc:	222d      	movlt	r2, #45	; 0x2d
 800c2fe:	222b      	movge	r2, #43	; 0x2b
 800c300:	2909      	cmp	r1, #9
 800c302:	7042      	strb	r2, [r0, #1]
 800c304:	dd2a      	ble.n	800c35c <__exponent+0x70>
 800c306:	f10d 0407 	add.w	r4, sp, #7
 800c30a:	46a4      	mov	ip, r4
 800c30c:	270a      	movs	r7, #10
 800c30e:	46a6      	mov	lr, r4
 800c310:	460a      	mov	r2, r1
 800c312:	fb91 f6f7 	sdiv	r6, r1, r7
 800c316:	fb07 1516 	mls	r5, r7, r6, r1
 800c31a:	3530      	adds	r5, #48	; 0x30
 800c31c:	2a63      	cmp	r2, #99	; 0x63
 800c31e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c326:	4631      	mov	r1, r6
 800c328:	dcf1      	bgt.n	800c30e <__exponent+0x22>
 800c32a:	3130      	adds	r1, #48	; 0x30
 800c32c:	f1ae 0502 	sub.w	r5, lr, #2
 800c330:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c334:	1c44      	adds	r4, r0, #1
 800c336:	4629      	mov	r1, r5
 800c338:	4561      	cmp	r1, ip
 800c33a:	d30a      	bcc.n	800c352 <__exponent+0x66>
 800c33c:	f10d 0209 	add.w	r2, sp, #9
 800c340:	eba2 020e 	sub.w	r2, r2, lr
 800c344:	4565      	cmp	r5, ip
 800c346:	bf88      	it	hi
 800c348:	2200      	movhi	r2, #0
 800c34a:	4413      	add	r3, r2
 800c34c:	1a18      	subs	r0, r3, r0
 800c34e:	b003      	add	sp, #12
 800c350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c356:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c35a:	e7ed      	b.n	800c338 <__exponent+0x4c>
 800c35c:	2330      	movs	r3, #48	; 0x30
 800c35e:	3130      	adds	r1, #48	; 0x30
 800c360:	7083      	strb	r3, [r0, #2]
 800c362:	70c1      	strb	r1, [r0, #3]
 800c364:	1d03      	adds	r3, r0, #4
 800c366:	e7f1      	b.n	800c34c <__exponent+0x60>

0800c368 <_printf_float>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	b08b      	sub	sp, #44	; 0x2c
 800c36e:	460c      	mov	r4, r1
 800c370:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c374:	4616      	mov	r6, r2
 800c376:	461f      	mov	r7, r3
 800c378:	4605      	mov	r5, r0
 800c37a:	f001 fc19 	bl	800dbb0 <_localeconv_r>
 800c37e:	f8d0 b000 	ldr.w	fp, [r0]
 800c382:	4658      	mov	r0, fp
 800c384:	f7f3 ffac 	bl	80002e0 <strlen>
 800c388:	2300      	movs	r3, #0
 800c38a:	9308      	str	r3, [sp, #32]
 800c38c:	f8d8 3000 	ldr.w	r3, [r8]
 800c390:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c394:	6822      	ldr	r2, [r4, #0]
 800c396:	3307      	adds	r3, #7
 800c398:	f023 0307 	bic.w	r3, r3, #7
 800c39c:	f103 0108 	add.w	r1, r3, #8
 800c3a0:	f8c8 1000 	str.w	r1, [r8]
 800c3a4:	4682      	mov	sl, r0
 800c3a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c3ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c610 <_printf_float+0x2a8>
 800c3b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c3b6:	eeb0 6bc0 	vabs.f64	d6, d0
 800c3ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800c3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c2:	dd24      	ble.n	800c40e <_printf_float+0xa6>
 800c3c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3cc:	d502      	bpl.n	800c3d4 <_printf_float+0x6c>
 800c3ce:	232d      	movs	r3, #45	; 0x2d
 800c3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3d4:	4b90      	ldr	r3, [pc, #576]	; (800c618 <_printf_float+0x2b0>)
 800c3d6:	4891      	ldr	r0, [pc, #580]	; (800c61c <_printf_float+0x2b4>)
 800c3d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c3dc:	bf94      	ite	ls
 800c3de:	4698      	movls	r8, r3
 800c3e0:	4680      	movhi	r8, r0
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	6123      	str	r3, [r4, #16]
 800c3e6:	f022 0204 	bic.w	r2, r2, #4
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	9304      	str	r3, [sp, #16]
 800c3f0:	9700      	str	r7, [sp, #0]
 800c3f2:	4633      	mov	r3, r6
 800c3f4:	aa09      	add	r2, sp, #36	; 0x24
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 f9d3 	bl	800c7a4 <_printf_common>
 800c3fe:	3001      	adds	r0, #1
 800c400:	f040 808a 	bne.w	800c518 <_printf_float+0x1b0>
 800c404:	f04f 30ff 	mov.w	r0, #4294967295
 800c408:	b00b      	add	sp, #44	; 0x2c
 800c40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40e:	eeb4 0b40 	vcmp.f64	d0, d0
 800c412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c416:	d709      	bvc.n	800c42c <_printf_float+0xc4>
 800c418:	ee10 3a90 	vmov	r3, s1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	bfbc      	itt	lt
 800c420:	232d      	movlt	r3, #45	; 0x2d
 800c422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c426:	487e      	ldr	r0, [pc, #504]	; (800c620 <_printf_float+0x2b8>)
 800c428:	4b7e      	ldr	r3, [pc, #504]	; (800c624 <_printf_float+0x2bc>)
 800c42a:	e7d5      	b.n	800c3d8 <_printf_float+0x70>
 800c42c:	6863      	ldr	r3, [r4, #4]
 800c42e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c432:	9104      	str	r1, [sp, #16]
 800c434:	1c59      	adds	r1, r3, #1
 800c436:	d13c      	bne.n	800c4b2 <_printf_float+0x14a>
 800c438:	2306      	movs	r3, #6
 800c43a:	6063      	str	r3, [r4, #4]
 800c43c:	2300      	movs	r3, #0
 800c43e:	9303      	str	r3, [sp, #12]
 800c440:	ab08      	add	r3, sp, #32
 800c442:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c446:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c44a:	ab07      	add	r3, sp, #28
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	6022      	str	r2, [r4, #0]
 800c452:	f10d 031b 	add.w	r3, sp, #27
 800c456:	4628      	mov	r0, r5
 800c458:	f7ff fef6 	bl	800c248 <__cvt>
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	9907      	ldr	r1, [sp, #28]
 800c460:	2b47      	cmp	r3, #71	; 0x47
 800c462:	4680      	mov	r8, r0
 800c464:	d108      	bne.n	800c478 <_printf_float+0x110>
 800c466:	1cc8      	adds	r0, r1, #3
 800c468:	db02      	blt.n	800c470 <_printf_float+0x108>
 800c46a:	6863      	ldr	r3, [r4, #4]
 800c46c:	4299      	cmp	r1, r3
 800c46e:	dd41      	ble.n	800c4f4 <_printf_float+0x18c>
 800c470:	f1a9 0902 	sub.w	r9, r9, #2
 800c474:	fa5f f989 	uxtb.w	r9, r9
 800c478:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c47c:	d820      	bhi.n	800c4c0 <_printf_float+0x158>
 800c47e:	3901      	subs	r1, #1
 800c480:	464a      	mov	r2, r9
 800c482:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c486:	9107      	str	r1, [sp, #28]
 800c488:	f7ff ff30 	bl	800c2ec <__exponent>
 800c48c:	9a08      	ldr	r2, [sp, #32]
 800c48e:	9004      	str	r0, [sp, #16]
 800c490:	1813      	adds	r3, r2, r0
 800c492:	2a01      	cmp	r2, #1
 800c494:	6123      	str	r3, [r4, #16]
 800c496:	dc02      	bgt.n	800c49e <_printf_float+0x136>
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	07d2      	lsls	r2, r2, #31
 800c49c:	d501      	bpl.n	800c4a2 <_printf_float+0x13a>
 800c49e:	3301      	adds	r3, #1
 800c4a0:	6123      	str	r3, [r4, #16]
 800c4a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0a2      	beq.n	800c3f0 <_printf_float+0x88>
 800c4aa:	232d      	movs	r3, #45	; 0x2d
 800c4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b0:	e79e      	b.n	800c3f0 <_printf_float+0x88>
 800c4b2:	9904      	ldr	r1, [sp, #16]
 800c4b4:	2947      	cmp	r1, #71	; 0x47
 800c4b6:	d1c1      	bne.n	800c43c <_printf_float+0xd4>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1bf      	bne.n	800c43c <_printf_float+0xd4>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e7bc      	b.n	800c43a <_printf_float+0xd2>
 800c4c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c4c4:	d118      	bne.n	800c4f8 <_printf_float+0x190>
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	dd0b      	ble.n	800c4e4 <_printf_float+0x17c>
 800c4cc:	6121      	str	r1, [r4, #16]
 800c4ce:	b913      	cbnz	r3, 800c4d6 <_printf_float+0x16e>
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	07d0      	lsls	r0, r2, #31
 800c4d4:	d502      	bpl.n	800c4dc <_printf_float+0x174>
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	440b      	add	r3, r1
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4e0:	9304      	str	r3, [sp, #16]
 800c4e2:	e7de      	b.n	800c4a2 <_printf_float+0x13a>
 800c4e4:	b913      	cbnz	r3, 800c4ec <_printf_float+0x184>
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	07d2      	lsls	r2, r2, #31
 800c4ea:	d501      	bpl.n	800c4f0 <_printf_float+0x188>
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	e7f4      	b.n	800c4da <_printf_float+0x172>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e7f2      	b.n	800c4da <_printf_float+0x172>
 800c4f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c4f8:	9b08      	ldr	r3, [sp, #32]
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	db05      	blt.n	800c50a <_printf_float+0x1a2>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	6121      	str	r1, [r4, #16]
 800c502:	07d8      	lsls	r0, r3, #31
 800c504:	d5ea      	bpl.n	800c4dc <_printf_float+0x174>
 800c506:	1c4b      	adds	r3, r1, #1
 800c508:	e7e7      	b.n	800c4da <_printf_float+0x172>
 800c50a:	2900      	cmp	r1, #0
 800c50c:	bfd4      	ite	le
 800c50e:	f1c1 0202 	rsble	r2, r1, #2
 800c512:	2201      	movgt	r2, #1
 800c514:	4413      	add	r3, r2
 800c516:	e7e0      	b.n	800c4da <_printf_float+0x172>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	055a      	lsls	r2, r3, #21
 800c51c:	d407      	bmi.n	800c52e <_printf_float+0x1c6>
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	4642      	mov	r2, r8
 800c522:	4631      	mov	r1, r6
 800c524:	4628      	mov	r0, r5
 800c526:	47b8      	blx	r7
 800c528:	3001      	adds	r0, #1
 800c52a:	d12a      	bne.n	800c582 <_printf_float+0x21a>
 800c52c:	e76a      	b.n	800c404 <_printf_float+0x9c>
 800c52e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c532:	f240 80e2 	bls.w	800c6fa <_printf_float+0x392>
 800c536:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c53a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c542:	d133      	bne.n	800c5ac <_printf_float+0x244>
 800c544:	4a38      	ldr	r2, [pc, #224]	; (800c628 <_printf_float+0x2c0>)
 800c546:	2301      	movs	r3, #1
 800c548:	4631      	mov	r1, r6
 800c54a:	4628      	mov	r0, r5
 800c54c:	47b8      	blx	r7
 800c54e:	3001      	adds	r0, #1
 800c550:	f43f af58 	beq.w	800c404 <_printf_float+0x9c>
 800c554:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c558:	429a      	cmp	r2, r3
 800c55a:	db02      	blt.n	800c562 <_printf_float+0x1fa>
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	07d8      	lsls	r0, r3, #31
 800c560:	d50f      	bpl.n	800c582 <_printf_float+0x21a>
 800c562:	4653      	mov	r3, sl
 800c564:	465a      	mov	r2, fp
 800c566:	4631      	mov	r1, r6
 800c568:	4628      	mov	r0, r5
 800c56a:	47b8      	blx	r7
 800c56c:	3001      	adds	r0, #1
 800c56e:	f43f af49 	beq.w	800c404 <_printf_float+0x9c>
 800c572:	f04f 0800 	mov.w	r8, #0
 800c576:	f104 091a 	add.w	r9, r4, #26
 800c57a:	9b08      	ldr	r3, [sp, #32]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	4543      	cmp	r3, r8
 800c580:	dc09      	bgt.n	800c596 <_printf_float+0x22e>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	079b      	lsls	r3, r3, #30
 800c586:	f100 8108 	bmi.w	800c79a <_printf_float+0x432>
 800c58a:	68e0      	ldr	r0, [r4, #12]
 800c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58e:	4298      	cmp	r0, r3
 800c590:	bfb8      	it	lt
 800c592:	4618      	movlt	r0, r3
 800c594:	e738      	b.n	800c408 <_printf_float+0xa0>
 800c596:	2301      	movs	r3, #1
 800c598:	464a      	mov	r2, r9
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f43f af2f 	beq.w	800c404 <_printf_float+0x9c>
 800c5a6:	f108 0801 	add.w	r8, r8, #1
 800c5aa:	e7e6      	b.n	800c57a <_printf_float+0x212>
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	dc3c      	bgt.n	800c62c <_printf_float+0x2c4>
 800c5b2:	4a1d      	ldr	r2, [pc, #116]	; (800c628 <_printf_float+0x2c0>)
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	f43f af21 	beq.w	800c404 <_printf_float+0x9c>
 800c5c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	d102      	bne.n	800c5d0 <_printf_float+0x268>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	07d9      	lsls	r1, r3, #31
 800c5ce:	d5d8      	bpl.n	800c582 <_printf_float+0x21a>
 800c5d0:	4653      	mov	r3, sl
 800c5d2:	465a      	mov	r2, fp
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af12 	beq.w	800c404 <_printf_float+0x9c>
 800c5e0:	f04f 0900 	mov.w	r9, #0
 800c5e4:	f104 0a1a 	add.w	sl, r4, #26
 800c5e8:	9b07      	ldr	r3, [sp, #28]
 800c5ea:	425b      	negs	r3, r3
 800c5ec:	454b      	cmp	r3, r9
 800c5ee:	dc01      	bgt.n	800c5f4 <_printf_float+0x28c>
 800c5f0:	9b08      	ldr	r3, [sp, #32]
 800c5f2:	e795      	b.n	800c520 <_printf_float+0x1b8>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af00 	beq.w	800c404 <_printf_float+0x9c>
 800c604:	f109 0901 	add.w	r9, r9, #1
 800c608:	e7ee      	b.n	800c5e8 <_printf_float+0x280>
 800c60a:	bf00      	nop
 800c60c:	f3af 8000 	nop.w
 800c610:	ffffffff 	.word	0xffffffff
 800c614:	7fefffff 	.word	0x7fefffff
 800c618:	0800ea14 	.word	0x0800ea14
 800c61c:	0800ea18 	.word	0x0800ea18
 800c620:	0800ea20 	.word	0x0800ea20
 800c624:	0800ea1c 	.word	0x0800ea1c
 800c628:	0800ea24 	.word	0x0800ea24
 800c62c:	9a08      	ldr	r2, [sp, #32]
 800c62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c630:	429a      	cmp	r2, r3
 800c632:	bfa8      	it	ge
 800c634:	461a      	movge	r2, r3
 800c636:	2a00      	cmp	r2, #0
 800c638:	4691      	mov	r9, r2
 800c63a:	dc38      	bgt.n	800c6ae <_printf_float+0x346>
 800c63c:	2300      	movs	r3, #0
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c644:	f104 021a 	add.w	r2, r4, #26
 800c648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c64a:	9905      	ldr	r1, [sp, #20]
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	eba3 0309 	sub.w	r3, r3, r9
 800c652:	428b      	cmp	r3, r1
 800c654:	dc33      	bgt.n	800c6be <_printf_float+0x356>
 800c656:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	db3c      	blt.n	800c6d8 <_printf_float+0x370>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	07da      	lsls	r2, r3, #31
 800c662:	d439      	bmi.n	800c6d8 <_printf_float+0x370>
 800c664:	9a08      	ldr	r2, [sp, #32]
 800c666:	9b04      	ldr	r3, [sp, #16]
 800c668:	9907      	ldr	r1, [sp, #28]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	eba2 0901 	sub.w	r9, r2, r1
 800c670:	4599      	cmp	r9, r3
 800c672:	bfa8      	it	ge
 800c674:	4699      	movge	r9, r3
 800c676:	f1b9 0f00 	cmp.w	r9, #0
 800c67a:	dc35      	bgt.n	800c6e8 <_printf_float+0x380>
 800c67c:	f04f 0800 	mov.w	r8, #0
 800c680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c684:	f104 0a1a 	add.w	sl, r4, #26
 800c688:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	eba3 0309 	sub.w	r3, r3, r9
 800c692:	4543      	cmp	r3, r8
 800c694:	f77f af75 	ble.w	800c582 <_printf_float+0x21a>
 800c698:	2301      	movs	r3, #1
 800c69a:	4652      	mov	r2, sl
 800c69c:	4631      	mov	r1, r6
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f43f aeae 	beq.w	800c404 <_printf_float+0x9c>
 800c6a8:	f108 0801 	add.w	r8, r8, #1
 800c6ac:	e7ec      	b.n	800c688 <_printf_float+0x320>
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4642      	mov	r2, r8
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b8      	blx	r7
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d1bf      	bne.n	800c63c <_printf_float+0x2d4>
 800c6bc:	e6a2      	b.n	800c404 <_printf_float+0x9c>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	9204      	str	r2, [sp, #16]
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	f43f ae9b 	beq.w	800c404 <_printf_float+0x9c>
 800c6ce:	9b05      	ldr	r3, [sp, #20]
 800c6d0:	9a04      	ldr	r2, [sp, #16]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	9305      	str	r3, [sp, #20]
 800c6d6:	e7b7      	b.n	800c648 <_printf_float+0x2e0>
 800c6d8:	4653      	mov	r3, sl
 800c6da:	465a      	mov	r2, fp
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	d1be      	bne.n	800c664 <_printf_float+0x2fc>
 800c6e6:	e68d      	b.n	800c404 <_printf_float+0x9c>
 800c6e8:	9a04      	ldr	r2, [sp, #16]
 800c6ea:	464b      	mov	r3, r9
 800c6ec:	4442      	add	r2, r8
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b8      	blx	r7
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d1c1      	bne.n	800c67c <_printf_float+0x314>
 800c6f8:	e684      	b.n	800c404 <_printf_float+0x9c>
 800c6fa:	9a08      	ldr	r2, [sp, #32]
 800c6fc:	2a01      	cmp	r2, #1
 800c6fe:	dc01      	bgt.n	800c704 <_printf_float+0x39c>
 800c700:	07db      	lsls	r3, r3, #31
 800c702:	d537      	bpl.n	800c774 <_printf_float+0x40c>
 800c704:	2301      	movs	r3, #1
 800c706:	4642      	mov	r2, r8
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	f43f ae78 	beq.w	800c404 <_printf_float+0x9c>
 800c714:	4653      	mov	r3, sl
 800c716:	465a      	mov	r2, fp
 800c718:	4631      	mov	r1, r6
 800c71a:	4628      	mov	r0, r5
 800c71c:	47b8      	blx	r7
 800c71e:	3001      	adds	r0, #1
 800c720:	f43f ae70 	beq.w	800c404 <_printf_float+0x9c>
 800c724:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c728:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c730:	d01b      	beq.n	800c76a <_printf_float+0x402>
 800c732:	9b08      	ldr	r3, [sp, #32]
 800c734:	f108 0201 	add.w	r2, r8, #1
 800c738:	3b01      	subs	r3, #1
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	d10e      	bne.n	800c762 <_printf_float+0x3fa>
 800c744:	e65e      	b.n	800c404 <_printf_float+0x9c>
 800c746:	2301      	movs	r3, #1
 800c748:	464a      	mov	r2, r9
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b8      	blx	r7
 800c750:	3001      	adds	r0, #1
 800c752:	f43f ae57 	beq.w	800c404 <_printf_float+0x9c>
 800c756:	f108 0801 	add.w	r8, r8, #1
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	4543      	cmp	r3, r8
 800c760:	dcf1      	bgt.n	800c746 <_printf_float+0x3de>
 800c762:	9b04      	ldr	r3, [sp, #16]
 800c764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c768:	e6db      	b.n	800c522 <_printf_float+0x1ba>
 800c76a:	f04f 0800 	mov.w	r8, #0
 800c76e:	f104 091a 	add.w	r9, r4, #26
 800c772:	e7f2      	b.n	800c75a <_printf_float+0x3f2>
 800c774:	2301      	movs	r3, #1
 800c776:	4642      	mov	r2, r8
 800c778:	e7df      	b.n	800c73a <_printf_float+0x3d2>
 800c77a:	2301      	movs	r3, #1
 800c77c:	464a      	mov	r2, r9
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	47b8      	blx	r7
 800c784:	3001      	adds	r0, #1
 800c786:	f43f ae3d 	beq.w	800c404 <_printf_float+0x9c>
 800c78a:	f108 0801 	add.w	r8, r8, #1
 800c78e:	68e3      	ldr	r3, [r4, #12]
 800c790:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c792:	1a5b      	subs	r3, r3, r1
 800c794:	4543      	cmp	r3, r8
 800c796:	dcf0      	bgt.n	800c77a <_printf_float+0x412>
 800c798:	e6f7      	b.n	800c58a <_printf_float+0x222>
 800c79a:	f04f 0800 	mov.w	r8, #0
 800c79e:	f104 0919 	add.w	r9, r4, #25
 800c7a2:	e7f4      	b.n	800c78e <_printf_float+0x426>

0800c7a4 <_printf_common>:
 800c7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a8:	4616      	mov	r6, r2
 800c7aa:	4699      	mov	r9, r3
 800c7ac:	688a      	ldr	r2, [r1, #8]
 800c7ae:	690b      	ldr	r3, [r1, #16]
 800c7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	bfb8      	it	lt
 800c7b8:	4613      	movlt	r3, r2
 800c7ba:	6033      	str	r3, [r6, #0]
 800c7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	b10a      	cbz	r2, 800c7ca <_printf_common+0x26>
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	6033      	str	r3, [r6, #0]
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	0699      	lsls	r1, r3, #26
 800c7ce:	bf42      	ittt	mi
 800c7d0:	6833      	ldrmi	r3, [r6, #0]
 800c7d2:	3302      	addmi	r3, #2
 800c7d4:	6033      	strmi	r3, [r6, #0]
 800c7d6:	6825      	ldr	r5, [r4, #0]
 800c7d8:	f015 0506 	ands.w	r5, r5, #6
 800c7dc:	d106      	bne.n	800c7ec <_printf_common+0x48>
 800c7de:	f104 0a19 	add.w	sl, r4, #25
 800c7e2:	68e3      	ldr	r3, [r4, #12]
 800c7e4:	6832      	ldr	r2, [r6, #0]
 800c7e6:	1a9b      	subs	r3, r3, r2
 800c7e8:	42ab      	cmp	r3, r5
 800c7ea:	dc26      	bgt.n	800c83a <_printf_common+0x96>
 800c7ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7f0:	1e13      	subs	r3, r2, #0
 800c7f2:	6822      	ldr	r2, [r4, #0]
 800c7f4:	bf18      	it	ne
 800c7f6:	2301      	movne	r3, #1
 800c7f8:	0692      	lsls	r2, r2, #26
 800c7fa:	d42b      	bmi.n	800c854 <_printf_common+0xb0>
 800c7fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c800:	4649      	mov	r1, r9
 800c802:	4638      	mov	r0, r7
 800c804:	47c0      	blx	r8
 800c806:	3001      	adds	r0, #1
 800c808:	d01e      	beq.n	800c848 <_printf_common+0xa4>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	68e5      	ldr	r5, [r4, #12]
 800c80e:	6832      	ldr	r2, [r6, #0]
 800c810:	f003 0306 	and.w	r3, r3, #6
 800c814:	2b04      	cmp	r3, #4
 800c816:	bf08      	it	eq
 800c818:	1aad      	subeq	r5, r5, r2
 800c81a:	68a3      	ldr	r3, [r4, #8]
 800c81c:	6922      	ldr	r2, [r4, #16]
 800c81e:	bf0c      	ite	eq
 800c820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c824:	2500      	movne	r5, #0
 800c826:	4293      	cmp	r3, r2
 800c828:	bfc4      	itt	gt
 800c82a:	1a9b      	subgt	r3, r3, r2
 800c82c:	18ed      	addgt	r5, r5, r3
 800c82e:	2600      	movs	r6, #0
 800c830:	341a      	adds	r4, #26
 800c832:	42b5      	cmp	r5, r6
 800c834:	d11a      	bne.n	800c86c <_printf_common+0xc8>
 800c836:	2000      	movs	r0, #0
 800c838:	e008      	b.n	800c84c <_printf_common+0xa8>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4652      	mov	r2, sl
 800c83e:	4649      	mov	r1, r9
 800c840:	4638      	mov	r0, r7
 800c842:	47c0      	blx	r8
 800c844:	3001      	adds	r0, #1
 800c846:	d103      	bne.n	800c850 <_printf_common+0xac>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	3501      	adds	r5, #1
 800c852:	e7c6      	b.n	800c7e2 <_printf_common+0x3e>
 800c854:	18e1      	adds	r1, r4, r3
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	2030      	movs	r0, #48	; 0x30
 800c85a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c85e:	4422      	add	r2, r4
 800c860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c868:	3302      	adds	r3, #2
 800c86a:	e7c7      	b.n	800c7fc <_printf_common+0x58>
 800c86c:	2301      	movs	r3, #1
 800c86e:	4622      	mov	r2, r4
 800c870:	4649      	mov	r1, r9
 800c872:	4638      	mov	r0, r7
 800c874:	47c0      	blx	r8
 800c876:	3001      	adds	r0, #1
 800c878:	d0e6      	beq.n	800c848 <_printf_common+0xa4>
 800c87a:	3601      	adds	r6, #1
 800c87c:	e7d9      	b.n	800c832 <_printf_common+0x8e>
	...

0800c880 <_printf_i>:
 800c880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c884:	460c      	mov	r4, r1
 800c886:	4691      	mov	r9, r2
 800c888:	7e27      	ldrb	r7, [r4, #24]
 800c88a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c88c:	2f78      	cmp	r7, #120	; 0x78
 800c88e:	4680      	mov	r8, r0
 800c890:	469a      	mov	sl, r3
 800c892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c896:	d807      	bhi.n	800c8a8 <_printf_i+0x28>
 800c898:	2f62      	cmp	r7, #98	; 0x62
 800c89a:	d80a      	bhi.n	800c8b2 <_printf_i+0x32>
 800c89c:	2f00      	cmp	r7, #0
 800c89e:	f000 80d8 	beq.w	800ca52 <_printf_i+0x1d2>
 800c8a2:	2f58      	cmp	r7, #88	; 0x58
 800c8a4:	f000 80a3 	beq.w	800c9ee <_printf_i+0x16e>
 800c8a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8b0:	e03a      	b.n	800c928 <_printf_i+0xa8>
 800c8b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8b6:	2b15      	cmp	r3, #21
 800c8b8:	d8f6      	bhi.n	800c8a8 <_printf_i+0x28>
 800c8ba:	a001      	add	r0, pc, #4	; (adr r0, 800c8c0 <_printf_i+0x40>)
 800c8bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c8c0:	0800c919 	.word	0x0800c919
 800c8c4:	0800c92d 	.word	0x0800c92d
 800c8c8:	0800c8a9 	.word	0x0800c8a9
 800c8cc:	0800c8a9 	.word	0x0800c8a9
 800c8d0:	0800c8a9 	.word	0x0800c8a9
 800c8d4:	0800c8a9 	.word	0x0800c8a9
 800c8d8:	0800c92d 	.word	0x0800c92d
 800c8dc:	0800c8a9 	.word	0x0800c8a9
 800c8e0:	0800c8a9 	.word	0x0800c8a9
 800c8e4:	0800c8a9 	.word	0x0800c8a9
 800c8e8:	0800c8a9 	.word	0x0800c8a9
 800c8ec:	0800ca39 	.word	0x0800ca39
 800c8f0:	0800c95d 	.word	0x0800c95d
 800c8f4:	0800ca1b 	.word	0x0800ca1b
 800c8f8:	0800c8a9 	.word	0x0800c8a9
 800c8fc:	0800c8a9 	.word	0x0800c8a9
 800c900:	0800ca5b 	.word	0x0800ca5b
 800c904:	0800c8a9 	.word	0x0800c8a9
 800c908:	0800c95d 	.word	0x0800c95d
 800c90c:	0800c8a9 	.word	0x0800c8a9
 800c910:	0800c8a9 	.word	0x0800c8a9
 800c914:	0800ca23 	.word	0x0800ca23
 800c918:	680b      	ldr	r3, [r1, #0]
 800c91a:	1d1a      	adds	r2, r3, #4
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	600a      	str	r2, [r1, #0]
 800c920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c928:	2301      	movs	r3, #1
 800c92a:	e0a3      	b.n	800ca74 <_printf_i+0x1f4>
 800c92c:	6825      	ldr	r5, [r4, #0]
 800c92e:	6808      	ldr	r0, [r1, #0]
 800c930:	062e      	lsls	r6, r5, #24
 800c932:	f100 0304 	add.w	r3, r0, #4
 800c936:	d50a      	bpl.n	800c94e <_printf_i+0xce>
 800c938:	6805      	ldr	r5, [r0, #0]
 800c93a:	600b      	str	r3, [r1, #0]
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	da03      	bge.n	800c948 <_printf_i+0xc8>
 800c940:	232d      	movs	r3, #45	; 0x2d
 800c942:	426d      	negs	r5, r5
 800c944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c948:	485e      	ldr	r0, [pc, #376]	; (800cac4 <_printf_i+0x244>)
 800c94a:	230a      	movs	r3, #10
 800c94c:	e019      	b.n	800c982 <_printf_i+0x102>
 800c94e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c952:	6805      	ldr	r5, [r0, #0]
 800c954:	600b      	str	r3, [r1, #0]
 800c956:	bf18      	it	ne
 800c958:	b22d      	sxthne	r5, r5
 800c95a:	e7ef      	b.n	800c93c <_printf_i+0xbc>
 800c95c:	680b      	ldr	r3, [r1, #0]
 800c95e:	6825      	ldr	r5, [r4, #0]
 800c960:	1d18      	adds	r0, r3, #4
 800c962:	6008      	str	r0, [r1, #0]
 800c964:	0628      	lsls	r0, r5, #24
 800c966:	d501      	bpl.n	800c96c <_printf_i+0xec>
 800c968:	681d      	ldr	r5, [r3, #0]
 800c96a:	e002      	b.n	800c972 <_printf_i+0xf2>
 800c96c:	0669      	lsls	r1, r5, #25
 800c96e:	d5fb      	bpl.n	800c968 <_printf_i+0xe8>
 800c970:	881d      	ldrh	r5, [r3, #0]
 800c972:	4854      	ldr	r0, [pc, #336]	; (800cac4 <_printf_i+0x244>)
 800c974:	2f6f      	cmp	r7, #111	; 0x6f
 800c976:	bf0c      	ite	eq
 800c978:	2308      	moveq	r3, #8
 800c97a:	230a      	movne	r3, #10
 800c97c:	2100      	movs	r1, #0
 800c97e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c982:	6866      	ldr	r6, [r4, #4]
 800c984:	60a6      	str	r6, [r4, #8]
 800c986:	2e00      	cmp	r6, #0
 800c988:	bfa2      	ittt	ge
 800c98a:	6821      	ldrge	r1, [r4, #0]
 800c98c:	f021 0104 	bicge.w	r1, r1, #4
 800c990:	6021      	strge	r1, [r4, #0]
 800c992:	b90d      	cbnz	r5, 800c998 <_printf_i+0x118>
 800c994:	2e00      	cmp	r6, #0
 800c996:	d04d      	beq.n	800ca34 <_printf_i+0x1b4>
 800c998:	4616      	mov	r6, r2
 800c99a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c99e:	fb03 5711 	mls	r7, r3, r1, r5
 800c9a2:	5dc7      	ldrb	r7, [r0, r7]
 800c9a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9a8:	462f      	mov	r7, r5
 800c9aa:	42bb      	cmp	r3, r7
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	d9f4      	bls.n	800c99a <_printf_i+0x11a>
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d10b      	bne.n	800c9cc <_printf_i+0x14c>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	07df      	lsls	r7, r3, #31
 800c9b8:	d508      	bpl.n	800c9cc <_printf_i+0x14c>
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	6861      	ldr	r1, [r4, #4]
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	bfde      	ittt	le
 800c9c2:	2330      	movle	r3, #48	; 0x30
 800c9c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9cc:	1b92      	subs	r2, r2, r6
 800c9ce:	6122      	str	r2, [r4, #16]
 800c9d0:	f8cd a000 	str.w	sl, [sp]
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	aa03      	add	r2, sp, #12
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4640      	mov	r0, r8
 800c9dc:	f7ff fee2 	bl	800c7a4 <_printf_common>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d14c      	bne.n	800ca7e <_printf_i+0x1fe>
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e8:	b004      	add	sp, #16
 800c9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ee:	4835      	ldr	r0, [pc, #212]	; (800cac4 <_printf_i+0x244>)
 800c9f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	680e      	ldr	r6, [r1, #0]
 800c9f8:	061f      	lsls	r7, r3, #24
 800c9fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9fe:	600e      	str	r6, [r1, #0]
 800ca00:	d514      	bpl.n	800ca2c <_printf_i+0x1ac>
 800ca02:	07d9      	lsls	r1, r3, #31
 800ca04:	bf44      	itt	mi
 800ca06:	f043 0320 	orrmi.w	r3, r3, #32
 800ca0a:	6023      	strmi	r3, [r4, #0]
 800ca0c:	b91d      	cbnz	r5, 800ca16 <_printf_i+0x196>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	f023 0320 	bic.w	r3, r3, #32
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	2310      	movs	r3, #16
 800ca18:	e7b0      	b.n	800c97c <_printf_i+0xfc>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	f043 0320 	orr.w	r3, r3, #32
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	2378      	movs	r3, #120	; 0x78
 800ca24:	4828      	ldr	r0, [pc, #160]	; (800cac8 <_printf_i+0x248>)
 800ca26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca2a:	e7e3      	b.n	800c9f4 <_printf_i+0x174>
 800ca2c:	065e      	lsls	r6, r3, #25
 800ca2e:	bf48      	it	mi
 800ca30:	b2ad      	uxthmi	r5, r5
 800ca32:	e7e6      	b.n	800ca02 <_printf_i+0x182>
 800ca34:	4616      	mov	r6, r2
 800ca36:	e7bb      	b.n	800c9b0 <_printf_i+0x130>
 800ca38:	680b      	ldr	r3, [r1, #0]
 800ca3a:	6826      	ldr	r6, [r4, #0]
 800ca3c:	6960      	ldr	r0, [r4, #20]
 800ca3e:	1d1d      	adds	r5, r3, #4
 800ca40:	600d      	str	r5, [r1, #0]
 800ca42:	0635      	lsls	r5, r6, #24
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	d501      	bpl.n	800ca4c <_printf_i+0x1cc>
 800ca48:	6018      	str	r0, [r3, #0]
 800ca4a:	e002      	b.n	800ca52 <_printf_i+0x1d2>
 800ca4c:	0671      	lsls	r1, r6, #25
 800ca4e:	d5fb      	bpl.n	800ca48 <_printf_i+0x1c8>
 800ca50:	8018      	strh	r0, [r3, #0]
 800ca52:	2300      	movs	r3, #0
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	4616      	mov	r6, r2
 800ca58:	e7ba      	b.n	800c9d0 <_printf_i+0x150>
 800ca5a:	680b      	ldr	r3, [r1, #0]
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	600a      	str	r2, [r1, #0]
 800ca60:	681e      	ldr	r6, [r3, #0]
 800ca62:	6862      	ldr	r2, [r4, #4]
 800ca64:	2100      	movs	r1, #0
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7f3 fc42 	bl	80002f0 <memchr>
 800ca6c:	b108      	cbz	r0, 800ca72 <_printf_i+0x1f2>
 800ca6e:	1b80      	subs	r0, r0, r6
 800ca70:	6060      	str	r0, [r4, #4]
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	6123      	str	r3, [r4, #16]
 800ca76:	2300      	movs	r3, #0
 800ca78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca7c:	e7a8      	b.n	800c9d0 <_printf_i+0x150>
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	4632      	mov	r2, r6
 800ca82:	4649      	mov	r1, r9
 800ca84:	4640      	mov	r0, r8
 800ca86:	47d0      	blx	sl
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d0ab      	beq.n	800c9e4 <_printf_i+0x164>
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	079b      	lsls	r3, r3, #30
 800ca90:	d413      	bmi.n	800caba <_printf_i+0x23a>
 800ca92:	68e0      	ldr	r0, [r4, #12]
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	4298      	cmp	r0, r3
 800ca98:	bfb8      	it	lt
 800ca9a:	4618      	movlt	r0, r3
 800ca9c:	e7a4      	b.n	800c9e8 <_printf_i+0x168>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4632      	mov	r2, r6
 800caa2:	4649      	mov	r1, r9
 800caa4:	4640      	mov	r0, r8
 800caa6:	47d0      	blx	sl
 800caa8:	3001      	adds	r0, #1
 800caaa:	d09b      	beq.n	800c9e4 <_printf_i+0x164>
 800caac:	3501      	adds	r5, #1
 800caae:	68e3      	ldr	r3, [r4, #12]
 800cab0:	9903      	ldr	r1, [sp, #12]
 800cab2:	1a5b      	subs	r3, r3, r1
 800cab4:	42ab      	cmp	r3, r5
 800cab6:	dcf2      	bgt.n	800ca9e <_printf_i+0x21e>
 800cab8:	e7eb      	b.n	800ca92 <_printf_i+0x212>
 800caba:	2500      	movs	r5, #0
 800cabc:	f104 0619 	add.w	r6, r4, #25
 800cac0:	e7f5      	b.n	800caae <_printf_i+0x22e>
 800cac2:	bf00      	nop
 800cac4:	0800ea26 	.word	0x0800ea26
 800cac8:	0800ea37 	.word	0x0800ea37

0800cacc <cleanup_glue>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	460c      	mov	r4, r1
 800cad0:	6809      	ldr	r1, [r1, #0]
 800cad2:	4605      	mov	r5, r0
 800cad4:	b109      	cbz	r1, 800cada <cleanup_glue+0xe>
 800cad6:	f7ff fff9 	bl	800cacc <cleanup_glue>
 800cada:	4621      	mov	r1, r4
 800cadc:	4628      	mov	r0, r5
 800cade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cae2:	f7ff bb07 	b.w	800c0f4 <_free_r>
	...

0800cae8 <_reclaim_reent>:
 800cae8:	4b2c      	ldr	r3, [pc, #176]	; (800cb9c <_reclaim_reent+0xb4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4283      	cmp	r3, r0
 800caee:	b570      	push	{r4, r5, r6, lr}
 800caf0:	4604      	mov	r4, r0
 800caf2:	d051      	beq.n	800cb98 <_reclaim_reent+0xb0>
 800caf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800caf6:	b143      	cbz	r3, 800cb0a <_reclaim_reent+0x22>
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d14a      	bne.n	800cb94 <_reclaim_reent+0xac>
 800cafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb00:	6819      	ldr	r1, [r3, #0]
 800cb02:	b111      	cbz	r1, 800cb0a <_reclaim_reent+0x22>
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7ff faf5 	bl	800c0f4 <_free_r>
 800cb0a:	6961      	ldr	r1, [r4, #20]
 800cb0c:	b111      	cbz	r1, 800cb14 <_reclaim_reent+0x2c>
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7ff faf0 	bl	800c0f4 <_free_r>
 800cb14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb16:	b111      	cbz	r1, 800cb1e <_reclaim_reent+0x36>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f7ff faeb 	bl	800c0f4 <_free_r>
 800cb1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb20:	b111      	cbz	r1, 800cb28 <_reclaim_reent+0x40>
 800cb22:	4620      	mov	r0, r4
 800cb24:	f7ff fae6 	bl	800c0f4 <_free_r>
 800cb28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb2a:	b111      	cbz	r1, 800cb32 <_reclaim_reent+0x4a>
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7ff fae1 	bl	800c0f4 <_free_r>
 800cb32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb34:	b111      	cbz	r1, 800cb3c <_reclaim_reent+0x54>
 800cb36:	4620      	mov	r0, r4
 800cb38:	f7ff fadc 	bl	800c0f4 <_free_r>
 800cb3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb3e:	b111      	cbz	r1, 800cb46 <_reclaim_reent+0x5e>
 800cb40:	4620      	mov	r0, r4
 800cb42:	f7ff fad7 	bl	800c0f4 <_free_r>
 800cb46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb48:	b111      	cbz	r1, 800cb50 <_reclaim_reent+0x68>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff fad2 	bl	800c0f4 <_free_r>
 800cb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb52:	b111      	cbz	r1, 800cb5a <_reclaim_reent+0x72>
 800cb54:	4620      	mov	r0, r4
 800cb56:	f7ff facd 	bl	800c0f4 <_free_r>
 800cb5a:	69a3      	ldr	r3, [r4, #24]
 800cb5c:	b1e3      	cbz	r3, 800cb98 <_reclaim_reent+0xb0>
 800cb5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb60:	4620      	mov	r0, r4
 800cb62:	4798      	blx	r3
 800cb64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb66:	b1b9      	cbz	r1, 800cb98 <_reclaim_reent+0xb0>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb6e:	f7ff bfad 	b.w	800cacc <cleanup_glue>
 800cb72:	5949      	ldr	r1, [r1, r5]
 800cb74:	b941      	cbnz	r1, 800cb88 <_reclaim_reent+0xa0>
 800cb76:	3504      	adds	r5, #4
 800cb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb7a:	2d80      	cmp	r5, #128	; 0x80
 800cb7c:	68d9      	ldr	r1, [r3, #12]
 800cb7e:	d1f8      	bne.n	800cb72 <_reclaim_reent+0x8a>
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7ff fab7 	bl	800c0f4 <_free_r>
 800cb86:	e7ba      	b.n	800cafe <_reclaim_reent+0x16>
 800cb88:	680e      	ldr	r6, [r1, #0]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff fab2 	bl	800c0f4 <_free_r>
 800cb90:	4631      	mov	r1, r6
 800cb92:	e7ef      	b.n	800cb74 <_reclaim_reent+0x8c>
 800cb94:	2500      	movs	r5, #0
 800cb96:	e7ef      	b.n	800cb78 <_reclaim_reent+0x90>
 800cb98:	bd70      	pop	{r4, r5, r6, pc}
 800cb9a:	bf00      	nop
 800cb9c:	24000014 	.word	0x24000014

0800cba0 <_sbrk_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d06      	ldr	r5, [pc, #24]	; (800cbbc <_sbrk_r+0x1c>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f4 fc62 	bl	8001474 <_sbrk>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_sbrk_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_sbrk_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	24004f6c 	.word	0x24004f6c

0800cbc0 <__sread>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	f001 fd5e 	bl	800e688 <_read_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	bfab      	itete	ge
 800cbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd4:	181b      	addge	r3, r3, r0
 800cbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbda:	bfac      	ite	ge
 800cbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbde:	81a3      	strhlt	r3, [r4, #12]
 800cbe0:	bd10      	pop	{r4, pc}

0800cbe2 <__swrite>:
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	898b      	ldrh	r3, [r1, #12]
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	d505      	bpl.n	800cc00 <__swrite+0x1e>
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f000 ffdc 	bl	800dbb8 <_lseek_r>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	f000 b869 	b.w	800ccec <_write_r>

0800cc1a <__sseek>:
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc22:	f000 ffc9 	bl	800dbb8 <_lseek_r>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	bf15      	itete	ne
 800cc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc36:	81a3      	strheq	r3, [r4, #12]
 800cc38:	bf18      	it	ne
 800cc3a:	81a3      	strhne	r3, [r4, #12]
 800cc3c:	bd10      	pop	{r4, pc}

0800cc3e <__sclose>:
 800cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc42:	f000 b8d3 	b.w	800cdec <_close_r>
	...

0800cc48 <__swbuf_r>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	460e      	mov	r6, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	4605      	mov	r5, r0
 800cc50:	b118      	cbz	r0, 800cc5a <__swbuf_r+0x12>
 800cc52:	6983      	ldr	r3, [r0, #24]
 800cc54:	b90b      	cbnz	r3, 800cc5a <__swbuf_r+0x12>
 800cc56:	f7ff f969 	bl	800bf2c <__sinit>
 800cc5a:	4b21      	ldr	r3, [pc, #132]	; (800cce0 <__swbuf_r+0x98>)
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	d12b      	bne.n	800ccb8 <__swbuf_r+0x70>
 800cc60:	686c      	ldr	r4, [r5, #4]
 800cc62:	69a3      	ldr	r3, [r4, #24]
 800cc64:	60a3      	str	r3, [r4, #8]
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	071a      	lsls	r2, r3, #28
 800cc6a:	d52f      	bpl.n	800cccc <__swbuf_r+0x84>
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	b36b      	cbz	r3, 800cccc <__swbuf_r+0x84>
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	6820      	ldr	r0, [r4, #0]
 800cc74:	1ac0      	subs	r0, r0, r3
 800cc76:	6963      	ldr	r3, [r4, #20]
 800cc78:	b2f6      	uxtb	r6, r6
 800cc7a:	4283      	cmp	r3, r0
 800cc7c:	4637      	mov	r7, r6
 800cc7e:	dc04      	bgt.n	800cc8a <__swbuf_r+0x42>
 800cc80:	4621      	mov	r1, r4
 800cc82:	4628      	mov	r0, r5
 800cc84:	f000 ff58 	bl	800db38 <_fflush_r>
 800cc88:	bb30      	cbnz	r0, 800ccd8 <__swbuf_r+0x90>
 800cc8a:	68a3      	ldr	r3, [r4, #8]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	60a3      	str	r3, [r4, #8]
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	6022      	str	r2, [r4, #0]
 800cc96:	701e      	strb	r6, [r3, #0]
 800cc98:	6963      	ldr	r3, [r4, #20]
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	4283      	cmp	r3, r0
 800cc9e:	d004      	beq.n	800ccaa <__swbuf_r+0x62>
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	07db      	lsls	r3, r3, #31
 800cca4:	d506      	bpl.n	800ccb4 <__swbuf_r+0x6c>
 800cca6:	2e0a      	cmp	r6, #10
 800cca8:	d104      	bne.n	800ccb4 <__swbuf_r+0x6c>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4628      	mov	r0, r5
 800ccae:	f000 ff43 	bl	800db38 <_fflush_r>
 800ccb2:	b988      	cbnz	r0, 800ccd8 <__swbuf_r+0x90>
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb8:	4b0a      	ldr	r3, [pc, #40]	; (800cce4 <__swbuf_r+0x9c>)
 800ccba:	429c      	cmp	r4, r3
 800ccbc:	d101      	bne.n	800ccc2 <__swbuf_r+0x7a>
 800ccbe:	68ac      	ldr	r4, [r5, #8]
 800ccc0:	e7cf      	b.n	800cc62 <__swbuf_r+0x1a>
 800ccc2:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <__swbuf_r+0xa0>)
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	bf08      	it	eq
 800ccc8:	68ec      	ldreq	r4, [r5, #12]
 800ccca:	e7ca      	b.n	800cc62 <__swbuf_r+0x1a>
 800cccc:	4621      	mov	r1, r4
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 f81e 	bl	800cd10 <__swsetup_r>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d0cb      	beq.n	800cc70 <__swbuf_r+0x28>
 800ccd8:	f04f 37ff 	mov.w	r7, #4294967295
 800ccdc:	e7ea      	b.n	800ccb4 <__swbuf_r+0x6c>
 800ccde:	bf00      	nop
 800cce0:	0800e9d0 	.word	0x0800e9d0
 800cce4:	0800e9f0 	.word	0x0800e9f0
 800cce8:	0800e9b0 	.word	0x0800e9b0

0800ccec <_write_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	; (800cd0c <_write_r+0x20>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7f3 fd70 	bl	80007e0 <_write>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_write_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_write_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	24004f6c 	.word	0x24004f6c

0800cd10 <__swsetup_r>:
 800cd10:	4b32      	ldr	r3, [pc, #200]	; (800cddc <__swsetup_r+0xcc>)
 800cd12:	b570      	push	{r4, r5, r6, lr}
 800cd14:	681d      	ldr	r5, [r3, #0]
 800cd16:	4606      	mov	r6, r0
 800cd18:	460c      	mov	r4, r1
 800cd1a:	b125      	cbz	r5, 800cd26 <__swsetup_r+0x16>
 800cd1c:	69ab      	ldr	r3, [r5, #24]
 800cd1e:	b913      	cbnz	r3, 800cd26 <__swsetup_r+0x16>
 800cd20:	4628      	mov	r0, r5
 800cd22:	f7ff f903 	bl	800bf2c <__sinit>
 800cd26:	4b2e      	ldr	r3, [pc, #184]	; (800cde0 <__swsetup_r+0xd0>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	d10f      	bne.n	800cd4c <__swsetup_r+0x3c>
 800cd2c:	686c      	ldr	r4, [r5, #4]
 800cd2e:	89a3      	ldrh	r3, [r4, #12]
 800cd30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd34:	0719      	lsls	r1, r3, #28
 800cd36:	d42c      	bmi.n	800cd92 <__swsetup_r+0x82>
 800cd38:	06dd      	lsls	r5, r3, #27
 800cd3a:	d411      	bmi.n	800cd60 <__swsetup_r+0x50>
 800cd3c:	2309      	movs	r3, #9
 800cd3e:	6033      	str	r3, [r6, #0]
 800cd40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	e03e      	b.n	800cdca <__swsetup_r+0xba>
 800cd4c:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <__swsetup_r+0xd4>)
 800cd4e:	429c      	cmp	r4, r3
 800cd50:	d101      	bne.n	800cd56 <__swsetup_r+0x46>
 800cd52:	68ac      	ldr	r4, [r5, #8]
 800cd54:	e7eb      	b.n	800cd2e <__swsetup_r+0x1e>
 800cd56:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <__swsetup_r+0xd8>)
 800cd58:	429c      	cmp	r4, r3
 800cd5a:	bf08      	it	eq
 800cd5c:	68ec      	ldreq	r4, [r5, #12]
 800cd5e:	e7e6      	b.n	800cd2e <__swsetup_r+0x1e>
 800cd60:	0758      	lsls	r0, r3, #29
 800cd62:	d512      	bpl.n	800cd8a <__swsetup_r+0x7a>
 800cd64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd66:	b141      	cbz	r1, 800cd7a <__swsetup_r+0x6a>
 800cd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	d002      	beq.n	800cd76 <__swsetup_r+0x66>
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7ff f9bf 	bl	800c0f4 <_free_r>
 800cd76:	2300      	movs	r3, #0
 800cd78:	6363      	str	r3, [r4, #52]	; 0x34
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	2300      	movs	r3, #0
 800cd84:	6063      	str	r3, [r4, #4]
 800cd86:	6923      	ldr	r3, [r4, #16]
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f043 0308 	orr.w	r3, r3, #8
 800cd90:	81a3      	strh	r3, [r4, #12]
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	b94b      	cbnz	r3, 800cdaa <__swsetup_r+0x9a>
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cda0:	d003      	beq.n	800cdaa <__swsetup_r+0x9a>
 800cda2:	4621      	mov	r1, r4
 800cda4:	4630      	mov	r0, r6
 800cda6:	f000 ff3d 	bl	800dc24 <__smakebuf_r>
 800cdaa:	89a0      	ldrh	r0, [r4, #12]
 800cdac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdb0:	f010 0301 	ands.w	r3, r0, #1
 800cdb4:	d00a      	beq.n	800cdcc <__swsetup_r+0xbc>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60a3      	str	r3, [r4, #8]
 800cdba:	6963      	ldr	r3, [r4, #20]
 800cdbc:	425b      	negs	r3, r3
 800cdbe:	61a3      	str	r3, [r4, #24]
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	b943      	cbnz	r3, 800cdd6 <__swsetup_r+0xc6>
 800cdc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdc8:	d1ba      	bne.n	800cd40 <__swsetup_r+0x30>
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	0781      	lsls	r1, r0, #30
 800cdce:	bf58      	it	pl
 800cdd0:	6963      	ldrpl	r3, [r4, #20]
 800cdd2:	60a3      	str	r3, [r4, #8]
 800cdd4:	e7f4      	b.n	800cdc0 <__swsetup_r+0xb0>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e7f7      	b.n	800cdca <__swsetup_r+0xba>
 800cdda:	bf00      	nop
 800cddc:	24000014 	.word	0x24000014
 800cde0:	0800e9d0 	.word	0x0800e9d0
 800cde4:	0800e9f0 	.word	0x0800e9f0
 800cde8:	0800e9b0 	.word	0x0800e9b0

0800cdec <_close_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d06      	ldr	r5, [pc, #24]	; (800ce08 <_close_r+0x1c>)
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	602b      	str	r3, [r5, #0]
 800cdf8:	f7f4 fb07 	bl	800140a <_close>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	d102      	bne.n	800ce06 <_close_r+0x1a>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	b103      	cbz	r3, 800ce06 <_close_r+0x1a>
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	24004f6c 	.word	0x24004f6c

0800ce0c <quorem>:
 800ce0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	6903      	ldr	r3, [r0, #16]
 800ce12:	690c      	ldr	r4, [r1, #16]
 800ce14:	42a3      	cmp	r3, r4
 800ce16:	4607      	mov	r7, r0
 800ce18:	f2c0 8081 	blt.w	800cf1e <quorem+0x112>
 800ce1c:	3c01      	subs	r4, #1
 800ce1e:	f101 0814 	add.w	r8, r1, #20
 800ce22:	f100 0514 	add.w	r5, r0, #20
 800ce26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce2a:	9301      	str	r3, [sp, #4]
 800ce2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce34:	3301      	adds	r3, #1
 800ce36:	429a      	cmp	r2, r3
 800ce38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ce3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce40:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce44:	d331      	bcc.n	800ceaa <quorem+0x9e>
 800ce46:	f04f 0e00 	mov.w	lr, #0
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	46ac      	mov	ip, r5
 800ce4e:	46f2      	mov	sl, lr
 800ce50:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce54:	b293      	uxth	r3, r2
 800ce56:	fb06 e303 	mla	r3, r6, r3, lr
 800ce5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	ebaa 0303 	sub.w	r3, sl, r3
 800ce64:	0c12      	lsrs	r2, r2, #16
 800ce66:	f8dc a000 	ldr.w	sl, [ip]
 800ce6a:	fb06 e202 	mla	r2, r6, r2, lr
 800ce6e:	fa13 f38a 	uxtah	r3, r3, sl
 800ce72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce76:	fa1f fa82 	uxth.w	sl, r2
 800ce7a:	f8dc 2000 	ldr.w	r2, [ip]
 800ce7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ce82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce8c:	4581      	cmp	r9, r0
 800ce8e:	f84c 3b04 	str.w	r3, [ip], #4
 800ce92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce96:	d2db      	bcs.n	800ce50 <quorem+0x44>
 800ce98:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce9c:	b92b      	cbnz	r3, 800ceaa <quorem+0x9e>
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	3b04      	subs	r3, #4
 800cea2:	429d      	cmp	r5, r3
 800cea4:	461a      	mov	r2, r3
 800cea6:	d32e      	bcc.n	800cf06 <quorem+0xfa>
 800cea8:	613c      	str	r4, [r7, #16]
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f001 f984 	bl	800e1b8 <__mcmp>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	db24      	blt.n	800cefe <quorem+0xf2>
 800ceb4:	3601      	adds	r6, #1
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f04f 0c00 	mov.w	ip, #0
 800cebc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cec0:	f8d0 e000 	ldr.w	lr, [r0]
 800cec4:	b293      	uxth	r3, r2
 800cec6:	ebac 0303 	sub.w	r3, ip, r3
 800ceca:	0c12      	lsrs	r2, r2, #16
 800cecc:	fa13 f38e 	uxtah	r3, r3, lr
 800ced0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ced4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cede:	45c1      	cmp	r9, r8
 800cee0:	f840 3b04 	str.w	r3, [r0], #4
 800cee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cee8:	d2e8      	bcs.n	800cebc <quorem+0xb0>
 800ceea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ceee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cef2:	b922      	cbnz	r2, 800cefe <quorem+0xf2>
 800cef4:	3b04      	subs	r3, #4
 800cef6:	429d      	cmp	r5, r3
 800cef8:	461a      	mov	r2, r3
 800cefa:	d30a      	bcc.n	800cf12 <quorem+0x106>
 800cefc:	613c      	str	r4, [r7, #16]
 800cefe:	4630      	mov	r0, r6
 800cf00:	b003      	add	sp, #12
 800cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf06:	6812      	ldr	r2, [r2, #0]
 800cf08:	3b04      	subs	r3, #4
 800cf0a:	2a00      	cmp	r2, #0
 800cf0c:	d1cc      	bne.n	800cea8 <quorem+0x9c>
 800cf0e:	3c01      	subs	r4, #1
 800cf10:	e7c7      	b.n	800cea2 <quorem+0x96>
 800cf12:	6812      	ldr	r2, [r2, #0]
 800cf14:	3b04      	subs	r3, #4
 800cf16:	2a00      	cmp	r2, #0
 800cf18:	d1f0      	bne.n	800cefc <quorem+0xf0>
 800cf1a:	3c01      	subs	r4, #1
 800cf1c:	e7eb      	b.n	800cef6 <quorem+0xea>
 800cf1e:	2000      	movs	r0, #0
 800cf20:	e7ee      	b.n	800cf00 <quorem+0xf4>
 800cf22:	0000      	movs	r0, r0
 800cf24:	0000      	movs	r0, r0
	...

0800cf28 <_dtoa_r>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	ec59 8b10 	vmov	r8, r9, d0
 800cf30:	b095      	sub	sp, #84	; 0x54
 800cf32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf34:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800cf36:	9107      	str	r1, [sp, #28]
 800cf38:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf40:	9310      	str	r3, [sp, #64]	; 0x40
 800cf42:	b975      	cbnz	r5, 800cf62 <_dtoa_r+0x3a>
 800cf44:	2010      	movs	r0, #16
 800cf46:	f7ff f8b7 	bl	800c0b8 <malloc>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6270      	str	r0, [r6, #36]	; 0x24
 800cf4e:	b920      	cbnz	r0, 800cf5a <_dtoa_r+0x32>
 800cf50:	4bab      	ldr	r3, [pc, #684]	; (800d200 <_dtoa_r+0x2d8>)
 800cf52:	21ea      	movs	r1, #234	; 0xea
 800cf54:	48ab      	ldr	r0, [pc, #684]	; (800d204 <_dtoa_r+0x2dc>)
 800cf56:	f001 fba9 	bl	800e6ac <__assert_func>
 800cf5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf5e:	6005      	str	r5, [r0, #0]
 800cf60:	60c5      	str	r5, [r0, #12]
 800cf62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	b151      	cbz	r1, 800cf7e <_dtoa_r+0x56>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	604a      	str	r2, [r1, #4]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4093      	lsls	r3, r2
 800cf70:	608b      	str	r3, [r1, #8]
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 fee2 	bl	800dd3c <_Bfree>
 800cf78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	f1b9 0300 	subs.w	r3, r9, #0
 800cf82:	bfbb      	ittet	lt
 800cf84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cf88:	9303      	strlt	r3, [sp, #12]
 800cf8a:	2300      	movge	r3, #0
 800cf8c:	2201      	movlt	r2, #1
 800cf8e:	bfac      	ite	ge
 800cf90:	6023      	strge	r3, [r4, #0]
 800cf92:	6022      	strlt	r2, [r4, #0]
 800cf94:	4b9c      	ldr	r3, [pc, #624]	; (800d208 <_dtoa_r+0x2e0>)
 800cf96:	9c03      	ldr	r4, [sp, #12]
 800cf98:	43a3      	bics	r3, r4
 800cf9a:	d11a      	bne.n	800cfd2 <_dtoa_r+0xaa>
 800cf9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cfa8:	ea53 0308 	orrs.w	r3, r3, r8
 800cfac:	f000 8512 	beq.w	800d9d4 <_dtoa_r+0xaac>
 800cfb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cfb2:	b953      	cbnz	r3, 800cfca <_dtoa_r+0xa2>
 800cfb4:	4b95      	ldr	r3, [pc, #596]	; (800d20c <_dtoa_r+0x2e4>)
 800cfb6:	e01f      	b.n	800cff8 <_dtoa_r+0xd0>
 800cfb8:	4b95      	ldr	r3, [pc, #596]	; (800d210 <_dtoa_r+0x2e8>)
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	9800      	ldr	r0, [sp, #0]
 800cfc4:	b015      	add	sp, #84	; 0x54
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	4b90      	ldr	r3, [pc, #576]	; (800d20c <_dtoa_r+0x2e4>)
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	3303      	adds	r3, #3
 800cfd0:	e7f5      	b.n	800cfbe <_dtoa_r+0x96>
 800cfd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cfe2:	d10b      	bne.n	800cffc <_dtoa_r+0xd4>
 800cfe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 84ee 	beq.w	800d9ce <_dtoa_r+0xaa6>
 800cff2:	4888      	ldr	r0, [pc, #544]	; (800d214 <_dtoa_r+0x2ec>)
 800cff4:	6018      	str	r0, [r3, #0]
 800cff6:	1e43      	subs	r3, r0, #1
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	e7e2      	b.n	800cfc2 <_dtoa_r+0x9a>
 800cffc:	a913      	add	r1, sp, #76	; 0x4c
 800cffe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d002:	aa12      	add	r2, sp, #72	; 0x48
 800d004:	4630      	mov	r0, r6
 800d006:	f001 f97b 	bl	800e300 <__d2b>
 800d00a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d00e:	4605      	mov	r5, r0
 800d010:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d012:	2900      	cmp	r1, #0
 800d014:	d047      	beq.n	800d0a6 <_dtoa_r+0x17e>
 800d016:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d018:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d01c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d020:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d024:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d028:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d02c:	2400      	movs	r4, #0
 800d02e:	ec43 2b16 	vmov	d6, r2, r3
 800d032:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d036:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d1e8 <_dtoa_r+0x2c0>
 800d03a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d03e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d1f0 <_dtoa_r+0x2c8>
 800d042:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d046:	eeb0 7b46 	vmov.f64	d7, d6
 800d04a:	ee06 1a90 	vmov	s13, r1
 800d04e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d052:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d1f8 <_dtoa_r+0x2d0>
 800d056:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d05a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d05e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d066:	ee16 ba90 	vmov	fp, s13
 800d06a:	9411      	str	r4, [sp, #68]	; 0x44
 800d06c:	d508      	bpl.n	800d080 <_dtoa_r+0x158>
 800d06e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d072:	eeb4 6b47 	vcmp.f64	d6, d7
 800d076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07a:	bf18      	it	ne
 800d07c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d080:	f1bb 0f16 	cmp.w	fp, #22
 800d084:	d832      	bhi.n	800d0ec <_dtoa_r+0x1c4>
 800d086:	4b64      	ldr	r3, [pc, #400]	; (800d218 <_dtoa_r+0x2f0>)
 800d088:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d08c:	ed93 7b00 	vldr	d7, [r3]
 800d090:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d094:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09c:	d501      	bpl.n	800d0a2 <_dtoa_r+0x17a>
 800d09e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e023      	b.n	800d0ee <_dtoa_r+0x1c6>
 800d0a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d0a8:	4401      	add	r1, r0
 800d0aa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	bfc3      	ittte	gt
 800d0b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d0b6:	fa04 f303 	lslgt.w	r3, r4, r3
 800d0ba:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d0be:	f1c3 0320 	rsble	r3, r3, #32
 800d0c2:	bfc6      	itte	gt
 800d0c4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d0c8:	ea43 0308 	orrgt.w	r3, r3, r8
 800d0cc:	fa08 f303 	lslle.w	r3, r8, r3
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0d8:	3901      	subs	r1, #1
 800d0da:	ed8d 7b00 	vstr	d7, [sp]
 800d0de:	9c01      	ldr	r4, [sp, #4]
 800d0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d0e8:	2401      	movs	r4, #1
 800d0ea:	e7a0      	b.n	800d02e <_dtoa_r+0x106>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0f0:	1a43      	subs	r3, r0, r1
 800d0f2:	1e5a      	subs	r2, r3, #1
 800d0f4:	bf45      	ittet	mi
 800d0f6:	f1c3 0301 	rsbmi	r3, r3, #1
 800d0fa:	9305      	strmi	r3, [sp, #20]
 800d0fc:	2300      	movpl	r3, #0
 800d0fe:	2300      	movmi	r3, #0
 800d100:	9206      	str	r2, [sp, #24]
 800d102:	bf54      	ite	pl
 800d104:	9305      	strpl	r3, [sp, #20]
 800d106:	9306      	strmi	r3, [sp, #24]
 800d108:	f1bb 0f00 	cmp.w	fp, #0
 800d10c:	db18      	blt.n	800d140 <_dtoa_r+0x218>
 800d10e:	9b06      	ldr	r3, [sp, #24]
 800d110:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d114:	445b      	add	r3, fp
 800d116:	9306      	str	r3, [sp, #24]
 800d118:	2300      	movs	r3, #0
 800d11a:	9a07      	ldr	r2, [sp, #28]
 800d11c:	2a09      	cmp	r2, #9
 800d11e:	d849      	bhi.n	800d1b4 <_dtoa_r+0x28c>
 800d120:	2a05      	cmp	r2, #5
 800d122:	bfc4      	itt	gt
 800d124:	3a04      	subgt	r2, #4
 800d126:	9207      	strgt	r2, [sp, #28]
 800d128:	9a07      	ldr	r2, [sp, #28]
 800d12a:	f1a2 0202 	sub.w	r2, r2, #2
 800d12e:	bfcc      	ite	gt
 800d130:	2400      	movgt	r4, #0
 800d132:	2401      	movle	r4, #1
 800d134:	2a03      	cmp	r2, #3
 800d136:	d848      	bhi.n	800d1ca <_dtoa_r+0x2a2>
 800d138:	e8df f002 	tbb	[pc, r2]
 800d13c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d140:	9b05      	ldr	r3, [sp, #20]
 800d142:	2200      	movs	r2, #0
 800d144:	eba3 030b 	sub.w	r3, r3, fp
 800d148:	9305      	str	r3, [sp, #20]
 800d14a:	920e      	str	r2, [sp, #56]	; 0x38
 800d14c:	f1cb 0300 	rsb	r3, fp, #0
 800d150:	e7e3      	b.n	800d11a <_dtoa_r+0x1f2>
 800d152:	2200      	movs	r2, #0
 800d154:	9208      	str	r2, [sp, #32]
 800d156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d158:	2a00      	cmp	r2, #0
 800d15a:	dc39      	bgt.n	800d1d0 <_dtoa_r+0x2a8>
 800d15c:	f04f 0a01 	mov.w	sl, #1
 800d160:	46d1      	mov	r9, sl
 800d162:	4652      	mov	r2, sl
 800d164:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d168:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d16a:	2100      	movs	r1, #0
 800d16c:	6079      	str	r1, [r7, #4]
 800d16e:	2004      	movs	r0, #4
 800d170:	f100 0c14 	add.w	ip, r0, #20
 800d174:	4594      	cmp	ip, r2
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	d92f      	bls.n	800d1da <_dtoa_r+0x2b2>
 800d17a:	4630      	mov	r0, r6
 800d17c:	930c      	str	r3, [sp, #48]	; 0x30
 800d17e:	f000 fd9d 	bl	800dcbc <_Balloc>
 800d182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d184:	9000      	str	r0, [sp, #0]
 800d186:	4602      	mov	r2, r0
 800d188:	2800      	cmp	r0, #0
 800d18a:	d149      	bne.n	800d220 <_dtoa_r+0x2f8>
 800d18c:	4b23      	ldr	r3, [pc, #140]	; (800d21c <_dtoa_r+0x2f4>)
 800d18e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d192:	e6df      	b.n	800cf54 <_dtoa_r+0x2c>
 800d194:	2201      	movs	r2, #1
 800d196:	e7dd      	b.n	800d154 <_dtoa_r+0x22c>
 800d198:	2200      	movs	r2, #0
 800d19a:	9208      	str	r2, [sp, #32]
 800d19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d19e:	eb0b 0a02 	add.w	sl, fp, r2
 800d1a2:	f10a 0901 	add.w	r9, sl, #1
 800d1a6:	464a      	mov	r2, r9
 800d1a8:	2a01      	cmp	r2, #1
 800d1aa:	bfb8      	it	lt
 800d1ac:	2201      	movlt	r2, #1
 800d1ae:	e7db      	b.n	800d168 <_dtoa_r+0x240>
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	e7f2      	b.n	800d19a <_dtoa_r+0x272>
 800d1b4:	2401      	movs	r4, #1
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d1bc:	f04f 3aff 	mov.w	sl, #4294967295
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	46d1      	mov	r9, sl
 800d1c4:	2212      	movs	r2, #18
 800d1c6:	9109      	str	r1, [sp, #36]	; 0x24
 800d1c8:	e7ce      	b.n	800d168 <_dtoa_r+0x240>
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	9208      	str	r2, [sp, #32]
 800d1ce:	e7f5      	b.n	800d1bc <_dtoa_r+0x294>
 800d1d0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d1d4:	46d1      	mov	r9, sl
 800d1d6:	4652      	mov	r2, sl
 800d1d8:	e7c6      	b.n	800d168 <_dtoa_r+0x240>
 800d1da:	3101      	adds	r1, #1
 800d1dc:	6079      	str	r1, [r7, #4]
 800d1de:	0040      	lsls	r0, r0, #1
 800d1e0:	e7c6      	b.n	800d170 <_dtoa_r+0x248>
 800d1e2:	bf00      	nop
 800d1e4:	f3af 8000 	nop.w
 800d1e8:	636f4361 	.word	0x636f4361
 800d1ec:	3fd287a7 	.word	0x3fd287a7
 800d1f0:	8b60c8b3 	.word	0x8b60c8b3
 800d1f4:	3fc68a28 	.word	0x3fc68a28
 800d1f8:	509f79fb 	.word	0x509f79fb
 800d1fc:	3fd34413 	.word	0x3fd34413
 800d200:	0800ea55 	.word	0x0800ea55
 800d204:	0800ea6c 	.word	0x0800ea6c
 800d208:	7ff00000 	.word	0x7ff00000
 800d20c:	0800ea51 	.word	0x0800ea51
 800d210:	0800ea48 	.word	0x0800ea48
 800d214:	0800ea25 	.word	0x0800ea25
 800d218:	0800eb68 	.word	0x0800eb68
 800d21c:	0800eacb 	.word	0x0800eacb
 800d220:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d222:	9900      	ldr	r1, [sp, #0]
 800d224:	6011      	str	r1, [r2, #0]
 800d226:	f1b9 0f0e 	cmp.w	r9, #14
 800d22a:	d872      	bhi.n	800d312 <_dtoa_r+0x3ea>
 800d22c:	2c00      	cmp	r4, #0
 800d22e:	d070      	beq.n	800d312 <_dtoa_r+0x3ea>
 800d230:	f1bb 0f00 	cmp.w	fp, #0
 800d234:	f340 80a6 	ble.w	800d384 <_dtoa_r+0x45c>
 800d238:	49ca      	ldr	r1, [pc, #808]	; (800d564 <_dtoa_r+0x63c>)
 800d23a:	f00b 020f 	and.w	r2, fp, #15
 800d23e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d242:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d246:	ed92 7b00 	vldr	d7, [r2]
 800d24a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d24e:	f000 808d 	beq.w	800d36c <_dtoa_r+0x444>
 800d252:	4ac5      	ldr	r2, [pc, #788]	; (800d568 <_dtoa_r+0x640>)
 800d254:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d258:	ed92 6b08 	vldr	d6, [r2, #32]
 800d25c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d260:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d264:	f001 010f 	and.w	r1, r1, #15
 800d268:	2203      	movs	r2, #3
 800d26a:	48bf      	ldr	r0, [pc, #764]	; (800d568 <_dtoa_r+0x640>)
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d17f      	bne.n	800d370 <_dtoa_r+0x448>
 800d270:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d274:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d278:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d27c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d27e:	2900      	cmp	r1, #0
 800d280:	f000 80b2 	beq.w	800d3e8 <_dtoa_r+0x4c0>
 800d284:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d288:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d28c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d294:	f140 80a8 	bpl.w	800d3e8 <_dtoa_r+0x4c0>
 800d298:	f1b9 0f00 	cmp.w	r9, #0
 800d29c:	f000 80a4 	beq.w	800d3e8 <_dtoa_r+0x4c0>
 800d2a0:	f1ba 0f00 	cmp.w	sl, #0
 800d2a4:	dd31      	ble.n	800d30a <_dtoa_r+0x3e2>
 800d2a6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d2aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2b2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d2b6:	3201      	adds	r2, #1
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d2be:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d2c2:	ee07 2a90 	vmov	s15, r2
 800d2c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d2ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d2ce:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d2d2:	9c03      	ldr	r4, [sp, #12]
 800d2d4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d2d8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f040 8086 	bne.w	800d3ee <_dtoa_r+0x4c6>
 800d2e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d2e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d2ea:	ec42 1b17 	vmov	d7, r1, r2
 800d2ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f6:	f300 8272 	bgt.w	800d7de <_dtoa_r+0x8b6>
 800d2fa:	eeb1 7b47 	vneg.f64	d7, d7
 800d2fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d306:	f100 8267 	bmi.w	800d7d8 <_dtoa_r+0x8b0>
 800d30a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d30e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d312:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d314:	2a00      	cmp	r2, #0
 800d316:	f2c0 8129 	blt.w	800d56c <_dtoa_r+0x644>
 800d31a:	f1bb 0f0e 	cmp.w	fp, #14
 800d31e:	f300 8125 	bgt.w	800d56c <_dtoa_r+0x644>
 800d322:	4b90      	ldr	r3, [pc, #576]	; (800d564 <_dtoa_r+0x63c>)
 800d324:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d328:	ed93 6b00 	vldr	d6, [r3]
 800d32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f280 80c3 	bge.w	800d4ba <_dtoa_r+0x592>
 800d334:	f1b9 0f00 	cmp.w	r9, #0
 800d338:	f300 80bf 	bgt.w	800d4ba <_dtoa_r+0x592>
 800d33c:	f040 824c 	bne.w	800d7d8 <_dtoa_r+0x8b0>
 800d340:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d344:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d34c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d354:	464c      	mov	r4, r9
 800d356:	464f      	mov	r7, r9
 800d358:	f280 8222 	bge.w	800d7a0 <_dtoa_r+0x878>
 800d35c:	f8dd 8000 	ldr.w	r8, [sp]
 800d360:	2331      	movs	r3, #49	; 0x31
 800d362:	f808 3b01 	strb.w	r3, [r8], #1
 800d366:	f10b 0b01 	add.w	fp, fp, #1
 800d36a:	e21e      	b.n	800d7aa <_dtoa_r+0x882>
 800d36c:	2202      	movs	r2, #2
 800d36e:	e77c      	b.n	800d26a <_dtoa_r+0x342>
 800d370:	07cc      	lsls	r4, r1, #31
 800d372:	d504      	bpl.n	800d37e <_dtoa_r+0x456>
 800d374:	ed90 6b00 	vldr	d6, [r0]
 800d378:	3201      	adds	r2, #1
 800d37a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d37e:	1049      	asrs	r1, r1, #1
 800d380:	3008      	adds	r0, #8
 800d382:	e773      	b.n	800d26c <_dtoa_r+0x344>
 800d384:	d02e      	beq.n	800d3e4 <_dtoa_r+0x4bc>
 800d386:	f1cb 0100 	rsb	r1, fp, #0
 800d38a:	4a76      	ldr	r2, [pc, #472]	; (800d564 <_dtoa_r+0x63c>)
 800d38c:	f001 000f 	and.w	r0, r1, #15
 800d390:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d394:	ed92 7b00 	vldr	d7, [r2]
 800d398:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d39c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d3a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d3a4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d3a8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d3ac:	486e      	ldr	r0, [pc, #440]	; (800d568 <_dtoa_r+0x640>)
 800d3ae:	1109      	asrs	r1, r1, #4
 800d3b0:	2400      	movs	r4, #0
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	b939      	cbnz	r1, 800d3c6 <_dtoa_r+0x49e>
 800d3b6:	2c00      	cmp	r4, #0
 800d3b8:	f43f af60 	beq.w	800d27c <_dtoa_r+0x354>
 800d3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3c4:	e75a      	b.n	800d27c <_dtoa_r+0x354>
 800d3c6:	07cf      	lsls	r7, r1, #31
 800d3c8:	d509      	bpl.n	800d3de <_dtoa_r+0x4b6>
 800d3ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d3ce:	ed90 7b00 	vldr	d7, [r0]
 800d3d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d3d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d3da:	3201      	adds	r2, #1
 800d3dc:	2401      	movs	r4, #1
 800d3de:	1049      	asrs	r1, r1, #1
 800d3e0:	3008      	adds	r0, #8
 800d3e2:	e7e7      	b.n	800d3b4 <_dtoa_r+0x48c>
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	e749      	b.n	800d27c <_dtoa_r+0x354>
 800d3e8:	465f      	mov	r7, fp
 800d3ea:	4648      	mov	r0, r9
 800d3ec:	e765      	b.n	800d2ba <_dtoa_r+0x392>
 800d3ee:	ec42 1b17 	vmov	d7, r1, r2
 800d3f2:	4a5c      	ldr	r2, [pc, #368]	; (800d564 <_dtoa_r+0x63c>)
 800d3f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d3f8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d3fc:	9a00      	ldr	r2, [sp, #0]
 800d3fe:	1814      	adds	r4, r2, r0
 800d400:	9a08      	ldr	r2, [sp, #32]
 800d402:	b352      	cbz	r2, 800d45a <_dtoa_r+0x532>
 800d404:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d408:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d40c:	f8dd 8000 	ldr.w	r8, [sp]
 800d410:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d414:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d418:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d41c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d420:	ee14 2a90 	vmov	r2, s9
 800d424:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d428:	3230      	adds	r2, #48	; 0x30
 800d42a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d42e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d436:	f808 2b01 	strb.w	r2, [r8], #1
 800d43a:	d439      	bmi.n	800d4b0 <_dtoa_r+0x588>
 800d43c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d440:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d448:	d472      	bmi.n	800d530 <_dtoa_r+0x608>
 800d44a:	45a0      	cmp	r8, r4
 800d44c:	f43f af5d 	beq.w	800d30a <_dtoa_r+0x3e2>
 800d450:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d454:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d458:	e7e0      	b.n	800d41c <_dtoa_r+0x4f4>
 800d45a:	f8dd 8000 	ldr.w	r8, [sp]
 800d45e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d462:	4621      	mov	r1, r4
 800d464:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d468:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d46c:	ee14 2a90 	vmov	r2, s9
 800d470:	3230      	adds	r2, #48	; 0x30
 800d472:	f808 2b01 	strb.w	r2, [r8], #1
 800d476:	45a0      	cmp	r8, r4
 800d478:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d47c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d480:	d118      	bne.n	800d4b4 <_dtoa_r+0x58c>
 800d482:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d486:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d48a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d492:	dc4d      	bgt.n	800d530 <_dtoa_r+0x608>
 800d494:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d498:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a0:	f57f af33 	bpl.w	800d30a <_dtoa_r+0x3e2>
 800d4a4:	4688      	mov	r8, r1
 800d4a6:	3901      	subs	r1, #1
 800d4a8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d4ac:	2b30      	cmp	r3, #48	; 0x30
 800d4ae:	d0f9      	beq.n	800d4a4 <_dtoa_r+0x57c>
 800d4b0:	46bb      	mov	fp, r7
 800d4b2:	e02a      	b.n	800d50a <_dtoa_r+0x5e2>
 800d4b4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d4b8:	e7d6      	b.n	800d468 <_dtoa_r+0x540>
 800d4ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4be:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d4c2:	f8dd 8000 	ldr.w	r8, [sp]
 800d4c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d4ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d4ce:	ee15 3a10 	vmov	r3, s10
 800d4d2:	3330      	adds	r3, #48	; 0x30
 800d4d4:	f808 3b01 	strb.w	r3, [r8], #1
 800d4d8:	9b00      	ldr	r3, [sp, #0]
 800d4da:	eba8 0303 	sub.w	r3, r8, r3
 800d4de:	4599      	cmp	r9, r3
 800d4e0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d4e4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d4e8:	d133      	bne.n	800d552 <_dtoa_r+0x62a>
 800d4ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d4ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f6:	dc1a      	bgt.n	800d52e <_dtoa_r+0x606>
 800d4f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d500:	d103      	bne.n	800d50a <_dtoa_r+0x5e2>
 800d502:	ee15 3a10 	vmov	r3, s10
 800d506:	07d9      	lsls	r1, r3, #31
 800d508:	d411      	bmi.n	800d52e <_dtoa_r+0x606>
 800d50a:	4629      	mov	r1, r5
 800d50c:	4630      	mov	r0, r6
 800d50e:	f000 fc15 	bl	800dd3c <_Bfree>
 800d512:	2300      	movs	r3, #0
 800d514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d516:	f888 3000 	strb.w	r3, [r8]
 800d51a:	f10b 0301 	add.w	r3, fp, #1
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d522:	2b00      	cmp	r3, #0
 800d524:	f43f ad4d 	beq.w	800cfc2 <_dtoa_r+0x9a>
 800d528:	f8c3 8000 	str.w	r8, [r3]
 800d52c:	e549      	b.n	800cfc2 <_dtoa_r+0x9a>
 800d52e:	465f      	mov	r7, fp
 800d530:	4643      	mov	r3, r8
 800d532:	4698      	mov	r8, r3
 800d534:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d538:	2a39      	cmp	r2, #57	; 0x39
 800d53a:	d106      	bne.n	800d54a <_dtoa_r+0x622>
 800d53c:	9a00      	ldr	r2, [sp, #0]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d1f7      	bne.n	800d532 <_dtoa_r+0x60a>
 800d542:	9900      	ldr	r1, [sp, #0]
 800d544:	2230      	movs	r2, #48	; 0x30
 800d546:	3701      	adds	r7, #1
 800d548:	700a      	strb	r2, [r1, #0]
 800d54a:	781a      	ldrb	r2, [r3, #0]
 800d54c:	3201      	adds	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e7ae      	b.n	800d4b0 <_dtoa_r+0x588>
 800d552:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d556:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d55e:	d1b2      	bne.n	800d4c6 <_dtoa_r+0x59e>
 800d560:	e7d3      	b.n	800d50a <_dtoa_r+0x5e2>
 800d562:	bf00      	nop
 800d564:	0800eb68 	.word	0x0800eb68
 800d568:	0800eb40 	.word	0x0800eb40
 800d56c:	9908      	ldr	r1, [sp, #32]
 800d56e:	2900      	cmp	r1, #0
 800d570:	f000 80d1 	beq.w	800d716 <_dtoa_r+0x7ee>
 800d574:	9907      	ldr	r1, [sp, #28]
 800d576:	2901      	cmp	r1, #1
 800d578:	f300 80b4 	bgt.w	800d6e4 <_dtoa_r+0x7bc>
 800d57c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d57e:	2900      	cmp	r1, #0
 800d580:	f000 80ac 	beq.w	800d6dc <_dtoa_r+0x7b4>
 800d584:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d588:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d58c:	461c      	mov	r4, r3
 800d58e:	930a      	str	r3, [sp, #40]	; 0x28
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	4413      	add	r3, r2
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	9b06      	ldr	r3, [sp, #24]
 800d598:	2101      	movs	r1, #1
 800d59a:	4413      	add	r3, r2
 800d59c:	4630      	mov	r0, r6
 800d59e:	9306      	str	r3, [sp, #24]
 800d5a0:	f000 fc88 	bl	800deb4 <__i2b>
 800d5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ac:	dd0d      	ble.n	800d5ca <_dtoa_r+0x6a2>
 800d5ae:	9a06      	ldr	r2, [sp, #24]
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	dd0a      	ble.n	800d5ca <_dtoa_r+0x6a2>
 800d5b4:	4542      	cmp	r2, r8
 800d5b6:	9905      	ldr	r1, [sp, #20]
 800d5b8:	bfa8      	it	ge
 800d5ba:	4642      	movge	r2, r8
 800d5bc:	1a89      	subs	r1, r1, r2
 800d5be:	9105      	str	r1, [sp, #20]
 800d5c0:	9906      	ldr	r1, [sp, #24]
 800d5c2:	eba8 0802 	sub.w	r8, r8, r2
 800d5c6:	1a8a      	subs	r2, r1, r2
 800d5c8:	9206      	str	r2, [sp, #24]
 800d5ca:	b303      	cbz	r3, 800d60e <_dtoa_r+0x6e6>
 800d5cc:	9a08      	ldr	r2, [sp, #32]
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	f000 80a6 	beq.w	800d720 <_dtoa_r+0x7f8>
 800d5d4:	2c00      	cmp	r4, #0
 800d5d6:	dd13      	ble.n	800d600 <_dtoa_r+0x6d8>
 800d5d8:	4639      	mov	r1, r7
 800d5da:	4622      	mov	r2, r4
 800d5dc:	4630      	mov	r0, r6
 800d5de:	930c      	str	r3, [sp, #48]	; 0x30
 800d5e0:	f000 fd24 	bl	800e02c <__pow5mult>
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f000 fc78 	bl	800dee0 <__multiply>
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	900a      	str	r0, [sp, #40]	; 0x28
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f000 fba1 	bl	800dd3c <_Bfree>
 800d5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5fe:	4615      	mov	r5, r2
 800d600:	1b1a      	subs	r2, r3, r4
 800d602:	d004      	beq.n	800d60e <_dtoa_r+0x6e6>
 800d604:	4629      	mov	r1, r5
 800d606:	4630      	mov	r0, r6
 800d608:	f000 fd10 	bl	800e02c <__pow5mult>
 800d60c:	4605      	mov	r5, r0
 800d60e:	2101      	movs	r1, #1
 800d610:	4630      	mov	r0, r6
 800d612:	f000 fc4f 	bl	800deb4 <__i2b>
 800d616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d618:	2b00      	cmp	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	f340 8082 	ble.w	800d724 <_dtoa_r+0x7fc>
 800d620:	461a      	mov	r2, r3
 800d622:	4601      	mov	r1, r0
 800d624:	4630      	mov	r0, r6
 800d626:	f000 fd01 	bl	800e02c <__pow5mult>
 800d62a:	9b07      	ldr	r3, [sp, #28]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	4604      	mov	r4, r0
 800d630:	dd7b      	ble.n	800d72a <_dtoa_r+0x802>
 800d632:	2300      	movs	r3, #0
 800d634:	930a      	str	r3, [sp, #40]	; 0x28
 800d636:	6922      	ldr	r2, [r4, #16]
 800d638:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d63c:	6910      	ldr	r0, [r2, #16]
 800d63e:	f000 fbe9 	bl	800de14 <__hi0bits>
 800d642:	f1c0 0020 	rsb	r0, r0, #32
 800d646:	9b06      	ldr	r3, [sp, #24]
 800d648:	4418      	add	r0, r3
 800d64a:	f010 001f 	ands.w	r0, r0, #31
 800d64e:	f000 808d 	beq.w	800d76c <_dtoa_r+0x844>
 800d652:	f1c0 0220 	rsb	r2, r0, #32
 800d656:	2a04      	cmp	r2, #4
 800d658:	f340 8086 	ble.w	800d768 <_dtoa_r+0x840>
 800d65c:	f1c0 001c 	rsb	r0, r0, #28
 800d660:	9b05      	ldr	r3, [sp, #20]
 800d662:	4403      	add	r3, r0
 800d664:	9305      	str	r3, [sp, #20]
 800d666:	9b06      	ldr	r3, [sp, #24]
 800d668:	4403      	add	r3, r0
 800d66a:	4480      	add	r8, r0
 800d66c:	9306      	str	r3, [sp, #24]
 800d66e:	9b05      	ldr	r3, [sp, #20]
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd05      	ble.n	800d680 <_dtoa_r+0x758>
 800d674:	4629      	mov	r1, r5
 800d676:	461a      	mov	r2, r3
 800d678:	4630      	mov	r0, r6
 800d67a:	f000 fd31 	bl	800e0e0 <__lshift>
 800d67e:	4605      	mov	r5, r0
 800d680:	9b06      	ldr	r3, [sp, #24]
 800d682:	2b00      	cmp	r3, #0
 800d684:	dd05      	ble.n	800d692 <_dtoa_r+0x76a>
 800d686:	4621      	mov	r1, r4
 800d688:	461a      	mov	r2, r3
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 fd28 	bl	800e0e0 <__lshift>
 800d690:	4604      	mov	r4, r0
 800d692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d06b      	beq.n	800d770 <_dtoa_r+0x848>
 800d698:	4621      	mov	r1, r4
 800d69a:	4628      	mov	r0, r5
 800d69c:	f000 fd8c 	bl	800e1b8 <__mcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	da65      	bge.n	800d770 <_dtoa_r+0x848>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	220a      	movs	r2, #10
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f000 fb68 	bl	800dd80 <__multadd>
 800d6b0:	9b08      	ldr	r3, [sp, #32]
 800d6b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 8192 	beq.w	800d9e2 <_dtoa_r+0xaba>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	220a      	movs	r2, #10
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 fb5b 	bl	800dd80 <__multadd>
 800d6ca:	f1ba 0f00 	cmp.w	sl, #0
 800d6ce:	4607      	mov	r7, r0
 800d6d0:	f300 808e 	bgt.w	800d7f0 <_dtoa_r+0x8c8>
 800d6d4:	9b07      	ldr	r3, [sp, #28]
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	dc51      	bgt.n	800d77e <_dtoa_r+0x856>
 800d6da:	e089      	b.n	800d7f0 <_dtoa_r+0x8c8>
 800d6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d6e2:	e751      	b.n	800d588 <_dtoa_r+0x660>
 800d6e4:	f109 34ff 	add.w	r4, r9, #4294967295
 800d6e8:	42a3      	cmp	r3, r4
 800d6ea:	bfbf      	itttt	lt
 800d6ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d6ee:	1ae3      	sublt	r3, r4, r3
 800d6f0:	18d2      	addlt	r2, r2, r3
 800d6f2:	4613      	movlt	r3, r2
 800d6f4:	bfb7      	itett	lt
 800d6f6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d6f8:	1b1c      	subge	r4, r3, r4
 800d6fa:	4623      	movlt	r3, r4
 800d6fc:	2400      	movlt	r4, #0
 800d6fe:	f1b9 0f00 	cmp.w	r9, #0
 800d702:	bfb5      	itete	lt
 800d704:	9a05      	ldrlt	r2, [sp, #20]
 800d706:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d70a:	eba2 0809 	sublt.w	r8, r2, r9
 800d70e:	464a      	movge	r2, r9
 800d710:	bfb8      	it	lt
 800d712:	2200      	movlt	r2, #0
 800d714:	e73b      	b.n	800d58e <_dtoa_r+0x666>
 800d716:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d71a:	9f08      	ldr	r7, [sp, #32]
 800d71c:	461c      	mov	r4, r3
 800d71e:	e743      	b.n	800d5a8 <_dtoa_r+0x680>
 800d720:	461a      	mov	r2, r3
 800d722:	e76f      	b.n	800d604 <_dtoa_r+0x6dc>
 800d724:	9b07      	ldr	r3, [sp, #28]
 800d726:	2b01      	cmp	r3, #1
 800d728:	dc18      	bgt.n	800d75c <_dtoa_r+0x834>
 800d72a:	9b02      	ldr	r3, [sp, #8]
 800d72c:	b9b3      	cbnz	r3, 800d75c <_dtoa_r+0x834>
 800d72e:	9b03      	ldr	r3, [sp, #12]
 800d730:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d734:	b9a2      	cbnz	r2, 800d760 <_dtoa_r+0x838>
 800d736:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d73a:	0d12      	lsrs	r2, r2, #20
 800d73c:	0512      	lsls	r2, r2, #20
 800d73e:	b18a      	cbz	r2, 800d764 <_dtoa_r+0x83c>
 800d740:	9b05      	ldr	r3, [sp, #20]
 800d742:	3301      	adds	r3, #1
 800d744:	9305      	str	r3, [sp, #20]
 800d746:	9b06      	ldr	r3, [sp, #24]
 800d748:	3301      	adds	r3, #1
 800d74a:	9306      	str	r3, [sp, #24]
 800d74c:	2301      	movs	r3, #1
 800d74e:	930a      	str	r3, [sp, #40]	; 0x28
 800d750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d752:	2b00      	cmp	r3, #0
 800d754:	f47f af6f 	bne.w	800d636 <_dtoa_r+0x70e>
 800d758:	2001      	movs	r0, #1
 800d75a:	e774      	b.n	800d646 <_dtoa_r+0x71e>
 800d75c:	2300      	movs	r3, #0
 800d75e:	e7f6      	b.n	800d74e <_dtoa_r+0x826>
 800d760:	9b02      	ldr	r3, [sp, #8]
 800d762:	e7f4      	b.n	800d74e <_dtoa_r+0x826>
 800d764:	920a      	str	r2, [sp, #40]	; 0x28
 800d766:	e7f3      	b.n	800d750 <_dtoa_r+0x828>
 800d768:	d081      	beq.n	800d66e <_dtoa_r+0x746>
 800d76a:	4610      	mov	r0, r2
 800d76c:	301c      	adds	r0, #28
 800d76e:	e777      	b.n	800d660 <_dtoa_r+0x738>
 800d770:	f1b9 0f00 	cmp.w	r9, #0
 800d774:	dc37      	bgt.n	800d7e6 <_dtoa_r+0x8be>
 800d776:	9b07      	ldr	r3, [sp, #28]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	dd34      	ble.n	800d7e6 <_dtoa_r+0x8be>
 800d77c:	46ca      	mov	sl, r9
 800d77e:	f1ba 0f00 	cmp.w	sl, #0
 800d782:	d10d      	bne.n	800d7a0 <_dtoa_r+0x878>
 800d784:	4621      	mov	r1, r4
 800d786:	4653      	mov	r3, sl
 800d788:	2205      	movs	r2, #5
 800d78a:	4630      	mov	r0, r6
 800d78c:	f000 faf8 	bl	800dd80 <__multadd>
 800d790:	4601      	mov	r1, r0
 800d792:	4604      	mov	r4, r0
 800d794:	4628      	mov	r0, r5
 800d796:	f000 fd0f 	bl	800e1b8 <__mcmp>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	f73f adde 	bgt.w	800d35c <_dtoa_r+0x434>
 800d7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a2:	f8dd 8000 	ldr.w	r8, [sp]
 800d7a6:	ea6f 0b03 	mvn.w	fp, r3
 800d7aa:	f04f 0900 	mov.w	r9, #0
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f000 fac3 	bl	800dd3c <_Bfree>
 800d7b6:	2f00      	cmp	r7, #0
 800d7b8:	f43f aea7 	beq.w	800d50a <_dtoa_r+0x5e2>
 800d7bc:	f1b9 0f00 	cmp.w	r9, #0
 800d7c0:	d005      	beq.n	800d7ce <_dtoa_r+0x8a6>
 800d7c2:	45b9      	cmp	r9, r7
 800d7c4:	d003      	beq.n	800d7ce <_dtoa_r+0x8a6>
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f000 fab7 	bl	800dd3c <_Bfree>
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f000 fab3 	bl	800dd3c <_Bfree>
 800d7d6:	e698      	b.n	800d50a <_dtoa_r+0x5e2>
 800d7d8:	2400      	movs	r4, #0
 800d7da:	4627      	mov	r7, r4
 800d7dc:	e7e0      	b.n	800d7a0 <_dtoa_r+0x878>
 800d7de:	46bb      	mov	fp, r7
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	e5ba      	b.n	800d35c <_dtoa_r+0x434>
 800d7e6:	9b08      	ldr	r3, [sp, #32]
 800d7e8:	46ca      	mov	sl, r9
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 8100 	beq.w	800d9f0 <_dtoa_r+0xac8>
 800d7f0:	f1b8 0f00 	cmp.w	r8, #0
 800d7f4:	dd05      	ble.n	800d802 <_dtoa_r+0x8da>
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f000 fc70 	bl	800e0e0 <__lshift>
 800d800:	4607      	mov	r7, r0
 800d802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d804:	2b00      	cmp	r3, #0
 800d806:	d05d      	beq.n	800d8c4 <_dtoa_r+0x99c>
 800d808:	6879      	ldr	r1, [r7, #4]
 800d80a:	4630      	mov	r0, r6
 800d80c:	f000 fa56 	bl	800dcbc <_Balloc>
 800d810:	4680      	mov	r8, r0
 800d812:	b928      	cbnz	r0, 800d820 <_dtoa_r+0x8f8>
 800d814:	4b82      	ldr	r3, [pc, #520]	; (800da20 <_dtoa_r+0xaf8>)
 800d816:	4602      	mov	r2, r0
 800d818:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d81c:	f7ff bb9a 	b.w	800cf54 <_dtoa_r+0x2c>
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	3202      	adds	r2, #2
 800d824:	0092      	lsls	r2, r2, #2
 800d826:	f107 010c 	add.w	r1, r7, #12
 800d82a:	300c      	adds	r0, #12
 800d82c:	f7fe fc4c 	bl	800c0c8 <memcpy>
 800d830:	2201      	movs	r2, #1
 800d832:	4641      	mov	r1, r8
 800d834:	4630      	mov	r0, r6
 800d836:	f000 fc53 	bl	800e0e0 <__lshift>
 800d83a:	9b00      	ldr	r3, [sp, #0]
 800d83c:	3301      	adds	r3, #1
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	9b00      	ldr	r3, [sp, #0]
 800d842:	4453      	add	r3, sl
 800d844:	9309      	str	r3, [sp, #36]	; 0x24
 800d846:	9b02      	ldr	r3, [sp, #8]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	46b9      	mov	r9, r7
 800d84e:	9308      	str	r3, [sp, #32]
 800d850:	4607      	mov	r7, r0
 800d852:	9b05      	ldr	r3, [sp, #20]
 800d854:	4621      	mov	r1, r4
 800d856:	3b01      	subs	r3, #1
 800d858:	4628      	mov	r0, r5
 800d85a:	9302      	str	r3, [sp, #8]
 800d85c:	f7ff fad6 	bl	800ce0c <quorem>
 800d860:	4603      	mov	r3, r0
 800d862:	3330      	adds	r3, #48	; 0x30
 800d864:	9006      	str	r0, [sp, #24]
 800d866:	4649      	mov	r1, r9
 800d868:	4628      	mov	r0, r5
 800d86a:	930a      	str	r3, [sp, #40]	; 0x28
 800d86c:	f000 fca4 	bl	800e1b8 <__mcmp>
 800d870:	463a      	mov	r2, r7
 800d872:	4682      	mov	sl, r0
 800d874:	4621      	mov	r1, r4
 800d876:	4630      	mov	r0, r6
 800d878:	f000 fcba 	bl	800e1f0 <__mdiff>
 800d87c:	68c2      	ldr	r2, [r0, #12]
 800d87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d880:	4680      	mov	r8, r0
 800d882:	bb0a      	cbnz	r2, 800d8c8 <_dtoa_r+0x9a0>
 800d884:	4601      	mov	r1, r0
 800d886:	4628      	mov	r0, r5
 800d888:	f000 fc96 	bl	800e1b8 <__mcmp>
 800d88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88e:	4602      	mov	r2, r0
 800d890:	4641      	mov	r1, r8
 800d892:	4630      	mov	r0, r6
 800d894:	920e      	str	r2, [sp, #56]	; 0x38
 800d896:	930a      	str	r3, [sp, #40]	; 0x28
 800d898:	f000 fa50 	bl	800dd3c <_Bfree>
 800d89c:	9b07      	ldr	r3, [sp, #28]
 800d89e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d8a4:	ea43 0102 	orr.w	r1, r3, r2
 800d8a8:	9b08      	ldr	r3, [sp, #32]
 800d8aa:	430b      	orrs	r3, r1
 800d8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ae:	d10d      	bne.n	800d8cc <_dtoa_r+0x9a4>
 800d8b0:	2b39      	cmp	r3, #57	; 0x39
 800d8b2:	d029      	beq.n	800d908 <_dtoa_r+0x9e0>
 800d8b4:	f1ba 0f00 	cmp.w	sl, #0
 800d8b8:	dd01      	ble.n	800d8be <_dtoa_r+0x996>
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	3331      	adds	r3, #49	; 0x31
 800d8be:	9a02      	ldr	r2, [sp, #8]
 800d8c0:	7013      	strb	r3, [r2, #0]
 800d8c2:	e774      	b.n	800d7ae <_dtoa_r+0x886>
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	e7b8      	b.n	800d83a <_dtoa_r+0x912>
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	e7e1      	b.n	800d890 <_dtoa_r+0x968>
 800d8cc:	f1ba 0f00 	cmp.w	sl, #0
 800d8d0:	db06      	blt.n	800d8e0 <_dtoa_r+0x9b8>
 800d8d2:	9907      	ldr	r1, [sp, #28]
 800d8d4:	ea41 0a0a 	orr.w	sl, r1, sl
 800d8d8:	9908      	ldr	r1, [sp, #32]
 800d8da:	ea5a 0101 	orrs.w	r1, sl, r1
 800d8de:	d120      	bne.n	800d922 <_dtoa_r+0x9fa>
 800d8e0:	2a00      	cmp	r2, #0
 800d8e2:	ddec      	ble.n	800d8be <_dtoa_r+0x996>
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	9305      	str	r3, [sp, #20]
 800d8ec:	f000 fbf8 	bl	800e0e0 <__lshift>
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	f000 fc60 	bl	800e1b8 <__mcmp>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	dc02      	bgt.n	800d904 <_dtoa_r+0x9dc>
 800d8fe:	d1de      	bne.n	800d8be <_dtoa_r+0x996>
 800d900:	07da      	lsls	r2, r3, #31
 800d902:	d5dc      	bpl.n	800d8be <_dtoa_r+0x996>
 800d904:	2b39      	cmp	r3, #57	; 0x39
 800d906:	d1d8      	bne.n	800d8ba <_dtoa_r+0x992>
 800d908:	9a02      	ldr	r2, [sp, #8]
 800d90a:	2339      	movs	r3, #57	; 0x39
 800d90c:	7013      	strb	r3, [r2, #0]
 800d90e:	4643      	mov	r3, r8
 800d910:	4698      	mov	r8, r3
 800d912:	3b01      	subs	r3, #1
 800d914:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d918:	2a39      	cmp	r2, #57	; 0x39
 800d91a:	d051      	beq.n	800d9c0 <_dtoa_r+0xa98>
 800d91c:	3201      	adds	r2, #1
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	e745      	b.n	800d7ae <_dtoa_r+0x886>
 800d922:	2a00      	cmp	r2, #0
 800d924:	dd03      	ble.n	800d92e <_dtoa_r+0xa06>
 800d926:	2b39      	cmp	r3, #57	; 0x39
 800d928:	d0ee      	beq.n	800d908 <_dtoa_r+0x9e0>
 800d92a:	3301      	adds	r3, #1
 800d92c:	e7c7      	b.n	800d8be <_dtoa_r+0x996>
 800d92e:	9a05      	ldr	r2, [sp, #20]
 800d930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d932:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d936:	428a      	cmp	r2, r1
 800d938:	d02b      	beq.n	800d992 <_dtoa_r+0xa6a>
 800d93a:	4629      	mov	r1, r5
 800d93c:	2300      	movs	r3, #0
 800d93e:	220a      	movs	r2, #10
 800d940:	4630      	mov	r0, r6
 800d942:	f000 fa1d 	bl	800dd80 <__multadd>
 800d946:	45b9      	cmp	r9, r7
 800d948:	4605      	mov	r5, r0
 800d94a:	f04f 0300 	mov.w	r3, #0
 800d94e:	f04f 020a 	mov.w	r2, #10
 800d952:	4649      	mov	r1, r9
 800d954:	4630      	mov	r0, r6
 800d956:	d107      	bne.n	800d968 <_dtoa_r+0xa40>
 800d958:	f000 fa12 	bl	800dd80 <__multadd>
 800d95c:	4681      	mov	r9, r0
 800d95e:	4607      	mov	r7, r0
 800d960:	9b05      	ldr	r3, [sp, #20]
 800d962:	3301      	adds	r3, #1
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	e774      	b.n	800d852 <_dtoa_r+0x92a>
 800d968:	f000 fa0a 	bl	800dd80 <__multadd>
 800d96c:	4639      	mov	r1, r7
 800d96e:	4681      	mov	r9, r0
 800d970:	2300      	movs	r3, #0
 800d972:	220a      	movs	r2, #10
 800d974:	4630      	mov	r0, r6
 800d976:	f000 fa03 	bl	800dd80 <__multadd>
 800d97a:	4607      	mov	r7, r0
 800d97c:	e7f0      	b.n	800d960 <_dtoa_r+0xa38>
 800d97e:	f1ba 0f00 	cmp.w	sl, #0
 800d982:	9a00      	ldr	r2, [sp, #0]
 800d984:	bfcc      	ite	gt
 800d986:	46d0      	movgt	r8, sl
 800d988:	f04f 0801 	movle.w	r8, #1
 800d98c:	4490      	add	r8, r2
 800d98e:	f04f 0900 	mov.w	r9, #0
 800d992:	4629      	mov	r1, r5
 800d994:	2201      	movs	r2, #1
 800d996:	4630      	mov	r0, r6
 800d998:	9302      	str	r3, [sp, #8]
 800d99a:	f000 fba1 	bl	800e0e0 <__lshift>
 800d99e:	4621      	mov	r1, r4
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	f000 fc09 	bl	800e1b8 <__mcmp>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	dcb1      	bgt.n	800d90e <_dtoa_r+0x9e6>
 800d9aa:	d102      	bne.n	800d9b2 <_dtoa_r+0xa8a>
 800d9ac:	9b02      	ldr	r3, [sp, #8]
 800d9ae:	07db      	lsls	r3, r3, #31
 800d9b0:	d4ad      	bmi.n	800d90e <_dtoa_r+0x9e6>
 800d9b2:	4643      	mov	r3, r8
 800d9b4:	4698      	mov	r8, r3
 800d9b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9ba:	2a30      	cmp	r2, #48	; 0x30
 800d9bc:	d0fa      	beq.n	800d9b4 <_dtoa_r+0xa8c>
 800d9be:	e6f6      	b.n	800d7ae <_dtoa_r+0x886>
 800d9c0:	9a00      	ldr	r2, [sp, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d1a4      	bne.n	800d910 <_dtoa_r+0x9e8>
 800d9c6:	f10b 0b01 	add.w	fp, fp, #1
 800d9ca:	2331      	movs	r3, #49	; 0x31
 800d9cc:	e778      	b.n	800d8c0 <_dtoa_r+0x998>
 800d9ce:	4b15      	ldr	r3, [pc, #84]	; (800da24 <_dtoa_r+0xafc>)
 800d9d0:	f7ff bb12 	b.w	800cff8 <_dtoa_r+0xd0>
 800d9d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f47f aaee 	bne.w	800cfb8 <_dtoa_r+0x90>
 800d9dc:	4b12      	ldr	r3, [pc, #72]	; (800da28 <_dtoa_r+0xb00>)
 800d9de:	f7ff bb0b 	b.w	800cff8 <_dtoa_r+0xd0>
 800d9e2:	f1ba 0f00 	cmp.w	sl, #0
 800d9e6:	dc03      	bgt.n	800d9f0 <_dtoa_r+0xac8>
 800d9e8:	9b07      	ldr	r3, [sp, #28]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	f73f aec7 	bgt.w	800d77e <_dtoa_r+0x856>
 800d9f0:	f8dd 8000 	ldr.w	r8, [sp]
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f7ff fa08 	bl	800ce0c <quorem>
 800d9fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800da00:	f808 3b01 	strb.w	r3, [r8], #1
 800da04:	9a00      	ldr	r2, [sp, #0]
 800da06:	eba8 0202 	sub.w	r2, r8, r2
 800da0a:	4592      	cmp	sl, r2
 800da0c:	ddb7      	ble.n	800d97e <_dtoa_r+0xa56>
 800da0e:	4629      	mov	r1, r5
 800da10:	2300      	movs	r3, #0
 800da12:	220a      	movs	r2, #10
 800da14:	4630      	mov	r0, r6
 800da16:	f000 f9b3 	bl	800dd80 <__multadd>
 800da1a:	4605      	mov	r5, r0
 800da1c:	e7ea      	b.n	800d9f4 <_dtoa_r+0xacc>
 800da1e:	bf00      	nop
 800da20:	0800eacb 	.word	0x0800eacb
 800da24:	0800ea24 	.word	0x0800ea24
 800da28:	0800ea48 	.word	0x0800ea48

0800da2c <__sflush_r>:
 800da2c:	898a      	ldrh	r2, [r1, #12]
 800da2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da32:	4605      	mov	r5, r0
 800da34:	0710      	lsls	r0, r2, #28
 800da36:	460c      	mov	r4, r1
 800da38:	d458      	bmi.n	800daec <__sflush_r+0xc0>
 800da3a:	684b      	ldr	r3, [r1, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dc05      	bgt.n	800da4c <__sflush_r+0x20>
 800da40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da42:	2b00      	cmp	r3, #0
 800da44:	dc02      	bgt.n	800da4c <__sflush_r+0x20>
 800da46:	2000      	movs	r0, #0
 800da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da4e:	2e00      	cmp	r6, #0
 800da50:	d0f9      	beq.n	800da46 <__sflush_r+0x1a>
 800da52:	2300      	movs	r3, #0
 800da54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da58:	682f      	ldr	r7, [r5, #0]
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	d032      	beq.n	800dac4 <__sflush_r+0x98>
 800da5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	075a      	lsls	r2, r3, #29
 800da64:	d505      	bpl.n	800da72 <__sflush_r+0x46>
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	1ac0      	subs	r0, r0, r3
 800da6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da6c:	b10b      	cbz	r3, 800da72 <__sflush_r+0x46>
 800da6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da70:	1ac0      	subs	r0, r0, r3
 800da72:	2300      	movs	r3, #0
 800da74:	4602      	mov	r2, r0
 800da76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da78:	6a21      	ldr	r1, [r4, #32]
 800da7a:	4628      	mov	r0, r5
 800da7c:	47b0      	blx	r6
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	d106      	bne.n	800da92 <__sflush_r+0x66>
 800da84:	6829      	ldr	r1, [r5, #0]
 800da86:	291d      	cmp	r1, #29
 800da88:	d82c      	bhi.n	800dae4 <__sflush_r+0xb8>
 800da8a:	4a2a      	ldr	r2, [pc, #168]	; (800db34 <__sflush_r+0x108>)
 800da8c:	40ca      	lsrs	r2, r1
 800da8e:	07d6      	lsls	r6, r2, #31
 800da90:	d528      	bpl.n	800dae4 <__sflush_r+0xb8>
 800da92:	2200      	movs	r2, #0
 800da94:	6062      	str	r2, [r4, #4]
 800da96:	04d9      	lsls	r1, r3, #19
 800da98:	6922      	ldr	r2, [r4, #16]
 800da9a:	6022      	str	r2, [r4, #0]
 800da9c:	d504      	bpl.n	800daa8 <__sflush_r+0x7c>
 800da9e:	1c42      	adds	r2, r0, #1
 800daa0:	d101      	bne.n	800daa6 <__sflush_r+0x7a>
 800daa2:	682b      	ldr	r3, [r5, #0]
 800daa4:	b903      	cbnz	r3, 800daa8 <__sflush_r+0x7c>
 800daa6:	6560      	str	r0, [r4, #84]	; 0x54
 800daa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daaa:	602f      	str	r7, [r5, #0]
 800daac:	2900      	cmp	r1, #0
 800daae:	d0ca      	beq.n	800da46 <__sflush_r+0x1a>
 800dab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dab4:	4299      	cmp	r1, r3
 800dab6:	d002      	beq.n	800dabe <__sflush_r+0x92>
 800dab8:	4628      	mov	r0, r5
 800daba:	f7fe fb1b 	bl	800c0f4 <_free_r>
 800dabe:	2000      	movs	r0, #0
 800dac0:	6360      	str	r0, [r4, #52]	; 0x34
 800dac2:	e7c1      	b.n	800da48 <__sflush_r+0x1c>
 800dac4:	6a21      	ldr	r1, [r4, #32]
 800dac6:	2301      	movs	r3, #1
 800dac8:	4628      	mov	r0, r5
 800daca:	47b0      	blx	r6
 800dacc:	1c41      	adds	r1, r0, #1
 800dace:	d1c7      	bne.n	800da60 <__sflush_r+0x34>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0c4      	beq.n	800da60 <__sflush_r+0x34>
 800dad6:	2b1d      	cmp	r3, #29
 800dad8:	d001      	beq.n	800dade <__sflush_r+0xb2>
 800dada:	2b16      	cmp	r3, #22
 800dadc:	d101      	bne.n	800dae2 <__sflush_r+0xb6>
 800dade:	602f      	str	r7, [r5, #0]
 800dae0:	e7b1      	b.n	800da46 <__sflush_r+0x1a>
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dae8:	81a3      	strh	r3, [r4, #12]
 800daea:	e7ad      	b.n	800da48 <__sflush_r+0x1c>
 800daec:	690f      	ldr	r7, [r1, #16]
 800daee:	2f00      	cmp	r7, #0
 800daf0:	d0a9      	beq.n	800da46 <__sflush_r+0x1a>
 800daf2:	0793      	lsls	r3, r2, #30
 800daf4:	680e      	ldr	r6, [r1, #0]
 800daf6:	bf08      	it	eq
 800daf8:	694b      	ldreq	r3, [r1, #20]
 800dafa:	600f      	str	r7, [r1, #0]
 800dafc:	bf18      	it	ne
 800dafe:	2300      	movne	r3, #0
 800db00:	eba6 0807 	sub.w	r8, r6, r7
 800db04:	608b      	str	r3, [r1, #8]
 800db06:	f1b8 0f00 	cmp.w	r8, #0
 800db0a:	dd9c      	ble.n	800da46 <__sflush_r+0x1a>
 800db0c:	6a21      	ldr	r1, [r4, #32]
 800db0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db10:	4643      	mov	r3, r8
 800db12:	463a      	mov	r2, r7
 800db14:	4628      	mov	r0, r5
 800db16:	47b0      	blx	r6
 800db18:	2800      	cmp	r0, #0
 800db1a:	dc06      	bgt.n	800db2a <__sflush_r+0xfe>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	e78e      	b.n	800da48 <__sflush_r+0x1c>
 800db2a:	4407      	add	r7, r0
 800db2c:	eba8 0800 	sub.w	r8, r8, r0
 800db30:	e7e9      	b.n	800db06 <__sflush_r+0xda>
 800db32:	bf00      	nop
 800db34:	20400001 	.word	0x20400001

0800db38 <_fflush_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	690b      	ldr	r3, [r1, #16]
 800db3c:	4605      	mov	r5, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	b913      	cbnz	r3, 800db48 <_fflush_r+0x10>
 800db42:	2500      	movs	r5, #0
 800db44:	4628      	mov	r0, r5
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	b118      	cbz	r0, 800db52 <_fflush_r+0x1a>
 800db4a:	6983      	ldr	r3, [r0, #24]
 800db4c:	b90b      	cbnz	r3, 800db52 <_fflush_r+0x1a>
 800db4e:	f7fe f9ed 	bl	800bf2c <__sinit>
 800db52:	4b14      	ldr	r3, [pc, #80]	; (800dba4 <_fflush_r+0x6c>)
 800db54:	429c      	cmp	r4, r3
 800db56:	d11b      	bne.n	800db90 <_fflush_r+0x58>
 800db58:	686c      	ldr	r4, [r5, #4]
 800db5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0ef      	beq.n	800db42 <_fflush_r+0xa>
 800db62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db64:	07d0      	lsls	r0, r2, #31
 800db66:	d404      	bmi.n	800db72 <_fflush_r+0x3a>
 800db68:	0599      	lsls	r1, r3, #22
 800db6a:	d402      	bmi.n	800db72 <_fflush_r+0x3a>
 800db6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db6e:	f7fe faa0 	bl	800c0b2 <__retarget_lock_acquire_recursive>
 800db72:	4628      	mov	r0, r5
 800db74:	4621      	mov	r1, r4
 800db76:	f7ff ff59 	bl	800da2c <__sflush_r>
 800db7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db7c:	07da      	lsls	r2, r3, #31
 800db7e:	4605      	mov	r5, r0
 800db80:	d4e0      	bmi.n	800db44 <_fflush_r+0xc>
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	059b      	lsls	r3, r3, #22
 800db86:	d4dd      	bmi.n	800db44 <_fflush_r+0xc>
 800db88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db8a:	f7fe fa93 	bl	800c0b4 <__retarget_lock_release_recursive>
 800db8e:	e7d9      	b.n	800db44 <_fflush_r+0xc>
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <_fflush_r+0x70>)
 800db92:	429c      	cmp	r4, r3
 800db94:	d101      	bne.n	800db9a <_fflush_r+0x62>
 800db96:	68ac      	ldr	r4, [r5, #8]
 800db98:	e7df      	b.n	800db5a <_fflush_r+0x22>
 800db9a:	4b04      	ldr	r3, [pc, #16]	; (800dbac <_fflush_r+0x74>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	bf08      	it	eq
 800dba0:	68ec      	ldreq	r4, [r5, #12]
 800dba2:	e7da      	b.n	800db5a <_fflush_r+0x22>
 800dba4:	0800e9d0 	.word	0x0800e9d0
 800dba8:	0800e9f0 	.word	0x0800e9f0
 800dbac:	0800e9b0 	.word	0x0800e9b0

0800dbb0 <_localeconv_r>:
 800dbb0:	4800      	ldr	r0, [pc, #0]	; (800dbb4 <_localeconv_r+0x4>)
 800dbb2:	4770      	bx	lr
 800dbb4:	24000168 	.word	0x24000168

0800dbb8 <_lseek_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	4d07      	ldr	r5, [pc, #28]	; (800dbd8 <_lseek_r+0x20>)
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	4608      	mov	r0, r1
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	602a      	str	r2, [r5, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f7f3 fc46 	bl	8001458 <_lseek>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d102      	bne.n	800dbd6 <_lseek_r+0x1e>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	b103      	cbz	r3, 800dbd6 <_lseek_r+0x1e>
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	bd38      	pop	{r3, r4, r5, pc}
 800dbd8:	24004f6c 	.word	0x24004f6c

0800dbdc <__swhatbuf_r>:
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	460e      	mov	r6, r1
 800dbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe4:	2900      	cmp	r1, #0
 800dbe6:	b096      	sub	sp, #88	; 0x58
 800dbe8:	4614      	mov	r4, r2
 800dbea:	461d      	mov	r5, r3
 800dbec:	da07      	bge.n	800dbfe <__swhatbuf_r+0x22>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	602b      	str	r3, [r5, #0]
 800dbf2:	89b3      	ldrh	r3, [r6, #12]
 800dbf4:	061a      	lsls	r2, r3, #24
 800dbf6:	d410      	bmi.n	800dc1a <__swhatbuf_r+0x3e>
 800dbf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbfc:	e00e      	b.n	800dc1c <__swhatbuf_r+0x40>
 800dbfe:	466a      	mov	r2, sp
 800dc00:	f000 fd84 	bl	800e70c <_fstat_r>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	dbf2      	blt.n	800dbee <__swhatbuf_r+0x12>
 800dc08:	9a01      	ldr	r2, [sp, #4]
 800dc0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc12:	425a      	negs	r2, r3
 800dc14:	415a      	adcs	r2, r3
 800dc16:	602a      	str	r2, [r5, #0]
 800dc18:	e7ee      	b.n	800dbf8 <__swhatbuf_r+0x1c>
 800dc1a:	2340      	movs	r3, #64	; 0x40
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	b016      	add	sp, #88	; 0x58
 800dc22:	bd70      	pop	{r4, r5, r6, pc}

0800dc24 <__smakebuf_r>:
 800dc24:	898b      	ldrh	r3, [r1, #12]
 800dc26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc28:	079d      	lsls	r5, r3, #30
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	d507      	bpl.n	800dc40 <__smakebuf_r+0x1c>
 800dc30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	2301      	movs	r3, #1
 800dc3a:	6163      	str	r3, [r4, #20]
 800dc3c:	b002      	add	sp, #8
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}
 800dc40:	ab01      	add	r3, sp, #4
 800dc42:	466a      	mov	r2, sp
 800dc44:	f7ff ffca 	bl	800dbdc <__swhatbuf_r>
 800dc48:	9900      	ldr	r1, [sp, #0]
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7fe faa1 	bl	800c194 <_malloc_r>
 800dc52:	b948      	cbnz	r0, 800dc68 <__smakebuf_r+0x44>
 800dc54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc58:	059a      	lsls	r2, r3, #22
 800dc5a:	d4ef      	bmi.n	800dc3c <__smakebuf_r+0x18>
 800dc5c:	f023 0303 	bic.w	r3, r3, #3
 800dc60:	f043 0302 	orr.w	r3, r3, #2
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	e7e3      	b.n	800dc30 <__smakebuf_r+0xc>
 800dc68:	4b0d      	ldr	r3, [pc, #52]	; (800dca0 <__smakebuf_r+0x7c>)
 800dc6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	6020      	str	r0, [r4, #0]
 800dc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc74:	81a3      	strh	r3, [r4, #12]
 800dc76:	9b00      	ldr	r3, [sp, #0]
 800dc78:	6163      	str	r3, [r4, #20]
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	6120      	str	r0, [r4, #16]
 800dc7e:	b15b      	cbz	r3, 800dc98 <__smakebuf_r+0x74>
 800dc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc84:	4630      	mov	r0, r6
 800dc86:	f000 fd53 	bl	800e730 <_isatty_r>
 800dc8a:	b128      	cbz	r0, 800dc98 <__smakebuf_r+0x74>
 800dc8c:	89a3      	ldrh	r3, [r4, #12]
 800dc8e:	f023 0303 	bic.w	r3, r3, #3
 800dc92:	f043 0301 	orr.w	r3, r3, #1
 800dc96:	81a3      	strh	r3, [r4, #12]
 800dc98:	89a0      	ldrh	r0, [r4, #12]
 800dc9a:	4305      	orrs	r5, r0
 800dc9c:	81a5      	strh	r5, [r4, #12]
 800dc9e:	e7cd      	b.n	800dc3c <__smakebuf_r+0x18>
 800dca0:	0800bec5 	.word	0x0800bec5

0800dca4 <__malloc_lock>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__malloc_lock+0x8>)
 800dca6:	f7fe ba04 	b.w	800c0b2 <__retarget_lock_acquire_recursive>
 800dcaa:	bf00      	nop
 800dcac:	24004f64 	.word	0x24004f64

0800dcb0 <__malloc_unlock>:
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <__malloc_unlock+0x8>)
 800dcb2:	f7fe b9ff 	b.w	800c0b4 <__retarget_lock_release_recursive>
 800dcb6:	bf00      	nop
 800dcb8:	24004f64 	.word	0x24004f64

0800dcbc <_Balloc>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	460d      	mov	r5, r1
 800dcc4:	b976      	cbnz	r6, 800dce4 <_Balloc+0x28>
 800dcc6:	2010      	movs	r0, #16
 800dcc8:	f7fe f9f6 	bl	800c0b8 <malloc>
 800dccc:	4602      	mov	r2, r0
 800dcce:	6260      	str	r0, [r4, #36]	; 0x24
 800dcd0:	b920      	cbnz	r0, 800dcdc <_Balloc+0x20>
 800dcd2:	4b18      	ldr	r3, [pc, #96]	; (800dd34 <_Balloc+0x78>)
 800dcd4:	4818      	ldr	r0, [pc, #96]	; (800dd38 <_Balloc+0x7c>)
 800dcd6:	2166      	movs	r1, #102	; 0x66
 800dcd8:	f000 fce8 	bl	800e6ac <__assert_func>
 800dcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dce0:	6006      	str	r6, [r0, #0]
 800dce2:	60c6      	str	r6, [r0, #12]
 800dce4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dce6:	68f3      	ldr	r3, [r6, #12]
 800dce8:	b183      	cbz	r3, 800dd0c <_Balloc+0x50>
 800dcea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcf2:	b9b8      	cbnz	r0, 800dd24 <_Balloc+0x68>
 800dcf4:	2101      	movs	r1, #1
 800dcf6:	fa01 f605 	lsl.w	r6, r1, r5
 800dcfa:	1d72      	adds	r2, r6, #5
 800dcfc:	0092      	lsls	r2, r2, #2
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 fb5a 	bl	800e3b8 <_calloc_r>
 800dd04:	b160      	cbz	r0, 800dd20 <_Balloc+0x64>
 800dd06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd0a:	e00e      	b.n	800dd2a <_Balloc+0x6e>
 800dd0c:	2221      	movs	r2, #33	; 0x21
 800dd0e:	2104      	movs	r1, #4
 800dd10:	4620      	mov	r0, r4
 800dd12:	f000 fb51 	bl	800e3b8 <_calloc_r>
 800dd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd18:	60f0      	str	r0, [r6, #12]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1e4      	bne.n	800dcea <_Balloc+0x2e>
 800dd20:	2000      	movs	r0, #0
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	6802      	ldr	r2, [r0, #0]
 800dd26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd30:	e7f7      	b.n	800dd22 <_Balloc+0x66>
 800dd32:	bf00      	nop
 800dd34:	0800ea55 	.word	0x0800ea55
 800dd38:	0800eadc 	.word	0x0800eadc

0800dd3c <_Bfree>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b976      	cbnz	r6, 800dd64 <_Bfree+0x28>
 800dd46:	2010      	movs	r0, #16
 800dd48:	f7fe f9b6 	bl	800c0b8 <malloc>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	6268      	str	r0, [r5, #36]	; 0x24
 800dd50:	b920      	cbnz	r0, 800dd5c <_Bfree+0x20>
 800dd52:	4b09      	ldr	r3, [pc, #36]	; (800dd78 <_Bfree+0x3c>)
 800dd54:	4809      	ldr	r0, [pc, #36]	; (800dd7c <_Bfree+0x40>)
 800dd56:	218a      	movs	r1, #138	; 0x8a
 800dd58:	f000 fca8 	bl	800e6ac <__assert_func>
 800dd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd60:	6006      	str	r6, [r0, #0]
 800dd62:	60c6      	str	r6, [r0, #12]
 800dd64:	b13c      	cbz	r4, 800dd76 <_Bfree+0x3a>
 800dd66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd68:	6862      	ldr	r2, [r4, #4]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd70:	6021      	str	r1, [r4, #0]
 800dd72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd76:	bd70      	pop	{r4, r5, r6, pc}
 800dd78:	0800ea55 	.word	0x0800ea55
 800dd7c:	0800eadc 	.word	0x0800eadc

0800dd80 <__multadd>:
 800dd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd84:	690e      	ldr	r6, [r1, #16]
 800dd86:	4607      	mov	r7, r0
 800dd88:	4698      	mov	r8, r3
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	f101 0014 	add.w	r0, r1, #20
 800dd90:	2300      	movs	r3, #0
 800dd92:	6805      	ldr	r5, [r0, #0]
 800dd94:	b2a9      	uxth	r1, r5
 800dd96:	fb02 8101 	mla	r1, r2, r1, r8
 800dd9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dd9e:	0c2d      	lsrs	r5, r5, #16
 800dda0:	fb02 c505 	mla	r5, r2, r5, ip
 800dda4:	b289      	uxth	r1, r1
 800dda6:	3301      	adds	r3, #1
 800dda8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ddac:	429e      	cmp	r6, r3
 800ddae:	f840 1b04 	str.w	r1, [r0], #4
 800ddb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ddb6:	dcec      	bgt.n	800dd92 <__multadd+0x12>
 800ddb8:	f1b8 0f00 	cmp.w	r8, #0
 800ddbc:	d022      	beq.n	800de04 <__multadd+0x84>
 800ddbe:	68a3      	ldr	r3, [r4, #8]
 800ddc0:	42b3      	cmp	r3, r6
 800ddc2:	dc19      	bgt.n	800ddf8 <__multadd+0x78>
 800ddc4:	6861      	ldr	r1, [r4, #4]
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	3101      	adds	r1, #1
 800ddca:	f7ff ff77 	bl	800dcbc <_Balloc>
 800ddce:	4605      	mov	r5, r0
 800ddd0:	b928      	cbnz	r0, 800ddde <__multadd+0x5e>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	4b0d      	ldr	r3, [pc, #52]	; (800de0c <__multadd+0x8c>)
 800ddd6:	480e      	ldr	r0, [pc, #56]	; (800de10 <__multadd+0x90>)
 800ddd8:	21b5      	movs	r1, #181	; 0xb5
 800ddda:	f000 fc67 	bl	800e6ac <__assert_func>
 800ddde:	6922      	ldr	r2, [r4, #16]
 800dde0:	3202      	adds	r2, #2
 800dde2:	f104 010c 	add.w	r1, r4, #12
 800dde6:	0092      	lsls	r2, r2, #2
 800dde8:	300c      	adds	r0, #12
 800ddea:	f7fe f96d 	bl	800c0c8 <memcpy>
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	f7ff ffa3 	bl	800dd3c <_Bfree>
 800ddf6:	462c      	mov	r4, r5
 800ddf8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ddfc:	3601      	adds	r6, #1
 800ddfe:	f8c3 8014 	str.w	r8, [r3, #20]
 800de02:	6126      	str	r6, [r4, #16]
 800de04:	4620      	mov	r0, r4
 800de06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0a:	bf00      	nop
 800de0c:	0800eacb 	.word	0x0800eacb
 800de10:	0800eadc 	.word	0x0800eadc

0800de14 <__hi0bits>:
 800de14:	0c03      	lsrs	r3, r0, #16
 800de16:	041b      	lsls	r3, r3, #16
 800de18:	b9d3      	cbnz	r3, 800de50 <__hi0bits+0x3c>
 800de1a:	0400      	lsls	r0, r0, #16
 800de1c:	2310      	movs	r3, #16
 800de1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800de22:	bf04      	itt	eq
 800de24:	0200      	lsleq	r0, r0, #8
 800de26:	3308      	addeq	r3, #8
 800de28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de2c:	bf04      	itt	eq
 800de2e:	0100      	lsleq	r0, r0, #4
 800de30:	3304      	addeq	r3, #4
 800de32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de36:	bf04      	itt	eq
 800de38:	0080      	lsleq	r0, r0, #2
 800de3a:	3302      	addeq	r3, #2
 800de3c:	2800      	cmp	r0, #0
 800de3e:	db05      	blt.n	800de4c <__hi0bits+0x38>
 800de40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800de44:	f103 0301 	add.w	r3, r3, #1
 800de48:	bf08      	it	eq
 800de4a:	2320      	moveq	r3, #32
 800de4c:	4618      	mov	r0, r3
 800de4e:	4770      	bx	lr
 800de50:	2300      	movs	r3, #0
 800de52:	e7e4      	b.n	800de1e <__hi0bits+0xa>

0800de54 <__lo0bits>:
 800de54:	6803      	ldr	r3, [r0, #0]
 800de56:	f013 0207 	ands.w	r2, r3, #7
 800de5a:	4601      	mov	r1, r0
 800de5c:	d00b      	beq.n	800de76 <__lo0bits+0x22>
 800de5e:	07da      	lsls	r2, r3, #31
 800de60:	d424      	bmi.n	800deac <__lo0bits+0x58>
 800de62:	0798      	lsls	r0, r3, #30
 800de64:	bf49      	itett	mi
 800de66:	085b      	lsrmi	r3, r3, #1
 800de68:	089b      	lsrpl	r3, r3, #2
 800de6a:	2001      	movmi	r0, #1
 800de6c:	600b      	strmi	r3, [r1, #0]
 800de6e:	bf5c      	itt	pl
 800de70:	600b      	strpl	r3, [r1, #0]
 800de72:	2002      	movpl	r0, #2
 800de74:	4770      	bx	lr
 800de76:	b298      	uxth	r0, r3
 800de78:	b9b0      	cbnz	r0, 800dea8 <__lo0bits+0x54>
 800de7a:	0c1b      	lsrs	r3, r3, #16
 800de7c:	2010      	movs	r0, #16
 800de7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800de82:	bf04      	itt	eq
 800de84:	0a1b      	lsreq	r3, r3, #8
 800de86:	3008      	addeq	r0, #8
 800de88:	071a      	lsls	r2, r3, #28
 800de8a:	bf04      	itt	eq
 800de8c:	091b      	lsreq	r3, r3, #4
 800de8e:	3004      	addeq	r0, #4
 800de90:	079a      	lsls	r2, r3, #30
 800de92:	bf04      	itt	eq
 800de94:	089b      	lsreq	r3, r3, #2
 800de96:	3002      	addeq	r0, #2
 800de98:	07da      	lsls	r2, r3, #31
 800de9a:	d403      	bmi.n	800dea4 <__lo0bits+0x50>
 800de9c:	085b      	lsrs	r3, r3, #1
 800de9e:	f100 0001 	add.w	r0, r0, #1
 800dea2:	d005      	beq.n	800deb0 <__lo0bits+0x5c>
 800dea4:	600b      	str	r3, [r1, #0]
 800dea6:	4770      	bx	lr
 800dea8:	4610      	mov	r0, r2
 800deaa:	e7e8      	b.n	800de7e <__lo0bits+0x2a>
 800deac:	2000      	movs	r0, #0
 800deae:	4770      	bx	lr
 800deb0:	2020      	movs	r0, #32
 800deb2:	4770      	bx	lr

0800deb4 <__i2b>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	460c      	mov	r4, r1
 800deb8:	2101      	movs	r1, #1
 800deba:	f7ff feff 	bl	800dcbc <_Balloc>
 800debe:	4602      	mov	r2, r0
 800dec0:	b928      	cbnz	r0, 800dece <__i2b+0x1a>
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <__i2b+0x24>)
 800dec4:	4805      	ldr	r0, [pc, #20]	; (800dedc <__i2b+0x28>)
 800dec6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800deca:	f000 fbef 	bl	800e6ac <__assert_func>
 800dece:	2301      	movs	r3, #1
 800ded0:	6144      	str	r4, [r0, #20]
 800ded2:	6103      	str	r3, [r0, #16]
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	bf00      	nop
 800ded8:	0800eacb 	.word	0x0800eacb
 800dedc:	0800eadc 	.word	0x0800eadc

0800dee0 <__multiply>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	4614      	mov	r4, r2
 800dee6:	690a      	ldr	r2, [r1, #16]
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	429a      	cmp	r2, r3
 800deec:	bfb8      	it	lt
 800deee:	460b      	movlt	r3, r1
 800def0:	460d      	mov	r5, r1
 800def2:	bfbc      	itt	lt
 800def4:	4625      	movlt	r5, r4
 800def6:	461c      	movlt	r4, r3
 800def8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800defc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800df00:	68ab      	ldr	r3, [r5, #8]
 800df02:	6869      	ldr	r1, [r5, #4]
 800df04:	eb0a 0709 	add.w	r7, sl, r9
 800df08:	42bb      	cmp	r3, r7
 800df0a:	b085      	sub	sp, #20
 800df0c:	bfb8      	it	lt
 800df0e:	3101      	addlt	r1, #1
 800df10:	f7ff fed4 	bl	800dcbc <_Balloc>
 800df14:	b930      	cbnz	r0, 800df24 <__multiply+0x44>
 800df16:	4602      	mov	r2, r0
 800df18:	4b42      	ldr	r3, [pc, #264]	; (800e024 <__multiply+0x144>)
 800df1a:	4843      	ldr	r0, [pc, #268]	; (800e028 <__multiply+0x148>)
 800df1c:	f240 115d 	movw	r1, #349	; 0x15d
 800df20:	f000 fbc4 	bl	800e6ac <__assert_func>
 800df24:	f100 0614 	add.w	r6, r0, #20
 800df28:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800df2c:	4633      	mov	r3, r6
 800df2e:	2200      	movs	r2, #0
 800df30:	4543      	cmp	r3, r8
 800df32:	d31e      	bcc.n	800df72 <__multiply+0x92>
 800df34:	f105 0c14 	add.w	ip, r5, #20
 800df38:	f104 0314 	add.w	r3, r4, #20
 800df3c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800df40:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800df44:	9202      	str	r2, [sp, #8]
 800df46:	ebac 0205 	sub.w	r2, ip, r5
 800df4a:	3a15      	subs	r2, #21
 800df4c:	f022 0203 	bic.w	r2, r2, #3
 800df50:	3204      	adds	r2, #4
 800df52:	f105 0115 	add.w	r1, r5, #21
 800df56:	458c      	cmp	ip, r1
 800df58:	bf38      	it	cc
 800df5a:	2204      	movcc	r2, #4
 800df5c:	9201      	str	r2, [sp, #4]
 800df5e:	9a02      	ldr	r2, [sp, #8]
 800df60:	9303      	str	r3, [sp, #12]
 800df62:	429a      	cmp	r2, r3
 800df64:	d808      	bhi.n	800df78 <__multiply+0x98>
 800df66:	2f00      	cmp	r7, #0
 800df68:	dc55      	bgt.n	800e016 <__multiply+0x136>
 800df6a:	6107      	str	r7, [r0, #16]
 800df6c:	b005      	add	sp, #20
 800df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df72:	f843 2b04 	str.w	r2, [r3], #4
 800df76:	e7db      	b.n	800df30 <__multiply+0x50>
 800df78:	f8b3 a000 	ldrh.w	sl, [r3]
 800df7c:	f1ba 0f00 	cmp.w	sl, #0
 800df80:	d020      	beq.n	800dfc4 <__multiply+0xe4>
 800df82:	f105 0e14 	add.w	lr, r5, #20
 800df86:	46b1      	mov	r9, r6
 800df88:	2200      	movs	r2, #0
 800df8a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800df8e:	f8d9 b000 	ldr.w	fp, [r9]
 800df92:	b2a1      	uxth	r1, r4
 800df94:	fa1f fb8b 	uxth.w	fp, fp
 800df98:	fb0a b101 	mla	r1, sl, r1, fp
 800df9c:	4411      	add	r1, r2
 800df9e:	f8d9 2000 	ldr.w	r2, [r9]
 800dfa2:	0c24      	lsrs	r4, r4, #16
 800dfa4:	0c12      	lsrs	r2, r2, #16
 800dfa6:	fb0a 2404 	mla	r4, sl, r4, r2
 800dfaa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dfae:	b289      	uxth	r1, r1
 800dfb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dfb4:	45f4      	cmp	ip, lr
 800dfb6:	f849 1b04 	str.w	r1, [r9], #4
 800dfba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dfbe:	d8e4      	bhi.n	800df8a <__multiply+0xaa>
 800dfc0:	9901      	ldr	r1, [sp, #4]
 800dfc2:	5072      	str	r2, [r6, r1]
 800dfc4:	9a03      	ldr	r2, [sp, #12]
 800dfc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dfca:	3304      	adds	r3, #4
 800dfcc:	f1b9 0f00 	cmp.w	r9, #0
 800dfd0:	d01f      	beq.n	800e012 <__multiply+0x132>
 800dfd2:	6834      	ldr	r4, [r6, #0]
 800dfd4:	f105 0114 	add.w	r1, r5, #20
 800dfd8:	46b6      	mov	lr, r6
 800dfda:	f04f 0a00 	mov.w	sl, #0
 800dfde:	880a      	ldrh	r2, [r1, #0]
 800dfe0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dfe4:	fb09 b202 	mla	r2, r9, r2, fp
 800dfe8:	4492      	add	sl, r2
 800dfea:	b2a4      	uxth	r4, r4
 800dfec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dff0:	f84e 4b04 	str.w	r4, [lr], #4
 800dff4:	f851 4b04 	ldr.w	r4, [r1], #4
 800dff8:	f8be 2000 	ldrh.w	r2, [lr]
 800dffc:	0c24      	lsrs	r4, r4, #16
 800dffe:	fb09 2404 	mla	r4, r9, r4, r2
 800e002:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e006:	458c      	cmp	ip, r1
 800e008:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e00c:	d8e7      	bhi.n	800dfde <__multiply+0xfe>
 800e00e:	9a01      	ldr	r2, [sp, #4]
 800e010:	50b4      	str	r4, [r6, r2]
 800e012:	3604      	adds	r6, #4
 800e014:	e7a3      	b.n	800df5e <__multiply+0x7e>
 800e016:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1a5      	bne.n	800df6a <__multiply+0x8a>
 800e01e:	3f01      	subs	r7, #1
 800e020:	e7a1      	b.n	800df66 <__multiply+0x86>
 800e022:	bf00      	nop
 800e024:	0800eacb 	.word	0x0800eacb
 800e028:	0800eadc 	.word	0x0800eadc

0800e02c <__pow5mult>:
 800e02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e030:	4615      	mov	r5, r2
 800e032:	f012 0203 	ands.w	r2, r2, #3
 800e036:	4606      	mov	r6, r0
 800e038:	460f      	mov	r7, r1
 800e03a:	d007      	beq.n	800e04c <__pow5mult+0x20>
 800e03c:	4c25      	ldr	r4, [pc, #148]	; (800e0d4 <__pow5mult+0xa8>)
 800e03e:	3a01      	subs	r2, #1
 800e040:	2300      	movs	r3, #0
 800e042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e046:	f7ff fe9b 	bl	800dd80 <__multadd>
 800e04a:	4607      	mov	r7, r0
 800e04c:	10ad      	asrs	r5, r5, #2
 800e04e:	d03d      	beq.n	800e0cc <__pow5mult+0xa0>
 800e050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e052:	b97c      	cbnz	r4, 800e074 <__pow5mult+0x48>
 800e054:	2010      	movs	r0, #16
 800e056:	f7fe f82f 	bl	800c0b8 <malloc>
 800e05a:	4602      	mov	r2, r0
 800e05c:	6270      	str	r0, [r6, #36]	; 0x24
 800e05e:	b928      	cbnz	r0, 800e06c <__pow5mult+0x40>
 800e060:	4b1d      	ldr	r3, [pc, #116]	; (800e0d8 <__pow5mult+0xac>)
 800e062:	481e      	ldr	r0, [pc, #120]	; (800e0dc <__pow5mult+0xb0>)
 800e064:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e068:	f000 fb20 	bl	800e6ac <__assert_func>
 800e06c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e070:	6004      	str	r4, [r0, #0]
 800e072:	60c4      	str	r4, [r0, #12]
 800e074:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e07c:	b94c      	cbnz	r4, 800e092 <__pow5mult+0x66>
 800e07e:	f240 2171 	movw	r1, #625	; 0x271
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff ff16 	bl	800deb4 <__i2b>
 800e088:	2300      	movs	r3, #0
 800e08a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e08e:	4604      	mov	r4, r0
 800e090:	6003      	str	r3, [r0, #0]
 800e092:	f04f 0900 	mov.w	r9, #0
 800e096:	07eb      	lsls	r3, r5, #31
 800e098:	d50a      	bpl.n	800e0b0 <__pow5mult+0x84>
 800e09a:	4639      	mov	r1, r7
 800e09c:	4622      	mov	r2, r4
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff ff1e 	bl	800dee0 <__multiply>
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	4680      	mov	r8, r0
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f7ff fe47 	bl	800dd3c <_Bfree>
 800e0ae:	4647      	mov	r7, r8
 800e0b0:	106d      	asrs	r5, r5, #1
 800e0b2:	d00b      	beq.n	800e0cc <__pow5mult+0xa0>
 800e0b4:	6820      	ldr	r0, [r4, #0]
 800e0b6:	b938      	cbnz	r0, 800e0c8 <__pow5mult+0x9c>
 800e0b8:	4622      	mov	r2, r4
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7ff ff0f 	bl	800dee0 <__multiply>
 800e0c2:	6020      	str	r0, [r4, #0]
 800e0c4:	f8c0 9000 	str.w	r9, [r0]
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	e7e4      	b.n	800e096 <__pow5mult+0x6a>
 800e0cc:	4638      	mov	r0, r7
 800e0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0d2:	bf00      	nop
 800e0d4:	0800ec30 	.word	0x0800ec30
 800e0d8:	0800ea55 	.word	0x0800ea55
 800e0dc:	0800eadc 	.word	0x0800eadc

0800e0e0 <__lshift>:
 800e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	6849      	ldr	r1, [r1, #4]
 800e0e8:	6923      	ldr	r3, [r4, #16]
 800e0ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0ee:	68a3      	ldr	r3, [r4, #8]
 800e0f0:	4607      	mov	r7, r0
 800e0f2:	4691      	mov	r9, r2
 800e0f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0f8:	f108 0601 	add.w	r6, r8, #1
 800e0fc:	42b3      	cmp	r3, r6
 800e0fe:	db0b      	blt.n	800e118 <__lshift+0x38>
 800e100:	4638      	mov	r0, r7
 800e102:	f7ff fddb 	bl	800dcbc <_Balloc>
 800e106:	4605      	mov	r5, r0
 800e108:	b948      	cbnz	r0, 800e11e <__lshift+0x3e>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4b28      	ldr	r3, [pc, #160]	; (800e1b0 <__lshift+0xd0>)
 800e10e:	4829      	ldr	r0, [pc, #164]	; (800e1b4 <__lshift+0xd4>)
 800e110:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e114:	f000 faca 	bl	800e6ac <__assert_func>
 800e118:	3101      	adds	r1, #1
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	e7ee      	b.n	800e0fc <__lshift+0x1c>
 800e11e:	2300      	movs	r3, #0
 800e120:	f100 0114 	add.w	r1, r0, #20
 800e124:	f100 0210 	add.w	r2, r0, #16
 800e128:	4618      	mov	r0, r3
 800e12a:	4553      	cmp	r3, sl
 800e12c:	db33      	blt.n	800e196 <__lshift+0xb6>
 800e12e:	6920      	ldr	r0, [r4, #16]
 800e130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e134:	f104 0314 	add.w	r3, r4, #20
 800e138:	f019 091f 	ands.w	r9, r9, #31
 800e13c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e144:	d02b      	beq.n	800e19e <__lshift+0xbe>
 800e146:	f1c9 0e20 	rsb	lr, r9, #32
 800e14a:	468a      	mov	sl, r1
 800e14c:	2200      	movs	r2, #0
 800e14e:	6818      	ldr	r0, [r3, #0]
 800e150:	fa00 f009 	lsl.w	r0, r0, r9
 800e154:	4302      	orrs	r2, r0
 800e156:	f84a 2b04 	str.w	r2, [sl], #4
 800e15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e15e:	459c      	cmp	ip, r3
 800e160:	fa22 f20e 	lsr.w	r2, r2, lr
 800e164:	d8f3      	bhi.n	800e14e <__lshift+0x6e>
 800e166:	ebac 0304 	sub.w	r3, ip, r4
 800e16a:	3b15      	subs	r3, #21
 800e16c:	f023 0303 	bic.w	r3, r3, #3
 800e170:	3304      	adds	r3, #4
 800e172:	f104 0015 	add.w	r0, r4, #21
 800e176:	4584      	cmp	ip, r0
 800e178:	bf38      	it	cc
 800e17a:	2304      	movcc	r3, #4
 800e17c:	50ca      	str	r2, [r1, r3]
 800e17e:	b10a      	cbz	r2, 800e184 <__lshift+0xa4>
 800e180:	f108 0602 	add.w	r6, r8, #2
 800e184:	3e01      	subs	r6, #1
 800e186:	4638      	mov	r0, r7
 800e188:	612e      	str	r6, [r5, #16]
 800e18a:	4621      	mov	r1, r4
 800e18c:	f7ff fdd6 	bl	800dd3c <_Bfree>
 800e190:	4628      	mov	r0, r5
 800e192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e196:	f842 0f04 	str.w	r0, [r2, #4]!
 800e19a:	3301      	adds	r3, #1
 800e19c:	e7c5      	b.n	800e12a <__lshift+0x4a>
 800e19e:	3904      	subs	r1, #4
 800e1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1a8:	459c      	cmp	ip, r3
 800e1aa:	d8f9      	bhi.n	800e1a0 <__lshift+0xc0>
 800e1ac:	e7ea      	b.n	800e184 <__lshift+0xa4>
 800e1ae:	bf00      	nop
 800e1b0:	0800eacb 	.word	0x0800eacb
 800e1b4:	0800eadc 	.word	0x0800eadc

0800e1b8 <__mcmp>:
 800e1b8:	b530      	push	{r4, r5, lr}
 800e1ba:	6902      	ldr	r2, [r0, #16]
 800e1bc:	690c      	ldr	r4, [r1, #16]
 800e1be:	1b12      	subs	r2, r2, r4
 800e1c0:	d10e      	bne.n	800e1e0 <__mcmp+0x28>
 800e1c2:	f100 0314 	add.w	r3, r0, #20
 800e1c6:	3114      	adds	r1, #20
 800e1c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e1cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e1d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e1d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e1d8:	42a5      	cmp	r5, r4
 800e1da:	d003      	beq.n	800e1e4 <__mcmp+0x2c>
 800e1dc:	d305      	bcc.n	800e1ea <__mcmp+0x32>
 800e1de:	2201      	movs	r2, #1
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	bd30      	pop	{r4, r5, pc}
 800e1e4:	4283      	cmp	r3, r0
 800e1e6:	d3f3      	bcc.n	800e1d0 <__mcmp+0x18>
 800e1e8:	e7fa      	b.n	800e1e0 <__mcmp+0x28>
 800e1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ee:	e7f7      	b.n	800e1e0 <__mcmp+0x28>

0800e1f0 <__mdiff>:
 800e1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	460c      	mov	r4, r1
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4617      	mov	r7, r2
 800e1fe:	f7ff ffdb 	bl	800e1b8 <__mcmp>
 800e202:	1e05      	subs	r5, r0, #0
 800e204:	d110      	bne.n	800e228 <__mdiff+0x38>
 800e206:	4629      	mov	r1, r5
 800e208:	4630      	mov	r0, r6
 800e20a:	f7ff fd57 	bl	800dcbc <_Balloc>
 800e20e:	b930      	cbnz	r0, 800e21e <__mdiff+0x2e>
 800e210:	4b39      	ldr	r3, [pc, #228]	; (800e2f8 <__mdiff+0x108>)
 800e212:	4602      	mov	r2, r0
 800e214:	f240 2132 	movw	r1, #562	; 0x232
 800e218:	4838      	ldr	r0, [pc, #224]	; (800e2fc <__mdiff+0x10c>)
 800e21a:	f000 fa47 	bl	800e6ac <__assert_func>
 800e21e:	2301      	movs	r3, #1
 800e220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	bfa4      	itt	ge
 800e22a:	463b      	movge	r3, r7
 800e22c:	4627      	movge	r7, r4
 800e22e:	4630      	mov	r0, r6
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	bfa6      	itte	ge
 800e234:	461c      	movge	r4, r3
 800e236:	2500      	movge	r5, #0
 800e238:	2501      	movlt	r5, #1
 800e23a:	f7ff fd3f 	bl	800dcbc <_Balloc>
 800e23e:	b920      	cbnz	r0, 800e24a <__mdiff+0x5a>
 800e240:	4b2d      	ldr	r3, [pc, #180]	; (800e2f8 <__mdiff+0x108>)
 800e242:	4602      	mov	r2, r0
 800e244:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e248:	e7e6      	b.n	800e218 <__mdiff+0x28>
 800e24a:	693e      	ldr	r6, [r7, #16]
 800e24c:	60c5      	str	r5, [r0, #12]
 800e24e:	6925      	ldr	r5, [r4, #16]
 800e250:	f107 0114 	add.w	r1, r7, #20
 800e254:	f104 0914 	add.w	r9, r4, #20
 800e258:	f100 0e14 	add.w	lr, r0, #20
 800e25c:	f107 0210 	add.w	r2, r7, #16
 800e260:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e264:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e268:	46f2      	mov	sl, lr
 800e26a:	2700      	movs	r7, #0
 800e26c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e270:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e274:	fa1f f883 	uxth.w	r8, r3
 800e278:	fa17 f78b 	uxtah	r7, r7, fp
 800e27c:	0c1b      	lsrs	r3, r3, #16
 800e27e:	eba7 0808 	sub.w	r8, r7, r8
 800e282:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e286:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e28a:	fa1f f888 	uxth.w	r8, r8
 800e28e:	141f      	asrs	r7, r3, #16
 800e290:	454d      	cmp	r5, r9
 800e292:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e296:	f84a 3b04 	str.w	r3, [sl], #4
 800e29a:	d8e7      	bhi.n	800e26c <__mdiff+0x7c>
 800e29c:	1b2b      	subs	r3, r5, r4
 800e29e:	3b15      	subs	r3, #21
 800e2a0:	f023 0303 	bic.w	r3, r3, #3
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	3415      	adds	r4, #21
 800e2a8:	42a5      	cmp	r5, r4
 800e2aa:	bf38      	it	cc
 800e2ac:	2304      	movcc	r3, #4
 800e2ae:	4419      	add	r1, r3
 800e2b0:	4473      	add	r3, lr
 800e2b2:	469e      	mov	lr, r3
 800e2b4:	460d      	mov	r5, r1
 800e2b6:	4565      	cmp	r5, ip
 800e2b8:	d30e      	bcc.n	800e2d8 <__mdiff+0xe8>
 800e2ba:	f10c 0203 	add.w	r2, ip, #3
 800e2be:	1a52      	subs	r2, r2, r1
 800e2c0:	f022 0203 	bic.w	r2, r2, #3
 800e2c4:	3903      	subs	r1, #3
 800e2c6:	458c      	cmp	ip, r1
 800e2c8:	bf38      	it	cc
 800e2ca:	2200      	movcc	r2, #0
 800e2cc:	441a      	add	r2, r3
 800e2ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e2d2:	b17b      	cbz	r3, 800e2f4 <__mdiff+0x104>
 800e2d4:	6106      	str	r6, [r0, #16]
 800e2d6:	e7a5      	b.n	800e224 <__mdiff+0x34>
 800e2d8:	f855 8b04 	ldr.w	r8, [r5], #4
 800e2dc:	fa17 f488 	uxtah	r4, r7, r8
 800e2e0:	1422      	asrs	r2, r4, #16
 800e2e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e2e6:	b2a4      	uxth	r4, r4
 800e2e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e2ec:	f84e 4b04 	str.w	r4, [lr], #4
 800e2f0:	1417      	asrs	r7, r2, #16
 800e2f2:	e7e0      	b.n	800e2b6 <__mdiff+0xc6>
 800e2f4:	3e01      	subs	r6, #1
 800e2f6:	e7ea      	b.n	800e2ce <__mdiff+0xde>
 800e2f8:	0800eacb 	.word	0x0800eacb
 800e2fc:	0800eadc 	.word	0x0800eadc

0800e300 <__d2b>:
 800e300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e304:	4689      	mov	r9, r1
 800e306:	2101      	movs	r1, #1
 800e308:	ec57 6b10 	vmov	r6, r7, d0
 800e30c:	4690      	mov	r8, r2
 800e30e:	f7ff fcd5 	bl	800dcbc <_Balloc>
 800e312:	4604      	mov	r4, r0
 800e314:	b930      	cbnz	r0, 800e324 <__d2b+0x24>
 800e316:	4602      	mov	r2, r0
 800e318:	4b25      	ldr	r3, [pc, #148]	; (800e3b0 <__d2b+0xb0>)
 800e31a:	4826      	ldr	r0, [pc, #152]	; (800e3b4 <__d2b+0xb4>)
 800e31c:	f240 310a 	movw	r1, #778	; 0x30a
 800e320:	f000 f9c4 	bl	800e6ac <__assert_func>
 800e324:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e32c:	bb35      	cbnz	r5, 800e37c <__d2b+0x7c>
 800e32e:	2e00      	cmp	r6, #0
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	d028      	beq.n	800e386 <__d2b+0x86>
 800e334:	4668      	mov	r0, sp
 800e336:	9600      	str	r6, [sp, #0]
 800e338:	f7ff fd8c 	bl	800de54 <__lo0bits>
 800e33c:	9900      	ldr	r1, [sp, #0]
 800e33e:	b300      	cbz	r0, 800e382 <__d2b+0x82>
 800e340:	9a01      	ldr	r2, [sp, #4]
 800e342:	f1c0 0320 	rsb	r3, r0, #32
 800e346:	fa02 f303 	lsl.w	r3, r2, r3
 800e34a:	430b      	orrs	r3, r1
 800e34c:	40c2      	lsrs	r2, r0
 800e34e:	6163      	str	r3, [r4, #20]
 800e350:	9201      	str	r2, [sp, #4]
 800e352:	9b01      	ldr	r3, [sp, #4]
 800e354:	61a3      	str	r3, [r4, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	bf14      	ite	ne
 800e35a:	2202      	movne	r2, #2
 800e35c:	2201      	moveq	r2, #1
 800e35e:	6122      	str	r2, [r4, #16]
 800e360:	b1d5      	cbz	r5, 800e398 <__d2b+0x98>
 800e362:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e366:	4405      	add	r5, r0
 800e368:	f8c9 5000 	str.w	r5, [r9]
 800e36c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e370:	f8c8 0000 	str.w	r0, [r8]
 800e374:	4620      	mov	r0, r4
 800e376:	b003      	add	sp, #12
 800e378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e380:	e7d5      	b.n	800e32e <__d2b+0x2e>
 800e382:	6161      	str	r1, [r4, #20]
 800e384:	e7e5      	b.n	800e352 <__d2b+0x52>
 800e386:	a801      	add	r0, sp, #4
 800e388:	f7ff fd64 	bl	800de54 <__lo0bits>
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	6163      	str	r3, [r4, #20]
 800e390:	2201      	movs	r2, #1
 800e392:	6122      	str	r2, [r4, #16]
 800e394:	3020      	adds	r0, #32
 800e396:	e7e3      	b.n	800e360 <__d2b+0x60>
 800e398:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e39c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e3a0:	f8c9 0000 	str.w	r0, [r9]
 800e3a4:	6918      	ldr	r0, [r3, #16]
 800e3a6:	f7ff fd35 	bl	800de14 <__hi0bits>
 800e3aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3ae:	e7df      	b.n	800e370 <__d2b+0x70>
 800e3b0:	0800eacb 	.word	0x0800eacb
 800e3b4:	0800eadc 	.word	0x0800eadc

0800e3b8 <_calloc_r>:
 800e3b8:	b513      	push	{r0, r1, r4, lr}
 800e3ba:	434a      	muls	r2, r1
 800e3bc:	4611      	mov	r1, r2
 800e3be:	9201      	str	r2, [sp, #4]
 800e3c0:	f7fd fee8 	bl	800c194 <_malloc_r>
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	b118      	cbz	r0, 800e3d0 <_calloc_r+0x18>
 800e3c8:	9a01      	ldr	r2, [sp, #4]
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	f7fd fe8a 	bl	800c0e4 <memset>
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	b002      	add	sp, #8
 800e3d4:	bd10      	pop	{r4, pc}

0800e3d6 <__sfputc_r>:
 800e3d6:	6893      	ldr	r3, [r2, #8]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	b410      	push	{r4}
 800e3de:	6093      	str	r3, [r2, #8]
 800e3e0:	da08      	bge.n	800e3f4 <__sfputc_r+0x1e>
 800e3e2:	6994      	ldr	r4, [r2, #24]
 800e3e4:	42a3      	cmp	r3, r4
 800e3e6:	db01      	blt.n	800e3ec <__sfputc_r+0x16>
 800e3e8:	290a      	cmp	r1, #10
 800e3ea:	d103      	bne.n	800e3f4 <__sfputc_r+0x1e>
 800e3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3f0:	f7fe bc2a 	b.w	800cc48 <__swbuf_r>
 800e3f4:	6813      	ldr	r3, [r2, #0]
 800e3f6:	1c58      	adds	r0, r3, #1
 800e3f8:	6010      	str	r0, [r2, #0]
 800e3fa:	7019      	strb	r1, [r3, #0]
 800e3fc:	4608      	mov	r0, r1
 800e3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <__sfputs_r>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	4614      	mov	r4, r2
 800e40c:	18d5      	adds	r5, r2, r3
 800e40e:	42ac      	cmp	r4, r5
 800e410:	d101      	bne.n	800e416 <__sfputs_r+0x12>
 800e412:	2000      	movs	r0, #0
 800e414:	e007      	b.n	800e426 <__sfputs_r+0x22>
 800e416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41a:	463a      	mov	r2, r7
 800e41c:	4630      	mov	r0, r6
 800e41e:	f7ff ffda 	bl	800e3d6 <__sfputc_r>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d1f3      	bne.n	800e40e <__sfputs_r+0xa>
 800e426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e428 <_vfiprintf_r>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	460d      	mov	r5, r1
 800e42e:	b09d      	sub	sp, #116	; 0x74
 800e430:	4614      	mov	r4, r2
 800e432:	4698      	mov	r8, r3
 800e434:	4606      	mov	r6, r0
 800e436:	b118      	cbz	r0, 800e440 <_vfiprintf_r+0x18>
 800e438:	6983      	ldr	r3, [r0, #24]
 800e43a:	b90b      	cbnz	r3, 800e440 <_vfiprintf_r+0x18>
 800e43c:	f7fd fd76 	bl	800bf2c <__sinit>
 800e440:	4b89      	ldr	r3, [pc, #548]	; (800e668 <_vfiprintf_r+0x240>)
 800e442:	429d      	cmp	r5, r3
 800e444:	d11b      	bne.n	800e47e <_vfiprintf_r+0x56>
 800e446:	6875      	ldr	r5, [r6, #4]
 800e448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e44a:	07d9      	lsls	r1, r3, #31
 800e44c:	d405      	bmi.n	800e45a <_vfiprintf_r+0x32>
 800e44e:	89ab      	ldrh	r3, [r5, #12]
 800e450:	059a      	lsls	r2, r3, #22
 800e452:	d402      	bmi.n	800e45a <_vfiprintf_r+0x32>
 800e454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e456:	f7fd fe2c 	bl	800c0b2 <__retarget_lock_acquire_recursive>
 800e45a:	89ab      	ldrh	r3, [r5, #12]
 800e45c:	071b      	lsls	r3, r3, #28
 800e45e:	d501      	bpl.n	800e464 <_vfiprintf_r+0x3c>
 800e460:	692b      	ldr	r3, [r5, #16]
 800e462:	b9eb      	cbnz	r3, 800e4a0 <_vfiprintf_r+0x78>
 800e464:	4629      	mov	r1, r5
 800e466:	4630      	mov	r0, r6
 800e468:	f7fe fc52 	bl	800cd10 <__swsetup_r>
 800e46c:	b1c0      	cbz	r0, 800e4a0 <_vfiprintf_r+0x78>
 800e46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e470:	07dc      	lsls	r4, r3, #31
 800e472:	d50e      	bpl.n	800e492 <_vfiprintf_r+0x6a>
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	b01d      	add	sp, #116	; 0x74
 800e47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47e:	4b7b      	ldr	r3, [pc, #492]	; (800e66c <_vfiprintf_r+0x244>)
 800e480:	429d      	cmp	r5, r3
 800e482:	d101      	bne.n	800e488 <_vfiprintf_r+0x60>
 800e484:	68b5      	ldr	r5, [r6, #8]
 800e486:	e7df      	b.n	800e448 <_vfiprintf_r+0x20>
 800e488:	4b79      	ldr	r3, [pc, #484]	; (800e670 <_vfiprintf_r+0x248>)
 800e48a:	429d      	cmp	r5, r3
 800e48c:	bf08      	it	eq
 800e48e:	68f5      	ldreq	r5, [r6, #12]
 800e490:	e7da      	b.n	800e448 <_vfiprintf_r+0x20>
 800e492:	89ab      	ldrh	r3, [r5, #12]
 800e494:	0598      	lsls	r0, r3, #22
 800e496:	d4ed      	bmi.n	800e474 <_vfiprintf_r+0x4c>
 800e498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e49a:	f7fd fe0b 	bl	800c0b4 <__retarget_lock_release_recursive>
 800e49e:	e7e9      	b.n	800e474 <_vfiprintf_r+0x4c>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a4:	2320      	movs	r3, #32
 800e4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4ae:	2330      	movs	r3, #48	; 0x30
 800e4b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e674 <_vfiprintf_r+0x24c>
 800e4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4b8:	f04f 0901 	mov.w	r9, #1
 800e4bc:	4623      	mov	r3, r4
 800e4be:	469a      	mov	sl, r3
 800e4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c4:	b10a      	cbz	r2, 800e4ca <_vfiprintf_r+0xa2>
 800e4c6:	2a25      	cmp	r2, #37	; 0x25
 800e4c8:	d1f9      	bne.n	800e4be <_vfiprintf_r+0x96>
 800e4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ce:	d00b      	beq.n	800e4e8 <_vfiprintf_r+0xc0>
 800e4d0:	465b      	mov	r3, fp
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff ff94 	bl	800e404 <__sfputs_r>
 800e4dc:	3001      	adds	r0, #1
 800e4de:	f000 80aa 	beq.w	800e636 <_vfiprintf_r+0x20e>
 800e4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4e4:	445a      	add	r2, fp
 800e4e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f000 80a2 	beq.w	800e636 <_vfiprintf_r+0x20e>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4fc:	f10a 0a01 	add.w	sl, sl, #1
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e508:	931a      	str	r3, [sp, #104]	; 0x68
 800e50a:	4654      	mov	r4, sl
 800e50c:	2205      	movs	r2, #5
 800e50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e512:	4858      	ldr	r0, [pc, #352]	; (800e674 <_vfiprintf_r+0x24c>)
 800e514:	f7f1 feec 	bl	80002f0 <memchr>
 800e518:	9a04      	ldr	r2, [sp, #16]
 800e51a:	b9d8      	cbnz	r0, 800e554 <_vfiprintf_r+0x12c>
 800e51c:	06d1      	lsls	r1, r2, #27
 800e51e:	bf44      	itt	mi
 800e520:	2320      	movmi	r3, #32
 800e522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e526:	0713      	lsls	r3, r2, #28
 800e528:	bf44      	itt	mi
 800e52a:	232b      	movmi	r3, #43	; 0x2b
 800e52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e530:	f89a 3000 	ldrb.w	r3, [sl]
 800e534:	2b2a      	cmp	r3, #42	; 0x2a
 800e536:	d015      	beq.n	800e564 <_vfiprintf_r+0x13c>
 800e538:	9a07      	ldr	r2, [sp, #28]
 800e53a:	4654      	mov	r4, sl
 800e53c:	2000      	movs	r0, #0
 800e53e:	f04f 0c0a 	mov.w	ip, #10
 800e542:	4621      	mov	r1, r4
 800e544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e548:	3b30      	subs	r3, #48	; 0x30
 800e54a:	2b09      	cmp	r3, #9
 800e54c:	d94e      	bls.n	800e5ec <_vfiprintf_r+0x1c4>
 800e54e:	b1b0      	cbz	r0, 800e57e <_vfiprintf_r+0x156>
 800e550:	9207      	str	r2, [sp, #28]
 800e552:	e014      	b.n	800e57e <_vfiprintf_r+0x156>
 800e554:	eba0 0308 	sub.w	r3, r0, r8
 800e558:	fa09 f303 	lsl.w	r3, r9, r3
 800e55c:	4313      	orrs	r3, r2
 800e55e:	9304      	str	r3, [sp, #16]
 800e560:	46a2      	mov	sl, r4
 800e562:	e7d2      	b.n	800e50a <_vfiprintf_r+0xe2>
 800e564:	9b03      	ldr	r3, [sp, #12]
 800e566:	1d19      	adds	r1, r3, #4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	9103      	str	r1, [sp, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	bfbb      	ittet	lt
 800e570:	425b      	neglt	r3, r3
 800e572:	f042 0202 	orrlt.w	r2, r2, #2
 800e576:	9307      	strge	r3, [sp, #28]
 800e578:	9307      	strlt	r3, [sp, #28]
 800e57a:	bfb8      	it	lt
 800e57c:	9204      	strlt	r2, [sp, #16]
 800e57e:	7823      	ldrb	r3, [r4, #0]
 800e580:	2b2e      	cmp	r3, #46	; 0x2e
 800e582:	d10c      	bne.n	800e59e <_vfiprintf_r+0x176>
 800e584:	7863      	ldrb	r3, [r4, #1]
 800e586:	2b2a      	cmp	r3, #42	; 0x2a
 800e588:	d135      	bne.n	800e5f6 <_vfiprintf_r+0x1ce>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	1d1a      	adds	r2, r3, #4
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	9203      	str	r2, [sp, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	bfb8      	it	lt
 800e596:	f04f 33ff 	movlt.w	r3, #4294967295
 800e59a:	3402      	adds	r4, #2
 800e59c:	9305      	str	r3, [sp, #20]
 800e59e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e684 <_vfiprintf_r+0x25c>
 800e5a2:	7821      	ldrb	r1, [r4, #0]
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	4650      	mov	r0, sl
 800e5a8:	f7f1 fea2 	bl	80002f0 <memchr>
 800e5ac:	b140      	cbz	r0, 800e5c0 <_vfiprintf_r+0x198>
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	eba0 000a 	sub.w	r0, r0, sl
 800e5b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e5b8:	9b04      	ldr	r3, [sp, #16]
 800e5ba:	4303      	orrs	r3, r0
 800e5bc:	3401      	adds	r4, #1
 800e5be:	9304      	str	r3, [sp, #16]
 800e5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c4:	482c      	ldr	r0, [pc, #176]	; (800e678 <_vfiprintf_r+0x250>)
 800e5c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5ca:	2206      	movs	r2, #6
 800e5cc:	f7f1 fe90 	bl	80002f0 <memchr>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d03f      	beq.n	800e654 <_vfiprintf_r+0x22c>
 800e5d4:	4b29      	ldr	r3, [pc, #164]	; (800e67c <_vfiprintf_r+0x254>)
 800e5d6:	bb1b      	cbnz	r3, 800e620 <_vfiprintf_r+0x1f8>
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	3307      	adds	r3, #7
 800e5dc:	f023 0307 	bic.w	r3, r3, #7
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	9303      	str	r3, [sp, #12]
 800e5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5e6:	443b      	add	r3, r7
 800e5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ea:	e767      	b.n	800e4bc <_vfiprintf_r+0x94>
 800e5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	e7a5      	b.n	800e542 <_vfiprintf_r+0x11a>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	3401      	adds	r4, #1
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	f04f 0c0a 	mov.w	ip, #10
 800e602:	4620      	mov	r0, r4
 800e604:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e608:	3a30      	subs	r2, #48	; 0x30
 800e60a:	2a09      	cmp	r2, #9
 800e60c:	d903      	bls.n	800e616 <_vfiprintf_r+0x1ee>
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d0c5      	beq.n	800e59e <_vfiprintf_r+0x176>
 800e612:	9105      	str	r1, [sp, #20]
 800e614:	e7c3      	b.n	800e59e <_vfiprintf_r+0x176>
 800e616:	fb0c 2101 	mla	r1, ip, r1, r2
 800e61a:	4604      	mov	r4, r0
 800e61c:	2301      	movs	r3, #1
 800e61e:	e7f0      	b.n	800e602 <_vfiprintf_r+0x1da>
 800e620:	ab03      	add	r3, sp, #12
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	462a      	mov	r2, r5
 800e626:	4b16      	ldr	r3, [pc, #88]	; (800e680 <_vfiprintf_r+0x258>)
 800e628:	a904      	add	r1, sp, #16
 800e62a:	4630      	mov	r0, r6
 800e62c:	f7fd fe9c 	bl	800c368 <_printf_float>
 800e630:	4607      	mov	r7, r0
 800e632:	1c78      	adds	r0, r7, #1
 800e634:	d1d6      	bne.n	800e5e4 <_vfiprintf_r+0x1bc>
 800e636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e638:	07d9      	lsls	r1, r3, #31
 800e63a:	d405      	bmi.n	800e648 <_vfiprintf_r+0x220>
 800e63c:	89ab      	ldrh	r3, [r5, #12]
 800e63e:	059a      	lsls	r2, r3, #22
 800e640:	d402      	bmi.n	800e648 <_vfiprintf_r+0x220>
 800e642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e644:	f7fd fd36 	bl	800c0b4 <__retarget_lock_release_recursive>
 800e648:	89ab      	ldrh	r3, [r5, #12]
 800e64a:	065b      	lsls	r3, r3, #25
 800e64c:	f53f af12 	bmi.w	800e474 <_vfiprintf_r+0x4c>
 800e650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e652:	e711      	b.n	800e478 <_vfiprintf_r+0x50>
 800e654:	ab03      	add	r3, sp, #12
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	462a      	mov	r2, r5
 800e65a:	4b09      	ldr	r3, [pc, #36]	; (800e680 <_vfiprintf_r+0x258>)
 800e65c:	a904      	add	r1, sp, #16
 800e65e:	4630      	mov	r0, r6
 800e660:	f7fe f90e 	bl	800c880 <_printf_i>
 800e664:	e7e4      	b.n	800e630 <_vfiprintf_r+0x208>
 800e666:	bf00      	nop
 800e668:	0800e9d0 	.word	0x0800e9d0
 800e66c:	0800e9f0 	.word	0x0800e9f0
 800e670:	0800e9b0 	.word	0x0800e9b0
 800e674:	0800ec3c 	.word	0x0800ec3c
 800e678:	0800ec46 	.word	0x0800ec46
 800e67c:	0800c369 	.word	0x0800c369
 800e680:	0800e405 	.word	0x0800e405
 800e684:	0800ec42 	.word	0x0800ec42

0800e688 <_read_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	; (800e6a8 <_read_r+0x20>)
 800e68c:	4604      	mov	r4, r0
 800e68e:	4608      	mov	r0, r1
 800e690:	4611      	mov	r1, r2
 800e692:	2200      	movs	r2, #0
 800e694:	602a      	str	r2, [r5, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f7f2 fe9a 	bl	80013d0 <_read>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_read_r+0x1e>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_read_r+0x1e>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	24004f6c 	.word	0x24004f6c

0800e6ac <__assert_func>:
 800e6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ae:	4614      	mov	r4, r2
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	4b09      	ldr	r3, [pc, #36]	; (800e6d8 <__assert_func+0x2c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	68d8      	ldr	r0, [r3, #12]
 800e6ba:	b14c      	cbz	r4, 800e6d0 <__assert_func+0x24>
 800e6bc:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <__assert_func+0x30>)
 800e6be:	9100      	str	r1, [sp, #0]
 800e6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6c4:	4906      	ldr	r1, [pc, #24]	; (800e6e0 <__assert_func+0x34>)
 800e6c6:	462b      	mov	r3, r5
 800e6c8:	f000 f80e 	bl	800e6e8 <fiprintf>
 800e6cc:	f000 f85f 	bl	800e78e <abort>
 800e6d0:	4b04      	ldr	r3, [pc, #16]	; (800e6e4 <__assert_func+0x38>)
 800e6d2:	461c      	mov	r4, r3
 800e6d4:	e7f3      	b.n	800e6be <__assert_func+0x12>
 800e6d6:	bf00      	nop
 800e6d8:	24000014 	.word	0x24000014
 800e6dc:	0800ec4d 	.word	0x0800ec4d
 800e6e0:	0800ec5a 	.word	0x0800ec5a
 800e6e4:	0800ec88 	.word	0x0800ec88

0800e6e8 <fiprintf>:
 800e6e8:	b40e      	push	{r1, r2, r3}
 800e6ea:	b503      	push	{r0, r1, lr}
 800e6ec:	4601      	mov	r1, r0
 800e6ee:	ab03      	add	r3, sp, #12
 800e6f0:	4805      	ldr	r0, [pc, #20]	; (800e708 <fiprintf+0x20>)
 800e6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6f6:	6800      	ldr	r0, [r0, #0]
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	f7ff fe95 	bl	800e428 <_vfiprintf_r>
 800e6fe:	b002      	add	sp, #8
 800e700:	f85d eb04 	ldr.w	lr, [sp], #4
 800e704:	b003      	add	sp, #12
 800e706:	4770      	bx	lr
 800e708:	24000014 	.word	0x24000014

0800e70c <_fstat_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4d07      	ldr	r5, [pc, #28]	; (800e72c <_fstat_r+0x20>)
 800e710:	2300      	movs	r3, #0
 800e712:	4604      	mov	r4, r0
 800e714:	4608      	mov	r0, r1
 800e716:	4611      	mov	r1, r2
 800e718:	602b      	str	r3, [r5, #0]
 800e71a:	f7f2 fe82 	bl	8001422 <_fstat>
 800e71e:	1c43      	adds	r3, r0, #1
 800e720:	d102      	bne.n	800e728 <_fstat_r+0x1c>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	b103      	cbz	r3, 800e728 <_fstat_r+0x1c>
 800e726:	6023      	str	r3, [r4, #0]
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	bf00      	nop
 800e72c:	24004f6c 	.word	0x24004f6c

0800e730 <_isatty_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4d06      	ldr	r5, [pc, #24]	; (800e74c <_isatty_r+0x1c>)
 800e734:	2300      	movs	r3, #0
 800e736:	4604      	mov	r4, r0
 800e738:	4608      	mov	r0, r1
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	f7f2 fe81 	bl	8001442 <_isatty>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	d102      	bne.n	800e74a <_isatty_r+0x1a>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	b103      	cbz	r3, 800e74a <_isatty_r+0x1a>
 800e748:	6023      	str	r3, [r4, #0]
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	24004f6c 	.word	0x24004f6c

0800e750 <__ascii_mbtowc>:
 800e750:	b082      	sub	sp, #8
 800e752:	b901      	cbnz	r1, 800e756 <__ascii_mbtowc+0x6>
 800e754:	a901      	add	r1, sp, #4
 800e756:	b142      	cbz	r2, 800e76a <__ascii_mbtowc+0x1a>
 800e758:	b14b      	cbz	r3, 800e76e <__ascii_mbtowc+0x1e>
 800e75a:	7813      	ldrb	r3, [r2, #0]
 800e75c:	600b      	str	r3, [r1, #0]
 800e75e:	7812      	ldrb	r2, [r2, #0]
 800e760:	1e10      	subs	r0, r2, #0
 800e762:	bf18      	it	ne
 800e764:	2001      	movne	r0, #1
 800e766:	b002      	add	sp, #8
 800e768:	4770      	bx	lr
 800e76a:	4610      	mov	r0, r2
 800e76c:	e7fb      	b.n	800e766 <__ascii_mbtowc+0x16>
 800e76e:	f06f 0001 	mvn.w	r0, #1
 800e772:	e7f8      	b.n	800e766 <__ascii_mbtowc+0x16>

0800e774 <__ascii_wctomb>:
 800e774:	b149      	cbz	r1, 800e78a <__ascii_wctomb+0x16>
 800e776:	2aff      	cmp	r2, #255	; 0xff
 800e778:	bf85      	ittet	hi
 800e77a:	238a      	movhi	r3, #138	; 0x8a
 800e77c:	6003      	strhi	r3, [r0, #0]
 800e77e:	700a      	strbls	r2, [r1, #0]
 800e780:	f04f 30ff 	movhi.w	r0, #4294967295
 800e784:	bf98      	it	ls
 800e786:	2001      	movls	r0, #1
 800e788:	4770      	bx	lr
 800e78a:	4608      	mov	r0, r1
 800e78c:	4770      	bx	lr

0800e78e <abort>:
 800e78e:	b508      	push	{r3, lr}
 800e790:	2006      	movs	r0, #6
 800e792:	f000 f82b 	bl	800e7ec <raise>
 800e796:	2001      	movs	r0, #1
 800e798:	f7f2 fe10 	bl	80013bc <_exit>

0800e79c <_raise_r>:
 800e79c:	291f      	cmp	r1, #31
 800e79e:	b538      	push	{r3, r4, r5, lr}
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	d904      	bls.n	800e7b0 <_raise_r+0x14>
 800e7a6:	2316      	movs	r3, #22
 800e7a8:	6003      	str	r3, [r0, #0]
 800e7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7b2:	b112      	cbz	r2, 800e7ba <_raise_r+0x1e>
 800e7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b8:	b94b      	cbnz	r3, 800e7ce <_raise_r+0x32>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 f830 	bl	800e820 <_getpid_r>
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ca:	f000 b817 	b.w	800e7fc <_kill_r>
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d00a      	beq.n	800e7e8 <_raise_r+0x4c>
 800e7d2:	1c59      	adds	r1, r3, #1
 800e7d4:	d103      	bne.n	800e7de <_raise_r+0x42>
 800e7d6:	2316      	movs	r3, #22
 800e7d8:	6003      	str	r3, [r0, #0]
 800e7da:	2001      	movs	r0, #1
 800e7dc:	e7e7      	b.n	800e7ae <_raise_r+0x12>
 800e7de:	2400      	movs	r4, #0
 800e7e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	4798      	blx	r3
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e7e0      	b.n	800e7ae <_raise_r+0x12>

0800e7ec <raise>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	; (800e7f8 <raise+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f7ff bfd3 	b.w	800e79c <_raise_r>
 800e7f6:	bf00      	nop
 800e7f8:	24000014 	.word	0x24000014

0800e7fc <_kill_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	4d07      	ldr	r5, [pc, #28]	; (800e81c <_kill_r+0x20>)
 800e800:	2300      	movs	r3, #0
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	4611      	mov	r1, r2
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	f7f2 fdc7 	bl	800139c <_kill>
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	d102      	bne.n	800e818 <_kill_r+0x1c>
 800e812:	682b      	ldr	r3, [r5, #0]
 800e814:	b103      	cbz	r3, 800e818 <_kill_r+0x1c>
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	bd38      	pop	{r3, r4, r5, pc}
 800e81a:	bf00      	nop
 800e81c:	24004f6c 	.word	0x24004f6c

0800e820 <_getpid_r>:
 800e820:	f7f2 bdb4 	b.w	800138c <_getpid>

0800e824 <_init>:
 800e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e826:	bf00      	nop
 800e828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82a:	bc08      	pop	{r3}
 800e82c:	469e      	mov	lr, r3
 800e82e:	4770      	bx	lr

0800e830 <_fini>:
 800e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e832:	bf00      	nop
 800e834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e836:	bc08      	pop	{r3}
 800e838:	469e      	mov	lr, r3
 800e83a:	4770      	bx	lr
