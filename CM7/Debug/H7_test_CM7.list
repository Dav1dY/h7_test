
H7_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a20c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a40  0800a4b0  0800a4b0  0001a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef0  0800bef0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef8  0800bef8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800befc  0800befc  0001befc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800bf00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c08  24000078  0800bf78  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  24004c80  0800bf78  00024c80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038362  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c73  00000000  00000000  00058408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  0005e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc0  00000000  00000000  0005fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000433c0  00000000  00000000  000619d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245f2  00000000  00000000  000a4d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ab51d  00000000  00000000  000c938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002748a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008264  00000000  00000000  002748fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a494 	.word	0x0800a494

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800a494 	.word	0x0800a494

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <bh1750_init>:
 */

#include "bh.h"

bh1750_t* bh1750_init(uint8_t ADDR_PIN,I2C_HandleTypeDef* i2c_handle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  else{
	send_add = ADDR_L<<1;
	read_add = ADDR_L<<1;
  }
  */
  bh1750_t* sensor = (bh1750_t*)malloc(sizeof(bh1750_t));
 8000718:	2010      	movs	r0, #16
 800071a:	f009 fd6d 	bl	800a1f8 <malloc>
 800071e:	4603      	mov	r3, r0
 8000720:	60fb      	str	r3, [r7, #12]
  sensor->sensor_number = 0;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
  sensor->i2c_handle = i2c_handle;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	605a      	str	r2, [r3, #4]
  sensor->send_address = 0x46;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2246      	movs	r2, #70	; 0x46
 8000732:	721a      	strb	r2, [r3, #8]
  sensor->read_address = 0x47;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2247      	movs	r2, #71	; 0x47
 8000738:	725a      	strb	r2, [r3, #9]
  sensor->buffer[0]=0x00;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2200      	movs	r2, #0
 800073e:	729a      	strb	r2, [r3, #10]
  sensor->buffer[1]=0x00;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2200      	movs	r2, #0
 8000744:	72da      	strb	r2, [r3, #11]
  sensor->illuminance=0x00;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2200      	movs	r2, #0
 800074a:	819a      	strh	r2, [r3, #12]
  return sensor;
 800074c:	68fb      	ldr	r3, [r7, #12]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <bh1750_startup>:

HAL_StatusTypeDef bh1750_startup(bh1750_t* sensor){
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]

  if(bh1750_Send(sensor,POWER_ON)!=HAL_OK){
 800075e:	2101      	movs	r1, #1
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f813 	bl	800078c <bh1750_Send>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <bh1750_startup+0x1a>
    return HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	e009      	b.n	8000784 <bh1750_startup+0x2e>
  };
  //if(bh1750_Send(sensor,BH_RESET)!=HAL_OK){
    //return HAL_ERROR;
  //};
  if(bh1750_Send(sensor,CONTINUOUS_HRES)!=HAL_OK){
 8000770:	2110      	movs	r1, #16
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 f80a 	bl	800078c <bh1750_Send>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <bh1750_startup+0x2c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <bh1750_startup+0x2e>
  };

	//bh1750_Send(sensor,POWER_ON);
	//bh1750_Send(sensor,BH_RESET);
	//bh1750_Send(sensor,CONTINUOUS_HRES);
    return HAL_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <bh1750_Send>:

HAL_StatusTypeDef bh1750_Send(bh1750_t* sensor,uint8_t cmd){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
  if(HAL_I2C_Master_Transmit(sensor->i2c_handle, sensor->send_address, &cmd, 1, 10)!=HAL_OK){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6858      	ldr	r0, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7a1b      	ldrb	r3, [r3, #8]
 80007a0:	b299      	uxth	r1, r3
 80007a2:	1cfa      	adds	r2, r7, #3
 80007a4:	230a      	movs	r3, #10
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	f001 fc01 	bl	8001fb0 <HAL_I2C_Master_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <bh1750_Send+0x2c>
	return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <bh1750_Send+0x2e>
  }
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <bh1750_Read>:

HAL_StatusTypeDef bh1750_Read(bh1750_t* sensor)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af02      	add	r7, sp, #8
 80007c8:	6078      	str	r0, [r7, #4]
  sensor->buffer[0]=0;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	729a      	strb	r2, [r3, #10]
  sensor->buffer[1]=0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	72da      	strb	r2, [r3, #11]
  //uint8_t tmp[2];
  if(HAL_I2C_Master_Receive(sensor->i2c_handle, sensor->read_address, sensor->buffer, 2, 10)!=HAL_OK){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6858      	ldr	r0, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a5b      	ldrb	r3, [r3, #9]
 80007de:	b299      	uxth	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f103 020a 	add.w	r2, r3, #10
 80007e6:	230a      	movs	r3, #10
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	f001 fcd4 	bl	8002198 <HAL_I2C_Master_Receive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <bh1750_Read+0x38>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <bh1750_Read+0x3a>
  }
  //sensor->buffer[0]=tmp[0];
  //sensor->buffer[1]=tmp[1];
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <b1750_ReadFromBuffer>:

HAL_StatusTypeDef b1750_ReadFromBuffer(bh1750_t* sensor){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  sensor->illuminance=0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	819a      	strh	r2, [r3, #12]
  sensor->illuminance=sensor->buffer[0];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7a9b      	ldrb	r3, [r3, #10]
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	819a      	strh	r2, [r3, #12]
  sensor->illuminance=((sensor->illuminance<<8)|sensor->buffer[1]);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7adb      	ldrb	r3, [r3, #11]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	819a      	strh	r2, [r3, #12]
  //sensor->illuminance=sensor->illuminance/1.2;
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	0000      	movs	r0, r0
 8000844:	0000      	movs	r0, r0
	...

08000848 <send_illuminance>:

HAL_StatusTypeDef send_illuminance(bh1750_t* sensor,UART_HandleTypeDef* huart){
 8000848:	b580      	push	{r7, lr}
 800084a:	ed2d 8b04 	vpush	{d8-d9}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
  uint8_t data[6]={0};
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	2300      	movs	r3, #0
 800085c:	833b      	strh	r3, [r7, #24]
  float tmp = sensor->illuminance/1.2;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	899b      	ldrh	r3, [r3, #12]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800086a:	ed9f 5b51 	vldr	d5, [pc, #324]	; 80009b0 <send_illuminance+0x168>
 800086e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	edc7 7a07 	vstr	s15, [r7, #28]
  uint16_t lum = (uint16_t)tmp;
 800087a:	edd7 7a07 	vldr	s15, [r7, #28]
 800087e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000882:	ee17 3a90 	vmov	r3, s15
 8000886:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int lenth = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0;i<5;i++){
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
 8000890:	e057      	b.n	8000942 <send_illuminance+0xfa>
    data[i]=lum/(pow(10,(4-i)));
 8000892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	f1c3 0304 	rsb	r3, r3, #4
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008aa:	eeb0 1b47 	vmov.f64	d1, d7
 80008ae:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80008b2:	f009 f941 	bl	8009b38 <pow>
 80008b6:	eeb0 6b40 	vmov.f64	d6, d0
 80008ba:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80008be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	f107 0214 	add.w	r2, r7, #20
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
    lum=lum-data[i]*(pow(10,(4-i)));
 80008d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
 80008ee:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	f1c3 0304 	rsb	r3, r3, #4
 80008f8:	ee07 3a90 	vmov	s15, r3
 80008fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000900:	eeb0 1b47 	vmov.f64	d1, d7
 8000904:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000908:	f009 f916 	bl	8009b38 <pow>
 800090c:	eeb0 7b40 	vmov.f64	d7, d0
 8000910:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000914:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000918:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800091c:	ee17 3a90 	vmov	r3, s15
 8000920:	85fb      	strh	r3, [r7, #46]	; 0x2e
    data[i]=data[i]+48;
 8000922:	f107 0214 	add.w	r2, r7, #20
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	4413      	add	r3, r2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3330      	adds	r3, #48	; 0x30
 800092e:	b2d9      	uxtb	r1, r3
 8000930:	f107 0214 	add.w	r2, r7, #20
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	4413      	add	r3, r2
 8000938:	460a      	mov	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<5;i++){
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	3301      	adds	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	2b04      	cmp	r3, #4
 8000946:	dda4      	ble.n	8000892 <send_illuminance+0x4a>
  }
  for(int i=0;i<5;i++){
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
 800094c:	e00e      	b.n	800096c <send_illuminance+0x124>
    if(data[i]!=48){
 800094e:	f107 0214 	add.w	r2, r7, #20
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b30      	cmp	r3, #48	; 0x30
 800095a:	d004      	beq.n	8000966 <send_illuminance+0x11e>
      lenth = 5-i;
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	f1c3 0305 	rsb	r3, r3, #5
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8000964:	e005      	b.n	8000972 <send_illuminance+0x12a>
  for(int i=0;i<5;i++){
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	3301      	adds	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	2b04      	cmp	r3, #4
 8000970:	dded      	ble.n	800094e <send_illuminance+0x106>
    }
  }
  data[5]=0x0A;
 8000972:	230a      	movs	r3, #10
 8000974:	767b      	strb	r3, [r7, #25]
  if((HAL_UART_Transmit(huart,&data[5-lenth],lenth+1,10))!=HAL_OK){
 8000976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000978:	f1c3 0305 	rsb	r3, r3, #5
 800097c:	f107 0214 	add.w	r2, r7, #20
 8000980:	18d1      	adds	r1, r2, r3
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	b29b      	uxth	r3, r3
 8000986:	3301      	adds	r3, #1
 8000988:	b29a      	uxth	r2, r3
 800098a:	230a      	movs	r3, #10
 800098c:	68b8      	ldr	r0, [r7, #8]
 800098e:	f004 fec7 	bl	8005720 <HAL_UART_Transmit>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <send_illuminance+0x154>
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <send_illuminance+0x156>
  HAL_Delay(500);
  if((HAL_UART_Transmit(huart,&sensor->buffer[0],1,10))!=HAL_OK){
    return HAL_ERROR;
  }
*/
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	ecbd 8b04 	vpop	{d8-d9}
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	f3af 8000 	nop.w
 80009b0:	33333333 	.word	0x33333333
 80009b4:	3ff33333 	.word	0x3ff33333

080009b8 <key_init>:
 *      Author: David7_Yuan
 */
#include "key.h"

key_t* key_init(uint8_t number,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin, osSemaphoreId_t Semaphore_fall, osSemaphoreId_t Semaphore_rise, osSemaphoreId_t Semaphore_pressed, osEventFlagsId_t event_group, IRQn_Type IRQn_fall)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	4613      	mov	r3, r2
 80009c8:	81bb      	strh	r3, [r7, #12]
  key_t* button = (key_t*)malloc(sizeof(key_t));
 80009ca:	2028      	movs	r0, #40	; 0x28
 80009cc:	f009 fc14 	bl	800a1f8 <malloc>
 80009d0:	4603      	mov	r3, r0
 80009d2:	617b      	str	r3, [r7, #20]
  button->number=number;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	7bfa      	ldrb	r2, [r7, #15]
 80009d8:	701a      	strb	r2, [r3, #0]
  button->GPIOx=GPIOx;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	605a      	str	r2, [r3, #4]
  button->GPIO_Pin=GPIO_Pin;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	89ba      	ldrh	r2, [r7, #12]
 80009e4:	811a      	strh	r2, [r3, #8]
  button->Semaphore_fall=Semaphore_fall;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
  button->Semaphore_rise=Semaphore_rise;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	6a3a      	ldr	r2, [r7, #32]
 80009f0:	611a      	str	r2, [r3, #16]
  button->Semaphore_pressed=Semaphore_pressed;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f6:	615a      	str	r2, [r3, #20]
  button->key_event=event_group;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009fc:	619a      	str	r2, [r3, #24]
  button->IRQn_fall=IRQn_fall; //EXTI3_IRQn
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a02:	839a      	strh	r2, [r3, #28]
  button->state=Key_Release;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2201      	movs	r2, #1
 8000a08:	621a      	str	r2, [r3, #32]
  button->last_state=Key_Release;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  return button;
 8000a10:	697b      	ldr	r3, [r7, #20]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a26:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a28:	bf00      	nop
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <main+0x130>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <main+0x24>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	1e5a      	subs	r2, r3, #1
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dcf4      	bgt.n	8000a2a <main+0xe>
  if ( timeout < 0 )
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da01      	bge.n	8000a4a <main+0x2e>
  {
  Error_Handler();
 8000a46:	f000 faef 	bl	8001028 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration-------------- ------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4a:	f000 fda1 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4e:	f000 f89d 	bl	8000b8c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <main+0x130>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a3c      	ldr	r2, [pc, #240]	; (8000b4c <main+0x130>)
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <main+0x130>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f001 f9df 	bl	8001e34 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9f5 	bl	8001e68 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a82:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a84:	bf00      	nop
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x130>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <main+0x80>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dcf4      	bgt.n	8000a86 <main+0x6a>
if ( timeout < 0 )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da01      	bge.n	8000aa6 <main+0x8a>
{
Error_Handler();
 8000aa2:	f000 fac1 	bl	8001028 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 f9cd 	bl	8000e44 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aaa:	f000 f97f 	bl	8000dac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000aae:	f000 f8fd 	bl	8000cac <MX_I2C1_Init>
  MX_CRC_Init();
 8000ab2:	f000 f8d9 	bl	8000c68 <MX_CRC_Init>
  MX_I2C4_Init();
 8000ab6:	f000 f939 	bl	8000d2c <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aba:	f005 ffaf 	bl	8006a1c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of KeyPress_Sema_FromISR */
  KeyPress_Sema_FromISRHandle = osSemaphoreNew(1, 0, &KeyPress_Sema_FromISR_attributes);
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <main+0x134>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f006 f8e0 	bl	8006c88 <osSemaphoreNew>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <main+0x138>)
 8000acc:	6013      	str	r3, [r2, #0]

  /* creation of Key_Sema_AfterShake */
  Key_Sema_AfterShakeHandle = osSemaphoreNew(1, 0, &Key_Sema_AfterShake_attributes);
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <main+0x13c>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f006 f8d8 	bl	8006c88 <osSemaphoreNew>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <main+0x140>)
 8000adc:	6013      	str	r3, [r2, #0]

  /* creation of KeyRelease_Sema_FromISR */
  KeyRelease_Sema_FromISRHandle = osSemaphoreNew(1, 0, &KeyRelease_Sema_FromISR_attributes);
 8000ade:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <main+0x144>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f006 f8d0 	bl	8006c88 <osSemaphoreNew>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <main+0x148>)
 8000aec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <main+0x14c>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <main+0x150>)
 8000af4:	f005 ffdc 	bl	8006ab0 <osThreadNew>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <main+0x154>)
 8000afc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of key_pk3 */
  key_pk3Handle = osEventFlagsNew(&key_pk3_attributes);
 8000afe:	481d      	ldr	r0, [pc, #116]	; (8000b74 <main+0x158>)
 8000b00:	f006 f883 	bl	8006c0a <osEventFlagsNew>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <main+0x15c>)
 8000b08:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  joy_down_button = key_init(0,GPIOK,GPIO_PIN_3, KeyPress_Sema_FromISRHandle, KeyRelease_Sema_FromISRHandle, Key_Sema_AfterShakeHandle, key_pk3Handle, EXTI3_IRQn);
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <main+0x138>)
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <main+0x148>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <main+0x140>)
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	4918      	ldr	r1, [pc, #96]	; (8000b78 <main+0x15c>)
 8000b18:	6809      	ldr	r1, [r1, #0]
 8000b1a:	2409      	movs	r4, #9
 8000b1c:	9403      	str	r4, [sp, #12]
 8000b1e:	9102      	str	r1, [sp, #8]
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	4603      	mov	r3, r0
 8000b26:	2208      	movs	r2, #8
 8000b28:	4914      	ldr	r1, [pc, #80]	; (8000b7c <main+0x160>)
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ff44 	bl	80009b8 <key_init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <main+0x164>)
 8000b34:	6013      	str	r3, [r2, #0]
  sensor1 = bh1750_init(0,&hi2c4);
 8000b36:	4913      	ldr	r1, [pc, #76]	; (8000b84 <main+0x168>)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fde7 	bl	800070c <bh1750_init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <main+0x16c>)
 8000b42:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b44:	f005 ff8e 	bl	8006a64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <main+0x12c>
 8000b4a:	bf00      	nop
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	0800a570 	.word	0x0800a570
 8000b54:	24004bc8 	.word	0x24004bc8
 8000b58:	0800a580 	.word	0x0800a580
 8000b5c:	24004bdc 	.word	0x24004bdc
 8000b60:	0800a590 	.word	0x0800a590
 8000b64:	24004ac4 	.word	0x24004ac4
 8000b68:	0800a54c 	.word	0x0800a54c
 8000b6c:	08000fbd 	.word	0x08000fbd
 8000b70:	24004a70 	.word	0x24004a70
 8000b74:	0800a5a0 	.word	0x0800a5a0
 8000b78:	24004bd8 	.word	0x24004bd8
 8000b7c:	58022800 	.word	0x58022800
 8000b80:	24004ac0 	.word	0x24004ac0
 8000b84:	24004a74 	.word	0x24004a74
 8000b88:	24004bcc 	.word	0x24004bcc

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09c      	sub	sp, #112	; 0x70
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	224c      	movs	r2, #76	; 0x4c
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f009 fb42 	bl	800a224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f009 fb3c 	bl	800a224 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bac:	2004      	movs	r0, #4
 8000bae:	f001 fe61 	bl	8002874 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <SystemClock_Config+0xd4>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <SystemClock_Config+0xd4>)
 8000bbc:	f023 0301 	bic.w	r3, r3, #1
 8000bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <SystemClock_Config+0xd4>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <SystemClock_Config+0xd8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <SystemClock_Config+0xd8>)
 8000bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <SystemClock_Config+0xd8>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000be4:	bf00      	nop
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <SystemClock_Config+0xd8>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf2:	d1f8      	bne.n	8000be6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2340      	movs	r3, #64	; 0x40
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fe8d 	bl	8002928 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c14:	f000 fa08 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	233f      	movs	r3, #63	; 0x3f
 8000c1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fa83 	bl	8003148 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c48:	f000 f9ee 	bl	8001028 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f002 fc2e 	bl	80034b4 <HAL_RCC_MCOConfig>
}
 8000c58:	bf00      	nop
 8000c5a:	3770      	adds	r7, #112	; 0x70
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58000400 	.word	0x58000400
 8000c64:	58024800 	.word	0x58024800

08000c68 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <MX_CRC_Init+0x40>)
 8000c70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_CRC_Init+0x3c>)
 8000c92:	f000 fdc5 	bl	8001820 <HAL_CRC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c9c:	f000 f9c4 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24004b14 	.word	0x24004b14
 8000ca8:	58024c00 	.word	0x58024c00

08000cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <MX_I2C1_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <MX_I2C1_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000ce8:	f001 f8d2 	bl	8001e90 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 f999 	bl	8001028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000cfa:	f001 fd23 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 f990 	bl	8001028 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_I2C1_Init+0x74>)
 8000d0c:	f001 fd65 	bl	80027da <HAL_I2CEx_ConfigDigitalFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f987 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24004ac8 	.word	0x24004ac8
 8000d24:	40005400 	.word	0x40005400
 8000d28:	10707dbc 	.word	0x10707dbc

08000d2c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MX_I2C4_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <MX_I2C4_Init+0x7c>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d68:	f001 f892 	bl	8001e90 <HAL_I2C_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d72:	f000 f959 	bl	8001028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d7a:	f001 fce3 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d84:	f000 f950 	bl	8001028 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_I2C4_Init+0x74>)
 8000d8c:	f001 fd25 	bl	80027da <HAL_I2CEx_ConfigDigitalFilter>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 f947 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24004a74 	.word	0x24004a74
 8000da4:	58001c00 	.word	0x58001c00
 8000da8:	10707dbc 	.word	0x10707dbc

08000dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <MX_USART1_UART_Init+0x94>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df6:	f004 fc43 	bl	8005680 <HAL_UART_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e00:	f000 f912 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e08:	f005 fcfa 	bl	8006800 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f000 f909 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e1a:	f005 fd2f 	bl	800687c <HAL_UARTEx_SetRxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f000 f900 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e2a:	f005 fcb0 	bl	800678e <HAL_UARTEx_DisableFifoMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f000 f8f8 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24004b38 	.word	0x24004b38
 8000e40:	40011000 	.word	0x40011000

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a3b      	ldr	r2, [pc, #236]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_GPIO_Init+0x164>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <MX_GPIO_Init+0x168>)
 8000f34:	f000 ff26 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_GPIO_Init+0x16c>)
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <MX_GPIO_Init+0x170>)
 8000f4c:	f000 fd52 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <MX_GPIO_Init+0x174>)
 8000f6e:	f000 fd41 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000f72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_GPIO_Init+0x168>)
 8000f8c:	f000 fd32 	bl	80019f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	2009      	movs	r0, #9
 8000f96:	f000 fc1b 	bl	80017d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f9a:	2009      	movs	r0, #9
 8000f9c:	f000 fc32 	bl	8001804 <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	58022000 	.word	0x58022000
 8000fb0:	11310000 	.word	0x11310000
 8000fb4:	58022800 	.word	0x58022800
 8000fb8:	58020000 	.word	0x58020000

08000fbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  sensor1->i2c_state=bh1750_startup(sensor1);
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <StartDefaultTask+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <StartDefaultTask+0x40>)
 8000fca:	6814      	ldr	r4, [r2, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fbc2 	bl	8000756 <bh1750_startup>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73a3      	strb	r3, [r4, #14]
  uint8_t flag = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  osDelay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f005 fdfa 	bl	8006bd4 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	flag = uart_monitor(&huart1,flag,sensor1);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <StartDefaultTask+0x40>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <StartDefaultTask+0x44>)
 8000fea:	f000 fa51 	bl	8001490 <uart_monitor>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
    osDelay(1000);
 8000ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff6:	f005 fded 	bl	8006bd4 <osDelay>
	flag = uart_monitor(&huart1,flag,sensor1);
 8000ffa:	e7f1      	b.n	8000fe0 <StartDefaultTask+0x24>
 8000ffc:	24004bcc 	.word	0x24004bcc
 8001000:	24004b38 	.word	0x24004b38

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001016:	f000 faf7 	bl	8001608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x38>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_MspInit+0x38>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_MspInit+0x38>)
 800104c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	210f      	movs	r1, #15
 800105c:	f06f 0001 	mvn.w	r0, #1
 8001060:	f000 fbb6 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400

08001070 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_CRC_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10e      	bne.n	80010a0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 800108a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	58024c00 	.word	0x58024c00
 80010b0:	58024400 	.word	0x58024400

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0bc      	sub	sp, #240	; 0xf0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	22c0      	movs	r2, #192	; 0xc0
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 f8a5 	bl	800a224 <memset>
  if(hi2c->Instance==I2C1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a49      	ldr	r2, [pc, #292]	; (8001204 <HAL_I2C_MspInit+0x150>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d143      	bne.n	800116c <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e4:	2308      	movs	r3, #8
 80010e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fc60 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff ff93 	bl	8001028 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_I2C_MspInit+0x154>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a3f      	ldr	r2, [pc, #252]	; (8001208 <HAL_I2C_MspInit+0x154>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_I2C_MspInit+0x154>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001120:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113a:	2304      	movs	r3, #4
 800113c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001144:	4619      	mov	r1, r3
 8001146:	4831      	ldr	r0, [pc, #196]	; (800120c <HAL_I2C_MspInit+0x158>)
 8001148:	f000 fc54 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_I2C_MspInit+0x154>)
 800114e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_I2C_MspInit+0x154>)
 8001154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001158:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_I2C_MspInit+0x154>)
 800115e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800116a:	e047      	b.n	80011fc <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <HAL_I2C_MspInit+0x15c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d142      	bne.n	80011fc <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001176:	2310      	movs	r3, #16
 8001178:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fc17 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8001190:	f7ff ff4a 	bl	8001028 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_I2C_MspInit+0x154>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_I2C_MspInit+0x154>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_I2C_MspInit+0x154>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011d6:	4619      	mov	r1, r3
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <HAL_I2C_MspInit+0x160>)
 80011da:	f000 fc0b 	bl	80019f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_I2C_MspInit+0x154>)
 80011e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_I2C_MspInit+0x154>)
 80011e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_I2C_MspInit+0x154>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	37f0      	adds	r7, #240	; 0xf0
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40005400 	.word	0x40005400
 8001208:	58024400 	.word	0x58024400
 800120c:	58020400 	.word	0x58020400
 8001210:	58001c00 	.word	0x58001c00
 8001214:	58020c00 	.word	0x58020c00

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ba      	sub	sp, #232	; 0xe8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	22c0      	movs	r2, #192	; 0xc0
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 fff3 	bl	800a224 <memset>
  if(huart->Instance==USART1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001248:	2301      	movs	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fbae 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff fee1 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80012a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0xc8>)
 80012ca:	f000 fb93 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	37e8      	adds	r7, #232	; 0xe8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40011000 	.word	0x40011000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020000 	.word	0x58020000

080012e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d842      	bhi.n	8001378 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80012f2:	2200      	movs	r2, #0
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	2019      	movs	r0, #25
 80012f8:	f000 fa6a 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012fc:	2019      	movs	r0, #25
 80012fe:	f000 fa81 	bl	8001804 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <HAL_InitTick+0xac>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_InitTick+0xb0>)
 800130a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800130e:	4a21      	ldr	r2, [pc, #132]	; (8001394 <HAL_InitTick+0xb0>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_InitTick+0xb0>)
 800131a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001326:	f107 020c 	add.w	r2, r7, #12
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f002 faff 	bl	8003934 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001336:	f002 fae7 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 800133a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_InitTick+0xb4>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	3b01      	subs	r3, #1
 8001348:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_InitTick+0xb8>)
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_InitTick+0xbc>)
 800134e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0xb8>)
 8001352:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001356:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_InitTick+0xb8>)
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_InitTick+0xb8>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_InitTick+0xb8>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_InitTick+0xb8>)
 800136c:	f003 feb6 	bl	80050dc <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d107      	bne.n	8001386 <HAL_InitTick+0xa2>
 8001376:	e001      	b.n	800137c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e005      	b.n	8001388 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <HAL_InitTick+0xb8>)
 800137e:	f003 ff0f 	bl	80051a0 <HAL_TIM_Base_Start_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3738      	adds	r7, #56	; 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	24000008 	.word	0x24000008
 8001394:	58024400 	.word	0x58024400
 8001398:	431bde83 	.word	0x431bde83
 800139c:	24004be0 	.word	0x24004be0
 80013a0:	40010000 	.word	0x40010000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if(HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port,JOY_DOWN_Pin)==0){
 80013d4:	2108      	movs	r1, #8
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <EXTI3_IRQHandler+0x34>)
 80013d8:	f000 fcbc 	bl	8001d54 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <EXTI3_IRQHandler+0x1e>
  //if((GPIOK->IDR & GPIO_PIN_3)!=0){
    osSemaphoreRelease(KeyPress_Sema_FromISRHandle);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <EXTI3_IRQHandler+0x38>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fcd8 	bl	8006d9c <osSemaphoreRelease>
 80013ec:	e004      	b.n	80013f8 <EXTI3_IRQHandler+0x28>
  }
  else{
	osSemaphoreRelease(KeyRelease_Sema_FromISRHandle);
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <EXTI3_IRQHandler+0x3c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fcd2 	bl	8006d9c <osSemaphoreRelease>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 80013f8:	2008      	movs	r0, #8
 80013fa:	f000 fcf6 	bl	8001dea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58022800 	.word	0x58022800
 8001408:	24004bc8 	.word	0x24004bc8
 800140c:	24004ac4 	.word	0x24004ac4

08001410 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM1_UP_IRQHandler+0x10>)
 8001416:	f003 ff33 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24004be0 	.word	0x24004be0

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f008 fea4 	bl	800a1a0 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24080000 	.word	0x24080000
 8001484:	00001000 	.word	0x00001000
 8001488:	24000094 	.word	0x24000094
 800148c:	24004c80 	.word	0x24004c80

08001490 <uart_monitor>:
 *      Author: David7_Yuan
 */

#include "uart_transmit.h"

uint8_t uart_monitor(UART_HandleTypeDef* uart_handle,uint8_t flag, bh1750_t* sensor1){
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	460b      	mov	r3, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	72fb      	strb	r3, [r7, #11]
    if(flag==0){
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d123      	bne.n	80014ec <uart_monitor+0x5c>
    	uint8_t buffer[5]={0};
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	2300      	movs	r3, #0
 80014aa:	753b      	strb	r3, [r7, #20]
    	HAL_UART_Receive(uart_handle,(uint8_t*)&buffer,5,0xFFFFFFFF);
 80014ac:	f107 0110 	add.w	r1, r7, #16
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	2205      	movs	r2, #5
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f004 f9c8 	bl	800584c <HAL_UART_Receive>
    	if((buffer[0]==0x73)&&(buffer[1]==0x74)&&(buffer[2]==0x61)&&(buffer[3]==0x72)&&(buffer[4]==0x74)){
 80014bc:	7c3b      	ldrb	r3, [r7, #16]
 80014be:	2b73      	cmp	r3, #115	; 0x73
 80014c0:	d134      	bne.n	800152c <uart_monitor+0x9c>
 80014c2:	7c7b      	ldrb	r3, [r7, #17]
 80014c4:	2b74      	cmp	r3, #116	; 0x74
 80014c6:	d131      	bne.n	800152c <uart_monitor+0x9c>
 80014c8:	7cbb      	ldrb	r3, [r7, #18]
 80014ca:	2b61      	cmp	r3, #97	; 0x61
 80014cc:	d12e      	bne.n	800152c <uart_monitor+0x9c>
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	2b72      	cmp	r3, #114	; 0x72
 80014d2:	d12b      	bne.n	800152c <uart_monitor+0x9c>
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	2b74      	cmp	r3, #116	; 0x74
 80014d8:	d128      	bne.n	800152c <uart_monitor+0x9c>
    		HAL_UART_Transmit(uart_handle,(uint8_t*)&buffer,5,100);
 80014da:	f107 0110 	add.w	r1, r7, #16
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	2205      	movs	r2, #5
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f004 f91c 	bl	8005720 <HAL_UART_Transmit>
            return 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e020      	b.n	800152e <uart_monitor+0x9e>
    	}
    }
    else{
    	HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_12);
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <uart_monitor+0xa8>)
 80014f2:	f000 fc60 	bl	8001db6 <HAL_GPIO_TogglePin>
    	sensor1->i2c_state=bh1750_Read(sensor1);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff f963 	bl	80007c2 <bh1750_Read>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	739a      	strb	r2, [r3, #14]
        osDelay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f005 fb65 	bl	8006bd4 <osDelay>
        sensor1->i2c_state=b1750_ReadFromBuffer(sensor1);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff f97a 	bl	8000804 <b1750_ReadFromBuffer>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	739a      	strb	r2, [r3, #14]
        sensor1->i2c_state=send_illuminance(sensor1,uart_handle);
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff f994 	bl	8000848 <send_illuminance>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	739a      	strb	r2, [r3, #14]
        return 1;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <uart_monitor+0x9e>
    }
    return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58022000 	.word	0x58022000

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001540:	f7ff f84a 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156a:	f008 fe1f 	bl	800a1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff fa55 	bl	8000a1c <main>
  bx  lr
 8001572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001578:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800157c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001580:	0800bf00 	.word	0x0800bf00
  ldr r2, =_sbss
 8001584:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001588:	24004c80 	.word	0x24004c80

0800158c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC3_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 f90f 	bl	80017ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800159c:	f001 fff4 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_Init+0x68>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	4913      	ldr	r1, [pc, #76]	; (80015fc <HAL_Init+0x6c>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
 80015b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_Init+0x68>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_Init+0x6c>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_Init+0x70>)
 80015d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_Init+0x74>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015da:	200f      	movs	r0, #15
 80015dc:	f7ff fe82 	bl	80012e4 <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e002      	b.n	80015f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ea:	f7ff fd23 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	58024400 	.word	0x58024400
 80015fc:	0800a53c 	.word	0x0800a53c
 8001600:	24000004 	.word	0x24000004
 8001604:	24000000 	.word	0x24000000

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2400000c 	.word	0x2400000c
 800162c:	24004c2c 	.word	0x24004c2c

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	24004c2c 	.word	0x24004c2c

08001648 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetREVID+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0c1b      	lsrs	r3, r3, #16
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	5c001000 	.word	0x5c001000

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff4c 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017de:	f7ff ff63 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f7ff ffb3 	bl	8001754 <NVIC_EncodePriority>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff82 	bl	8001700 <__NVIC_SetPriority>
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff56 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e054      	b.n	80018dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7f5b      	ldrb	r3, [r3, #29]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc14 	bl	8001070 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_CRC_Init+0xc4>)
 800185c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0218 	bic.w	r2, r2, #24
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	e00c      	b.n	800188a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6899      	ldr	r1, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	461a      	mov	r2, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f834 	bl	80018e8 <HAL_CRCEx_Polynomial_Set>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e028      	b.n	80018dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	795b      	ldrb	r3, [r3, #5]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f04f 32ff 	mov.w	r2, #4294967295
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	e004      	b.n	80018a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6912      	ldr	r2, [r2, #16]
 80018a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	04c11db7 	.word	0x04c11db7

080018e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018f8:	231f      	movs	r3, #31
 80018fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018fc:	bf00      	nop
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	613a      	str	r2, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <HAL_CRCEx_Polynomial_Set+0x34>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_CRCEx_Polynomial_Set+0x16>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b18      	cmp	r3, #24
 8001920:	d846      	bhi.n	80019b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b1 	.word	0x080019b1
 8001930:	080019b1 	.word	0x080019b1
 8001934:	080019b1 	.word	0x080019b1
 8001938:	080019b1 	.word	0x080019b1
 800193c:	080019b1 	.word	0x080019b1
 8001940:	080019b1 	.word	0x080019b1
 8001944:	080019b1 	.word	0x080019b1
 8001948:	080019a5 	.word	0x080019a5
 800194c:	080019b1 	.word	0x080019b1
 8001950:	080019b1 	.word	0x080019b1
 8001954:	080019b1 	.word	0x080019b1
 8001958:	080019b1 	.word	0x080019b1
 800195c:	080019b1 	.word	0x080019b1
 8001960:	080019b1 	.word	0x080019b1
 8001964:	080019b1 	.word	0x080019b1
 8001968:	08001999 	.word	0x08001999
 800196c:	080019b1 	.word	0x080019b1
 8001970:	080019b1 	.word	0x080019b1
 8001974:	080019b1 	.word	0x080019b1
 8001978:	080019b1 	.word	0x080019b1
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019b1 	.word	0x080019b1
 8001984:	080019b1 	.word	0x080019b1
 8001988:	0800198d 	.word	0x0800198d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d913      	bls.n	80019ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001996:	e010      	b.n	80019ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b07      	cmp	r3, #7
 800199c:	d90f      	bls.n	80019be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019a2:	e00c      	b.n	80019be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d90b      	bls.n	80019c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019ae:	e008      	b.n	80019c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
      break;
 80019b4:	e006      	b.n	80019c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019b6:	bf00      	nop
 80019b8:	e004      	b.n	80019c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019ba:	bf00      	nop
 80019bc:	e002      	b.n	80019c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019be:	bf00      	nop
 80019c0:	e000      	b.n	80019c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10d      	bne.n	80019e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 0118 	bic.w	r1, r3, #24
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a02:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_GPIO_Init+0x234>)
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a06:	e194      	b.n	8001d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8186 	beq.w	8001d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d00b      	beq.n	8001a40 <HAL_GPIO_Init+0x4c>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d007      	beq.n	8001a40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	2b11      	cmp	r3, #17
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0xee>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d123      	bne.n	8001b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	69b9      	ldr	r1, [r7, #24]
 8001b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0203 	and.w	r2, r3, #3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80e0 	beq.w	8001d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b72:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_GPIO_Init+0x23c>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_GPIO_Init+0x240>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d052      	beq.n	8001c5c <HAL_GPIO_Init+0x268>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_GPIO_Init+0x244>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_GPIO_Init+0x248>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x22a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_GPIO_Init+0x24c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_GPIO_Init+0x250>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x254>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x258>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x25c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x260>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x212>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_GPIO_Init+0x264>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x20e>
 8001bfe:	2309      	movs	r3, #9
 8001c00:	e02d      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c02:	230a      	movs	r3, #10
 8001c04:	e02b      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e029      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e027      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e025      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e023      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e021      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e01f      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e01d      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e01b      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c26:	bf00      	nop
 8001c28:	58000080 	.word	0x58000080
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	58000400 	.word	0x58000400
 8001c34:	58020000 	.word	0x58020000
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	58020800 	.word	0x58020800
 8001c40:	58020c00 	.word	0x58020c00
 8001c44:	58021000 	.word	0x58021000
 8001c48:	58021400 	.word	0x58021400
 8001c4c:	58021800 	.word	0x58021800
 8001c50:	58021c00 	.word	0x58021c00
 8001c54:	58022000 	.word	0x58022000
 8001c58:	58022400 	.word	0x58022400
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	f002 0203 	and.w	r2, r2, #3
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	4093      	lsls	r3, r2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6e:	4938      	ldr	r1, [pc, #224]	; (8001d50 <HAL_GPIO_Init+0x35c>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f ae63 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	58000400 	.word	0x58000400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f804 	bl	8001e1e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_HSEM_FastTake+0x2c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3320      	adds	r3, #32
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_HSEM_FastTake+0x30>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	58026400 	.word	0x58026400
 8001e64:	80000300 	.word	0x80000300

08001e68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e72:	4906      	ldr	r1, [pc, #24]	; (8001e8c <HAL_HSEM_Release+0x24>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	58026400 	.word	0x58026400

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f8fc 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	; 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d104      	bne.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_I2C_Init+0x11c>)
 8001f36:	430b      	orrs	r3, r1
 8001f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	ea42 0103 	orr.w	r1, r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69d9      	ldr	r1, [r3, #28]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	02008000 	.word	0x02008000

08001fb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	817b      	strh	r3, [r7, #10]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	f040 80da 	bne.w	8002186 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x30>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e0d3      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fb22 	bl	8001630 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2319      	movs	r3, #25
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f9e6 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0be      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2221      	movs	r2, #33	; 0x21
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2210      	movs	r2, #16
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2bff      	cmp	r3, #255	; 0xff
 800203a:	d90e      	bls.n	800205a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	22ff      	movs	r2, #255	; 0xff
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	b2da      	uxtb	r2, r3
 8002048:	8979      	ldrh	r1, [r7, #10]
 800204a:	4b51      	ldr	r3, [pc, #324]	; (8002190 <HAL_I2C_Master_Transmit+0x1e0>)
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fb48 	bl	80026e8 <I2C_TransferConfig>
 8002058:	e06c      	b.n	8002134 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	4b48      	ldr	r3, [pc, #288]	; (8002190 <HAL_I2C_Master_Transmit+0x1e0>)
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fb37 	bl	80026e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800207a:	e05b      	b.n	8002134 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f9e3 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e07b      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d034      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x184>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d130      	bne.n	8002134 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2200      	movs	r2, #0
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f975 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04d      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2bff      	cmp	r3, #255	; 0xff
 80020f4:	d90e      	bls.n	8002114 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 faeb 	bl	80026e8 <I2C_TransferConfig>
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fada 	bl	80026e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d19e      	bne.n	800207c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f9c2 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01a      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2220      	movs	r2, #32
 8002158:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_I2C_Master_Transmit+0x1e4>)
 8002166:	400b      	ands	r3, r1
 8002168:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	80002000 	.word	0x80002000
 8002194:	fe00e800 	.word	0xfe00e800

08002198 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
 80021a8:	4613      	mov	r3, r2
 80021aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	f040 80db 	bne.w	8002370 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2C_Master_Receive+0x30>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0d4      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d0:	f7ff fa2e 	bl	8001630 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2319      	movs	r3, #25
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f8f2 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0bf      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2222      	movs	r2, #34	; 0x22
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2210      	movs	r2, #16
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d90e      	bls.n	8002242 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_I2C_Master_Receive+0x1e4>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa54 	bl	80026e8 <I2C_TransferConfig>
 8002240:	e06d      	b.n	800231e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	4b49      	ldr	r3, [pc, #292]	; (800237c <HAL_I2C_Master_Receive+0x1e4>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fa43 	bl	80026e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002262:	e05c      	b.n	800231e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6a39      	ldr	r1, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f96b 	bl	8002544 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07c      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d034      	beq.n	800231e <HAL_I2C_Master_Receive+0x186>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d130      	bne.n	800231e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f880 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04d      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2bff      	cmp	r3, #255	; 0xff
 80022de:	d90e      	bls.n	80022fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	22ff      	movs	r2, #255	; 0xff
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f9f6 	bl	80026e8 <I2C_TransferConfig>
 80022fc:	e00f      	b.n	800231e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	b2da      	uxtb	r2, r3
 800230e:	8979      	ldrh	r1, [r7, #10]
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f9e5 	bl	80026e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d19d      	bne.n	8002264 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	6a39      	ldr	r1, [r7, #32]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f8cd 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e01a      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2220      	movs	r2, #32
 8002342:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_I2C_Master_Receive+0x1e8>)
 8002350:	400b      	ands	r3, r1
 8002352:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	80002400 	.word	0x80002400
 8002380:	fe00e800 	.word	0xfe00e800

08002384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d103      	bne.n	80023a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d007      	beq.n	80023c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	619a      	str	r2, [r3, #24]
  }
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023dc:	e022      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d01e      	beq.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff f923 	bl	8001630 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d113      	bne.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00f      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d0cd      	beq.n	80023de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002458:	e02c      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8dc 	bl	800261c <I2C_IsAcknowledgeFailed>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02a      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d01e      	beq.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7ff f8db 	bl	8001630 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d113      	bne.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e007      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d1cb      	bne.n	800245a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	e028      	b.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f89c 	bl	800261c <I2C_IsAcknowledgeFailed>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e026      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff f89f 	bl	8001630 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d1cf      	bne.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002550:	e055      	b.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f860 	bl	800261c <I2C_IsAcknowledgeFailed>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e053      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b20      	cmp	r3, #32
 8002572:	d129      	bne.n	80025c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d105      	bne.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e03f      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e022      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff f832 	bl	8001630 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e007      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b04      	cmp	r3, #4
 800260a:	d1a2      	bne.n	8002552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	fe00e800 	.word	0xfe00e800

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d151      	bne.n	80026da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002636:	e022      	b.n	800267e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d01e      	beq.n	800267e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7fe fff6 	bl	8001630 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <I2C_IsAcknowledgeFailed+0x3a>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e02e      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b20      	cmp	r3, #32
 800268a:	d1d5      	bne.n	8002638 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2220      	movs	r2, #32
 800269a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fe71 	bl	8002384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f043 0204 	orr.w	r2, r3, #4
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	0d5b      	lsrs	r3, r3, #21
 8002704:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <I2C_TransferConfig+0x58>)
 800270a:	430b      	orrs	r3, r1
 800270c:	43db      	mvns	r3, r3
 800270e:	ea02 0103 	and.w	r1, r2, r3
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	431a      	orrs	r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	03ff63ff 	.word	0x03ff63ff

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	d138      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e032      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d139      	bne.n	8002864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e033      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	2b06      	cmp	r3, #6
 8002886:	d00a      	beq.n	800289e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e03e      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028a6:	491f      	ldr	r1, [pc, #124]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ae:	f7fe febf 	bl	8001630 <HAL_GetTick>
 80028b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028b4:	e009      	b.n	80028ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028b6:	f7fe febb 	bl	8001630 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c4:	d901      	bls.n	80028ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e028      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d1ee      	bne.n	80028b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b1e      	cmp	r3, #30
 80028dc:	d008      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b2e      	cmp	r3, #46	; 0x2e
 80028e2:	d005      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b1d      	cmp	r3, #29
 80028e8:	d002      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b2d      	cmp	r3, #45	; 0x2d
 80028ee:	d114      	bne.n	800291a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028f0:	f7fe fe9e 	bl	8001630 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028f6:	e009      	b.n	800290c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028f8:	f7fe fe9a 	bl	8001630 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002906:	d901      	bls.n	800290c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d1ee      	bne.n	80028f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58024800 	.word	0x58024800

08002928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e3ff      	b.n	800313a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002948:	4b99      	ldr	r3, [pc, #612]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b10      	cmp	r3, #16
 800295c:	d007      	beq.n	800296e <HAL_RCC_OscConfig+0x46>
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b18      	cmp	r3, #24
 8002962:	d110      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296e:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d06c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x12c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d168      	bne.n	8002a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e3d9      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x76>
 8002990:	4b87      	ldr	r3, [pc, #540]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a86      	ldr	r2, [pc, #536]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e02e      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xbc>
 80029ca:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029e4:	4b72      	ldr	r3, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a71      	ldr	r2, [pc, #452]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fe14 	bl	8001630 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fe10 	bl	8001630 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e38d      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe4>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fe00 	bl	8001630 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fdfc 	bl	8001630 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e379      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a46:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80ae 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_RCC_OscConfig+0x162>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b18      	cmp	r3, #24
 8002a7e:	d13a      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1ce>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d135      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8a:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e34b      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	f7fe fdd1 	bl	8001648 <HAL_GetREVID>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d817      	bhi.n	8002ae0 <HAL_RCC_OscConfig+0x1b8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d108      	bne.n	8002aca <HAL_RCC_OscConfig+0x1a2>
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ac0:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac8:	e07a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	4935      	ldr	r1, [pc, #212]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ade:	e06f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	4930      	ldr	r1, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e064      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d045      	beq.n	8002b8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0219 	bic.w	r2, r3, #25
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fd8e 	bl	8001630 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fd8a 	bl	8001630 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e307      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	f7fe fd87 	bl	8001648 <HAL_GetREVID>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d817      	bhi.n	8002b74 <HAL_RCC_OscConfig+0x24c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d108      	bne.n	8002b5e <HAL_RCC_OscConfig+0x236>
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e030      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	031b      	lsls	r3, r3, #12
 8002b6c:	4910      	ldr	r1, [pc, #64]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e025      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e01a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fd4b 	bl	8001630 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fd47 	bl	8001630 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d903      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e2c4      	b.n	800313a <HAL_RCC_OscConfig+0x812>
 8002bb0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb4:	4ba4      	ldr	r3, [pc, #656]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a9 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	4b9e      	ldr	r3, [pc, #632]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd8:	4b9b      	ldr	r3, [pc, #620]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2cc>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b18      	cmp	r3, #24
 8002be8:	d13a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x338>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d135      	bne.n	8002c60 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf4:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e296      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0c:	f7fe fd1c 	bl	8001648 <HAL_GetREVID>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d817      	bhi.n	8002c4a <HAL_RCC_OscConfig+0x322>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x30c>
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c2a:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c32:	e075      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	4981      	ldr	r1, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c48:	e06a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	497b      	ldr	r1, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c5e:	e05f      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d042      	beq.n	8002cee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c68:	4b77      	ldr	r3, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a76      	ldr	r2, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fcdc 	bl	8001630 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fcd8 	bl	8001630 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e255      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9a:	f7fe fcd5 	bl	8001648 <HAL_GetREVID>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d817      	bhi.n	8002cd8 <HAL_RCC_OscConfig+0x3b0>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d108      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x39a>
 8002cb0:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cb8:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cbe:	6053      	str	r3, [r2, #4]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	495d      	ldr	r1, [pc, #372]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e023      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	4958      	ldr	r1, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fc99 	bl	8001630 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d02:	f7fe fc95 	bl	8001630 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e212      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d34:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	4a43      	ldr	r2, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fc76 	bl	8001630 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fc72 	bl	8001630 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1ef      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x420>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fc5c 	bl	8001630 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fc58 	bl	8001630 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1d5      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fc39 	bl	8001630 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fe fc35 	bl	8001630 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1b2      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x49a>
 8002de0:	e018      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fc1f 	bl	8001630 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df6:	f7fe fc1b 	bl	8001630 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e198      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8085 	beq.w	8002f2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x524>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x524>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fbff 	bl	8001630 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e34:	e00c      	b.n	8002e50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe fbfb 	bl	8001630 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d905      	bls.n	8002e50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e178      	b.n	800313a <HAL_RCC_OscConfig+0x812>
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e50:	4b96      	ldr	r3, [pc, #600]	; (80030ac <HAL_RCC_OscConfig+0x784>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x54a>
 8002e64:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e02d      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x56c>
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a8c      	ldr	r2, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a89      	ldr	r2, [pc, #548]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e01c      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x58e>
 8002e9c:	4b84      	ldr	r3, [pc, #528]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a83      	ldr	r2, [pc, #524]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a80      	ldr	r2, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fbab 	bl	8001630 <HAL_GetTick>
 8002eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe fba7 	bl	8001630 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e122      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef4:	4b6e      	ldr	r3, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RCC_OscConfig+0x5b6>
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fb95 	bl	8001630 <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fb91 	bl	8001630 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e10c      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f20:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8101 	beq.w	8003138 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f000 80bc 	beq.w	80030bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f040 8095 	bne.w	8003078 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fb69 	bl	8001630 <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fb65 	bl	8001630 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0e2      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f74:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x78c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	430a      	orrs	r2, r1
 8002f94:	4946      	ldr	r1, [pc, #280]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	628b      	str	r3, [r1, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fca:	4939      	ldr	r1, [pc, #228]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a36      	ldr	r2, [pc, #216]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x790>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	00d2      	lsls	r2, r2, #3
 8002fea:	4931      	ldr	r1, [pc, #196]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f023 020c 	bic.w	r2, r3, #12
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	492c      	ldr	r1, [pc, #176]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f023 0202 	bic.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4928      	ldr	r1, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003010:	4313      	orrs	r3, r2
 8003012:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe faee 	bl	8001630 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe faea 	bl	8001630 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e067      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x730>
 8003076:	e05f      	b.n	8003138 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fad4 	bl	8001630 <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fad0 	bl	8001630 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04d      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x764>
 80030aa:	e045      	b.n	8003138 <HAL_RCC_OscConfig+0x810>
 80030ac:	58024800 	.word	0x58024800
 80030b0:	58024400 	.word	0x58024400
 80030b4:	fffffc0c 	.word	0xfffffc0c
 80030b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <HAL_RCC_OscConfig+0x81c>)
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_OscConfig+0x81c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d031      	beq.n	8003134 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d12a      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d122      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d11a      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d111      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400

08003148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e19c      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d910      	bls.n	800318c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b87      	ldr	r3, [pc, #540]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 020f 	bic.w	r2, r3, #15
 8003172:	4985      	ldr	r1, [pc, #532]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e184      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d908      	bls.n	80031ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a8:	4b78      	ldr	r3, [pc, #480]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4975      	ldr	r1, [pc, #468]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d6:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	496a      	ldr	r1, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	495e      	ldr	r1, [pc, #376]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003212:	4313      	orrs	r3, r2
 8003214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322e:	429a      	cmp	r2, r3
 8003230:	d908      	bls.n	8003244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4953      	ldr	r1, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f023 020f 	bic.w	r2, r3, #15
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4947      	ldr	r1, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d055      	beq.n	800332a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0f6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d115      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0ea      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0de      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f023 0207 	bic.w	r2, r3, #7
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe f999 	bl	8001630 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003300:	e00a      	b.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fe f995 	bl	8001630 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0be      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	429a      	cmp	r2, r3
 8003328:	d1eb      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	429a      	cmp	r2, r3
 8003344:	d208      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d214      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4906      	ldr	r1, [pc, #24]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e086      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
 8003388:	52002000 	.word	0x52002000
 800338c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d208      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	492e      	ldr	r1, [pc, #184]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	429a      	cmp	r2, r3
 8003406:	d208      	bcs.n	800341a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4922      	ldr	r1, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003416:	4313      	orrs	r3, r2
 8003418:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4917      	ldr	r1, [pc, #92]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003444:	4313      	orrs	r3, r2
 8003446:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003448:	f000 f89e 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x360>)
 800347e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x364>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x368>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd ff2a 	bl	80012e4 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
 80034a4:	0800a53c 	.word	0x0800a53c
 80034a8:	24000004 	.word	0x24000004
 80034ac:	24000000 	.word	0x24000000
 80034b0:	24000008 	.word	0x24000008

080034b4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12a      	bne.n	800351c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034cc:	4a2b      	ldr	r2, [pc, #172]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d6:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 80034d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80034e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80034fa:	f107 031c 	add.w	r3, r7, #28
 80034fe:	4619      	mov	r1, r3
 8003500:	481f      	ldr	r0, [pc, #124]	; (8003580 <HAL_RCC_MCOConfig+0xcc>)
 8003502:	f7fe fa77 	bl	80019f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	430b      	orrs	r3, r1
 8003514:	4919      	ldr	r1, [pc, #100]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800351a:	e02a      	b.n	8003572 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	4a16      	ldr	r2, [pc, #88]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 800352e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800353a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003550:	f107 031c 	add.w	r3, r7, #28
 8003554:	4619      	mov	r1, r3
 8003556:	480b      	ldr	r0, [pc, #44]	; (8003584 <HAL_RCC_MCOConfig+0xd0>)
 8003558:	f7fe fa4c 	bl	80019f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	01d9      	lsls	r1, r3, #7
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	430b      	orrs	r3, r1
 800356c:	4903      	ldr	r1, [pc, #12]	; (800357c <HAL_RCC_MCOConfig+0xc8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
}
 8003572:	bf00      	nop
 8003574:	3730      	adds	r7, #48	; 0x30
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	58020000 	.word	0x58020000
 8003584:	58020800 	.word	0x58020800

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358e:	4bb3      	ldr	r3, [pc, #716]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003596:	2b18      	cmp	r3, #24
 8003598:	f200 8155 	bhi.w	8003846 <HAL_RCC_GetSysClockFreq+0x2be>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	08003609 	.word	0x08003609
 80035a8:	08003847 	.word	0x08003847
 80035ac:	08003847 	.word	0x08003847
 80035b0:	08003847 	.word	0x08003847
 80035b4:	08003847 	.word	0x08003847
 80035b8:	08003847 	.word	0x08003847
 80035bc:	08003847 	.word	0x08003847
 80035c0:	08003847 	.word	0x08003847
 80035c4:	0800362f 	.word	0x0800362f
 80035c8:	08003847 	.word	0x08003847
 80035cc:	08003847 	.word	0x08003847
 80035d0:	08003847 	.word	0x08003847
 80035d4:	08003847 	.word	0x08003847
 80035d8:	08003847 	.word	0x08003847
 80035dc:	08003847 	.word	0x08003847
 80035e0:	08003847 	.word	0x08003847
 80035e4:	08003635 	.word	0x08003635
 80035e8:	08003847 	.word	0x08003847
 80035ec:	08003847 	.word	0x08003847
 80035f0:	08003847 	.word	0x08003847
 80035f4:	08003847 	.word	0x08003847
 80035f8:	08003847 	.word	0x08003847
 80035fc:	08003847 	.word	0x08003847
 8003600:	08003847 	.word	0x08003847
 8003604:	0800363b 	.word	0x0800363b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003608:	4b94      	ldr	r3, [pc, #592]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003614:	4b91      	ldr	r3, [pc, #580]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	4a90      	ldr	r2, [pc, #576]	; (8003860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003626:	e111      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003628:	4b8d      	ldr	r3, [pc, #564]	; (8003860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800362a:	61bb      	str	r3, [r7, #24]
    break;
 800362c:	e10e      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800362e:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003630:	61bb      	str	r3, [r7, #24]
    break;
 8003632:	e10b      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003634:	4b8c      	ldr	r3, [pc, #560]	; (8003868 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003636:	61bb      	str	r3, [r7, #24]
    break;
 8003638:	e108      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003650:	4b82      	ldr	r3, [pc, #520]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800365a:	4b80      	ldr	r3, [pc, #512]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	08db      	lsrs	r3, r3, #3
 8003660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80e1 	beq.w	8003840 <HAL_RCC_GetSysClockFreq+0x2b8>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b02      	cmp	r3, #2
 8003682:	f000 8083 	beq.w	800378c <HAL_RCC_GetSysClockFreq+0x204>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b02      	cmp	r3, #2
 800368a:	f200 80a1 	bhi.w	80037d0 <HAL_RCC_GetSysClockFreq+0x248>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x114>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d056      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x1c0>
 800369a:	e099      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036a8:	4b6c      	ldr	r3, [pc, #432]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	08db      	lsrs	r3, r3, #3
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d2:	4b62      	ldr	r3, [pc, #392]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003702:	e087      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003870 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003716:	4b51      	ldr	r3, [pc, #324]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003726:	ed97 6a02 	vldr	s12, [r7, #8]
 800372a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e4>
 800372e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003746:	e065      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003874 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375a:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376a:	ed97 6a02 	vldr	s12, [r7, #8]
 800376e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800378a:	e043      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003796:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003878 <HAL_RCC_GetSysClockFreq+0x2f0>
 800379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ce:	e021      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003874 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003812:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	0a5b      	lsrs	r3, r3, #9
 800381a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381e:	3301      	adds	r3, #1
 8003820:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800382c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003838:	ee17 3a90 	vmov	r3, s15
 800383c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800383e:	e005      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    break;
 8003844:	e002      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003848:	61bb      	str	r3, [r7, #24]
    break;
 800384a:	bf00      	nop
  }

  return sysclockfreq;
 800384c:	69bb      	ldr	r3, [r7, #24]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3724      	adds	r7, #36	; 0x24
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	58024400 	.word	0x58024400
 8003860:	03d09000 	.word	0x03d09000
 8003864:	003d0900 	.word	0x003d0900
 8003868:	017d7840 	.word	0x017d7840
 800386c:	46000000 	.word	0x46000000
 8003870:	4c742400 	.word	0x4c742400
 8003874:	4a742400 	.word	0x4a742400
 8003878:	4bbebc20 	.word	0x4bbebc20

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003882:	f7ff fe81 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_GetHCLKFreq+0x50>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	490f      	ldr	r1, [pc, #60]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003894:	5ccb      	ldrb	r3, [r1, r3]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCC_GetHCLKFreq+0x50>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80038b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	58024400 	.word	0x58024400
 80038d0:	0800a53c 	.word	0x0800a53c
 80038d4:	24000004 	.word	0x24000004
 80038d8:	24000000 	.word	0x24000000

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038e0:	f7ff ffcc 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58024400 	.word	0x58024400
 8003904:	0800a53c 	.word	0x0800a53c

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800390c:	f7ff ffb6 	bl	800387c <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58024400 	.word	0x58024400
 8003930:	0800a53c 	.word	0x0800a53c

08003934 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223f      	movs	r2, #63	; 0x3f
 8003942:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0207 	and.w	r2, r3, #7
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003974:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <HAL_RCC_GetClockConfig+0x7c>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetClockConfig+0x80>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	58024400 	.word	0x58024400
 80039b4:	52002000 	.word	0x52002000

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c4:	2300      	movs	r3, #0
 80039c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03f      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039dc:	d02a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039e2:	d824      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e8:	d018      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ee:	d81e      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f8:	d007      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039fa:	e018      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fc:	4bab      	ldr	r3, [pc, #684]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	4aaa      	ldr	r2, [pc, #680]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a08:	e015      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f9ff 	bl	8004e14 <RCCEx_PLL2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a1a:	e00c      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3324      	adds	r3, #36	; 0x24
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 faa8 	bl	8004f78 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
      break;
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a3c:	4b9b      	ldr	r3, [pc, #620]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a48:	4998      	ldr	r1, [pc, #608]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a4e:	e001      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d826      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a85 	.word	0x08003a85
 8003a74:	08003a93 	.word	0x08003a93
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003abd 	.word	0x08003abd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4b89      	ldr	r3, [pc, #548]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a88      	ldr	r2, [pc, #544]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a90:	e015      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f9bb 	bl	8004e14 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aa2:	e00c      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3324      	adds	r3, #36	; 0x24
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fa64 	bl	8004f78 <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac4:	4b79      	ldr	r3, [pc, #484]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	f023 0207 	bic.w	r2, r3, #7
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4976      	ldr	r1, [pc, #472]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad6:	e001      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d042      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af0:	d02b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d825      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003af8:	2bc0      	cmp	r3, #192	; 0xc0
 8003afa:	d028      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003afc:	2bc0      	cmp	r3, #192	; 0xc0
 8003afe:	d821      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d016      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d81d      	bhi.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b10:	e018      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b12:	4b66      	ldr	r3, [pc, #408]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a65      	ldr	r2, [pc, #404]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b1e:	e017      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f974 	bl	8004e14 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b30:	e00e      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fa1d 	bl	8004f78 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b42:	e005      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
      break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b56:	4b55      	ldr	r3, [pc, #340]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	4952      	ldr	r1, [pc, #328]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	650b      	str	r3, [r1, #80]	; 0x50
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d049      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b84:	d030      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b8a:	d82a      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b90:	d02c      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b96:	d824      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d018      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d81e      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e017      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f925 	bl	8004e14 <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bce:	e00e      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f9ce 	bl	8004f78 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c02:	492a      	ldr	r1, [pc, #168]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	658b      	str	r3, [r1, #88]	; 0x58
 8003c08:	e001      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c24:	d030      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c2a:	d82a      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c30:	d02c      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c36:	d824      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3c:	d018      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c42:	d81e      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c4e:	e018      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e017      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f8d5 	bl	8004e14 <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c6e:	e00e      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3324      	adds	r3, #36	; 0x24
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f97e 	bl	8004f78 <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c80:	e005      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ca2:	4902      	ldr	r1, [pc, #8]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d032      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d817      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d00c      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d813      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d016      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d10f      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cdc:	4bb1      	ldr	r3, [pc, #708]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	4ab0      	ldr	r2, [pc, #704]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f88f 	bl	8004e14 <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003cfa:	e005      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d0e:	4ba5      	ldr	r3, [pc, #660]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	49a2      	ldr	r1, [pc, #648]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d047      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d3a:	d030      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d40:	d82a      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d46:	d02c      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003d48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d4c:	d824      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d52:	d018      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d58:	d81e      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d007      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003d64:	e018      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d66:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a8e      	ldr	r2, [pc, #568]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d72:	e017      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f84a 	bl	8004e14 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d84:	e00e      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3324      	adds	r3, #36	; 0x24
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f8f3 	bl	8004f78 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003daa:	4b7e      	ldr	r3, [pc, #504]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	497b      	ldr	r1, [pc, #492]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	650b      	str	r3, [r1, #80]	; 0x50
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d049      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd6:	d02e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ddc:	d828      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003de2:	d02a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003de8:	d822      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dee:	d026      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003df0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003df4:	d81c      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e00:	d816      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fffe 	bl	8004e14 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e012      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f8a7 	bl	8004f78 <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
      break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e56:	4953      	ldr	r1, [pc, #332]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	650b      	str	r3, [r1, #80]	; 0x50
 8003e5c:	e001      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d04b      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e78:	d02e      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7e:	d828      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d02a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d822      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e90:	d026      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e96:	d81c      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d816      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eac:	d111      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 ffad 	bl	8004e14 <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e012      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 f856 	bl	8004f78 <RCCEx_PLL3_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ed0:	e009      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed6:	e006      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003efa:	492a      	ldr	r1, [pc, #168]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	658b      	str	r3, [r1, #88]	; 0x58
 8003f00:	e001      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d022      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1e:	d108      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff74 	bl	8004e14 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
      break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	4915      	ldr	r1, [pc, #84]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f52:	e001      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d00e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d814      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d017      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f8a:	e00e      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff3e 	bl	8004e14 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003fa4:	58024400 	.word	0x58024400
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fb0:	4bbc      	ldr	r3, [pc, #752]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	49b9      	ldr	r1, [pc, #740]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d032      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d81b      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	08003ff5 	.word	0x08003ff5
 8003fec:	08004003 	.word	0x08004003
 8003ff0:	0800401b 	.word	0x0800401b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff4:	4bab      	ldr	r3, [pc, #684]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4aaa      	ldr	r2, [pc, #680]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004000:	e00c      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 ff03 	bl	8004e14 <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	499d      	ldr	r1, [pc, #628]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004034:	e001      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8086 	beq.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004048:	4b97      	ldr	r3, [pc, #604]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a96      	ldr	r2, [pc, #600]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800404e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004054:	f7fd faec 	bl	8001630 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405a:	e009      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fd fae8 	bl	8001630 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d902      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	75fb      	strb	r3, [r7, #23]
        break;
 800406e:	e005      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004070:	4b8d      	ldr	r3, [pc, #564]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ef      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d166      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004082:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800408c:	4053      	eors	r3, r2
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004096:	4b83      	ldr	r3, [pc, #524]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ac:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a7c      	ldr	r2, [pc, #496]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040b8:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d115      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd fab1 	bl	8001630 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040d0:	e00b      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fd faad 	bl	8001630 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d902      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	75fb      	strb	r3, [r7, #23]
            break;
 80040e8:	e005      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ea:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ed      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d126      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410a:	d10d      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800410c:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800411a:	0919      	lsrs	r1, r3, #4
 800411c:	4b63      	ldr	r3, [pc, #396]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800411e:	400b      	ands	r3, r1
 8004120:	4960      	ldr	r1, [pc, #384]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004122:	4313      	orrs	r3, r2
 8004124:	610b      	str	r3, [r1, #16]
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004128:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800412e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004132:	6113      	str	r3, [r2, #16]
 8004134:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	4958      	ldr	r1, [pc, #352]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004144:	4313      	orrs	r3, r2
 8004146:	670b      	str	r3, [r1, #112]	; 0x70
 8004148:	e004      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	75bb      	strb	r3, [r7, #22]
 800414e:	e001      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d07e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004164:	2b28      	cmp	r3, #40	; 0x28
 8004166:	d867      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	0800423f 	.word	0x0800423f
 8004174:	08004239 	.word	0x08004239
 8004178:	08004239 	.word	0x08004239
 800417c:	08004239 	.word	0x08004239
 8004180:	08004239 	.word	0x08004239
 8004184:	08004239 	.word	0x08004239
 8004188:	08004239 	.word	0x08004239
 800418c:	08004239 	.word	0x08004239
 8004190:	08004215 	.word	0x08004215
 8004194:	08004239 	.word	0x08004239
 8004198:	08004239 	.word	0x08004239
 800419c:	08004239 	.word	0x08004239
 80041a0:	08004239 	.word	0x08004239
 80041a4:	08004239 	.word	0x08004239
 80041a8:	08004239 	.word	0x08004239
 80041ac:	08004239 	.word	0x08004239
 80041b0:	08004227 	.word	0x08004227
 80041b4:	08004239 	.word	0x08004239
 80041b8:	08004239 	.word	0x08004239
 80041bc:	08004239 	.word	0x08004239
 80041c0:	08004239 	.word	0x08004239
 80041c4:	08004239 	.word	0x08004239
 80041c8:	08004239 	.word	0x08004239
 80041cc:	08004239 	.word	0x08004239
 80041d0:	0800423f 	.word	0x0800423f
 80041d4:	08004239 	.word	0x08004239
 80041d8:	08004239 	.word	0x08004239
 80041dc:	08004239 	.word	0x08004239
 80041e0:	08004239 	.word	0x08004239
 80041e4:	08004239 	.word	0x08004239
 80041e8:	08004239 	.word	0x08004239
 80041ec:	08004239 	.word	0x08004239
 80041f0:	0800423f 	.word	0x0800423f
 80041f4:	08004239 	.word	0x08004239
 80041f8:	08004239 	.word	0x08004239
 80041fc:	08004239 	.word	0x08004239
 8004200:	08004239 	.word	0x08004239
 8004204:	08004239 	.word	0x08004239
 8004208:	08004239 	.word	0x08004239
 800420c:	08004239 	.word	0x08004239
 8004210:	0800423f 	.word	0x0800423f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fdfa 	bl	8004e14 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004224:	e00c      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fea3 	bl	8004f78 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004236:	e003      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e000      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800423e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004252:	4914      	ldr	r1, [pc, #80]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004254:	4313      	orrs	r3, r2
 8004256:	654b      	str	r3, [r1, #84]	; 0x54
 8004258:	e001      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03e      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426e:	2b05      	cmp	r3, #5
 8004270:	d827      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042c9 	.word	0x080042c9
 800427c:	08004291 	.word	0x08004291
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042c9 	.word	0x080042c9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042c9 	.word	0x080042c9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fdbc 	bl	8004e14 <RCCEx_PLL2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042a0:	e013      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x912>
 80042a2:	bf00      	nop
 80042a4:	58024400 	.word	0x58024400
 80042a8:	58024800 	.word	0x58024800
 80042ac:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fe5e 	bl	8004f78 <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042c0:	e003      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]
      break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80042c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042d0:	4b9f      	ldr	r3, [pc, #636]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f023 0207 	bic.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042dc:	499c      	ldr	r1, [pc, #624]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	654b      	str	r3, [r1, #84]	; 0x54
 80042e2:	e001      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d039      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d820      	bhi.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004347 	.word	0x08004347
 8004308:	0800431d 	.word	0x0800431d
 800430c:	0800432f 	.word	0x0800432f
 8004310:	08004347 	.word	0x08004347
 8004314:	08004347 	.word	0x08004347
 8004318:	08004347 	.word	0x08004347
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fd76 	bl	8004e14 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800432c:	e00c      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3324      	adds	r3, #36	; 0x24
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fe1f 	bl	8004f78 <RCCEx_PLL3_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
      break;
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8004346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434e:	4b80      	ldr	r3, [pc, #512]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f023 0207 	bic.w	r2, r3, #7
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435c:	497c      	ldr	r1, [pc, #496]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800435e:	4313      	orrs	r3, r2
 8004360:	658b      	str	r3, [r1, #88]	; 0x58
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437e:	d02e      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8004380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004384:	d828      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d02a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d822      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004396:	d026      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004398:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800439c:	d81c      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800439e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a2:	d010      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80043a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a8:	d816      	bhi.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80043ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b2:	d111      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fd2a 	bl	8004e14 <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043c4:	e012      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3324      	adds	r3, #36	; 0x24
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fdd3 	bl	8004f78 <RCCEx_PLL3_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
      break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f2:	4b57      	ldr	r3, [pc, #348]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	4953      	ldr	r1, [pc, #332]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004402:	4313      	orrs	r3, r2
 8004404:	654b      	str	r3, [r1, #84]	; 0x54
 8004406:	e001      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d04b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004422:	d02e      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004424:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004428:	d828      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d02a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d822      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443a:	d026      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800443c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004440:	d81c      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d010      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d816      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01d      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d111      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fcd8 	bl	8004e14 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004468:	e012      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd81 	bl	8004f78 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800447a:	e009      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	e006      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004482:	bf00      	nop
 8004484:	e004      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800448e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a4:	492a      	ldr	r1, [pc, #168]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	658b      	str	r3, [r1, #88]	; 0x58
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04d      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80044c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044cc:	d828      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d2:	d02a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80044d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d8:	d822      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044de:	d026      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80044e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044e4:	d81c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ea:	d010      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f0:	d816      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	d111      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fc86 	bl	8004e14 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800450c:	e012      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	2102      	movs	r1, #2
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fd2f 	bl	8004f78 <RCCEx_PLL3_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004526:	bf00      	nop
 8004528:	e004      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004548:	4901      	ldr	r1, [pc, #4]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800454a:	4313      	orrs	r3, r2
 800454c:	658b      	str	r3, [r1, #88]	; 0x58
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d10a      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	2102      	movs	r1, #2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fcfe 	bl	8004f78 <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004586:	4b8c      	ldr	r3, [pc, #560]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	4988      	ldr	r1, [pc, #544]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004596:	4313      	orrs	r3, r2
 8004598:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d10a      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fcdd 	bl	8004f78 <RCCEx_PLL3_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c8:	4b7b      	ldr	r3, [pc, #492]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	4978      	ldr	r1, [pc, #480]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d034      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f2:	d01d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f8:	d817      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d009      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8004604:	e011      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fc01 	bl	8004e14 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004616:	e00c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fcaa 	bl	8004f78 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004638:	4b5f      	ldr	r3, [pc, #380]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004646:	495c      	ldr	r1, [pc, #368]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004648:	4313      	orrs	r3, r2
 800464a:	658b      	str	r3, [r1, #88]	; 0x58
 800464c:	e001      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d033      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004668:	d01c      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800466e:	d816      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467a:	d007      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 800467c:	e00f      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467e:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a4d      	ldr	r2, [pc, #308]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc70 	bl	8004f78 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ac:	4b42      	ldr	r3, [pc, #264]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	493f      	ldr	r1, [pc, #252]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	654b      	str	r3, [r1, #84]	; 0x54
 80046c0:	e001      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d029      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046de:	d007      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80046e0:	e00f      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e2:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046ee:	e00b      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fb8c 	bl	8004e14 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
      break;
 8004706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	4927      	ldr	r1, [pc, #156]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800471c:	4313      	orrs	r3, r2
 800471e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004720:	e001      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fc1d 	bl	8004f78 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d035      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475e:	d017      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d811      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476a:	d013      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d80b      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d106      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477c:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004788:	e007      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
      break;
 800478e:	e004      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ae:	4902      	ldr	r1, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	654b      	str	r3, [r1, #84]	; 0x54
 80047b4:	e004      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047cc:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d8:	492e      	ldr	r1, [pc, #184]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047ea:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047f8:	4926      	ldr	r1, [pc, #152]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	491f      	ldr	r1, [pc, #124]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800482e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004832:	6113      	str	r3, [r2, #16]
 8004834:	4b17      	ldr	r3, [pc, #92]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800483e:	4915      	ldr	r1, [pc, #84]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	da08      	bge.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	490e      	ldr	r1, [pc, #56]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	4906      	ldr	r1, [pc, #24]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800487e:	7dbb      	ldrb	r3, [r7, #22]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400

08004898 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800489c:	f7fe ffee 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4904      	ldr	r1, [pc, #16]	; (80048c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	58024400 	.word	0x58024400
 80048c0:	0800a53c 	.word	0x0800a53c

080048c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048cc:	4ba1      	ldr	r3, [pc, #644]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80048d6:	4b9f      	ldr	r3, [pc, #636]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	0b1b      	lsrs	r3, r3, #12
 80048dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048e2:	4b9c      	ldr	r3, [pc, #624]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80048ee:	4b99      	ldr	r3, [pc, #612]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8111 	beq.w	8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b02      	cmp	r3, #2
 8004916:	f000 8083 	beq.w	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b02      	cmp	r3, #2
 800491e:	f200 80a1 	bhi.w	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d056      	beq.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800492e:	e099      	b.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004930:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02d      	beq.n	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800493c:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	4a84      	ldr	r2, [pc, #528]	; (8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	ed97 6a03 	vldr	s12, [r7, #12]
 800497a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800497e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800498a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004996:	e087      	b.n	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049da:	e065      	b.n	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a1e:	e043      	b.n	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a62:	e021      	b.n	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004aa8:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	0a5b      	lsrs	r3, r3, #9
 8004aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ace:	ee17 2a90 	vmov	r2, s15
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afc:	ee17 2a90 	vmov	r2, s15
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 2a90 	vmov	r2, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b32:	e008      	b.n	8004b46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
}
 8004b46:	bf00      	nop
 8004b48:	3724      	adds	r7, #36	; 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	58024400 	.word	0x58024400
 8004b58:	03d09000 	.word	0x03d09000
 8004b5c:	46000000 	.word	0x46000000
 8004b60:	4c742400 	.word	0x4c742400
 8004b64:	4a742400 	.word	0x4a742400
 8004b68:	4bbebc20 	.word	0x4bbebc20

08004b6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b74:	4ba1      	ldr	r3, [pc, #644]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b7e:	4b9f      	ldr	r3, [pc, #636]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004b96:	4b99      	ldr	r3, [pc, #612]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8111 	beq.w	8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f000 8083 	beq.w	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f200 80a1 	bhi.w	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d056      	beq.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bd6:	e099      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd8:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02d      	beq.n	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be4:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	4a84      	ldr	r2, [pc, #528]	; (8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b7b      	ldr	r3, [pc, #492]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c3e:	e087      	b.n	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c82:	e065      	b.n	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b59      	ldr	r3, [pc, #356]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cc6:	e043      	b.n	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b48      	ldr	r3, [pc, #288]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d0a:	e021      	b.n	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004d50:	4b2a      	ldr	r3, [pc, #168]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	ee17 2a90 	vmov	r2, s15
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	ee17 2a90 	vmov	r2, s15
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	0e1b      	lsrs	r3, r3, #24
 8004db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dda:	e008      	b.n	8004dee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
}
 8004dee:	bf00      	nop
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	03d09000 	.word	0x03d09000
 8004e04:	46000000 	.word	0x46000000
 8004e08:	4c742400 	.word	0x4c742400
 8004e0c:	4a742400 	.word	0x4a742400
 8004e10:	4bbebc20 	.word	0x4bbebc20

08004e14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e22:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d101      	bne.n	8004e32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e099      	b.n	8004f66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e32:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a4e      	ldr	r2, [pc, #312]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fbf7 	bl	8001630 <HAL_GetTick>
 8004e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e44:	e008      	b.n	8004e58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e46:	f7fc fbf3 	bl	8001630 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e086      	b.n	8004f66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e58:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f0      	bne.n	8004e46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e64:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	493f      	ldr	r1, [pc, #252]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	628b      	str	r3, [r1, #40]	; 0x28
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	025b      	lsls	r3, r3, #9
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ea8:	4931      	ldr	r1, [pc, #196]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eae:	4b30      	ldr	r3, [pc, #192]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	492d      	ldr	r1, [pc, #180]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	f023 0220 	bic.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4928      	ldr	r1, [pc, #160]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ede:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <RCCEx_PLL2_Config+0x160>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	69d2      	ldr	r2, [r2, #28]
 8004eea:	00d2      	lsls	r2, r2, #3
 8004eec:	4920      	ldr	r1, [pc, #128]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f043 0310 	orr.w	r3, r3, #16
 8004efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f10:	e00f      	b.n	8004f32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d106      	bne.n	8004f26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f24:	e005      	b.n	8004f32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f26:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fb77 	bl	8001630 <HAL_GetTick>
 8004f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f44:	e008      	b.n	8004f58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f46:	f7fc fb73 	bl	8001630 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
 8004f74:	ffff0007 	.word	0xffff0007

08004f78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f86:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d101      	bne.n	8004f96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e099      	b.n	80050ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f96:	4b4f      	ldr	r3, [pc, #316]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4e      	ldr	r2, [pc, #312]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa2:	f7fc fb45 	bl	8001630 <HAL_GetTick>
 8004fa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004faa:	f7fc fb41 	bl	8001630 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e086      	b.n	80050ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fbc:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fc8:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	051b      	lsls	r3, r3, #20
 8004fd6:	493f      	ldr	r1, [pc, #252]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	628b      	str	r3, [r1, #40]	; 0x28
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	025b      	lsls	r3, r3, #9
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	041b      	lsls	r3, r3, #16
 8004ffa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	3b01      	subs	r3, #1
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800500c:	4931      	ldr	r1, [pc, #196]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005012:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	492d      	ldr	r1, [pc, #180]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	4928      	ldr	r1, [pc, #160]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800503c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <RCCEx_PLL3_Config+0x160>)
 8005048:	4013      	ands	r3, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	69d2      	ldr	r2, [r2, #28]
 800504e:	00d2      	lsls	r2, r2, #3
 8005050:	4920      	ldr	r1, [pc, #128]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005056:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800506e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005074:	e00f      	b.n	8005096 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005088:	e005      	b.n	8005096 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005094:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fc fac5 	bl	8001630 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050a8:	e008      	b.n	80050bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050aa:	f7fc fac1 	bl	8001630 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <RCCEx_PLL3_Config+0x15c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	58024400 	.word	0x58024400
 80050d8:	ffff0007 	.word	0xffff0007

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e049      	b.n	8005182 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f841 	bl	800518a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 f9f8 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e04f      	b.n	8005258 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a23      	ldr	r2, [pc, #140]	; (8005264 <HAL_TIM_Base_Start_IT+0xc4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01d      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d018      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <HAL_TIM_Base_Start_IT+0xc8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	; (800526c <HAL_TIM_Base_Start_IT+0xcc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <HAL_TIM_Base_Start_IT+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <HAL_TIM_Base_Start_IT+0xd4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0x76>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <HAL_TIM_Base_Start_IT+0xd8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d115      	bne.n	8005242 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_TIM_Base_Start_IT+0xdc>)
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b06      	cmp	r3, #6
 8005226:	d015      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0xb4>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522e:	d011      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005240:	e008      	b.n	8005254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e000      	b.n	8005256 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40010000 	.word	0x40010000
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40010400 	.word	0x40010400
 8005278:	40001800 	.word	0x40001800
 800527c:	00010007 	.word	0x00010007

08005280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f905 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8f7 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f908 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0204 	mvn.w	r2, #4
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8db 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8cd 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f8de 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b08      	cmp	r3, #8
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0208 	mvn.w	r2, #8
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8b1 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8a3 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8b4 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b10      	cmp	r3, #16
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b10      	cmp	r3, #16
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0210 	mvn.w	r2, #16
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2208      	movs	r2, #8
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f887 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f879 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f88a 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0201 	mvn.w	r2, #1
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb fe00 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f914 	bl	8005658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d10e      	bne.n	800545e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d107      	bne.n	800545e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f907 	bl	800566c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d10e      	bne.n	800548a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d107      	bne.n	800548a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f838 	bl	80054fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b20      	cmp	r3, #32
 8005496:	d10e      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d107      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0220 	mvn.w	r2, #32
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8c7 	bl	8005644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a40      	ldr	r2, [pc, #256]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3c      	ldr	r2, [pc, #240]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3a      	ldr	r2, [pc, #232]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01f      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2b      	ldr	r2, [pc, #172]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <TIM_Base_SetConfig+0x128>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a26      	ldr	r2, [pc, #152]	; (8005640 <TIM_Base_SetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a10      	ldr	r2, [pc, #64]	; (8005624 <TIM_Base_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a12      	ldr	r2, [pc, #72]	; (8005634 <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a11      	ldr	r2, [pc, #68]	; (8005638 <TIM_Base_SetConfig+0x128>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <TIM_Base_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <TIM_Base_SetConfig+0x130>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40010400 	.word	0x40010400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800

08005644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e042      	b.n	8005718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fdb7 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2224      	movs	r2, #36	; 0x24
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f996 	bl	80059f4 <UART_SetConfig>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e022      	b.n	8005718 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 feea 	bl	80064b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 ff71 	bl	80065f8 <UART_CheckIdleState>
 8005716:	4603      	mov	r3, r0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005736:	2b20      	cmp	r3, #32
 8005738:	f040 8083 	bne.w	8005842 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_Transmit+0x28>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e07b      	b.n	8005844 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_UART_Transmit+0x3a>
 8005756:	2302      	movs	r3, #2
 8005758:	e074      	b.n	8005844 <HAL_UART_Transmit+0x124>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2221      	movs	r2, #33	; 0x21
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005772:	f7fb ff5d 	bl	8001630 <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d108      	bne.n	80057a4 <HAL_UART_Transmit+0x84>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e003      	b.n	80057ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80057b4:	e02c      	b.n	8005810 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 ff64 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e039      	b.n	8005844 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	3302      	adds	r3, #2
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e007      	b.n	80057fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1cc      	bne.n	80057b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	2140      	movs	r1, #64	; 0x40
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 ff31 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e000      	b.n	8005844 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005842:	2302      	movs	r3, #2
  }
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	2b20      	cmp	r3, #32
 8005864:	f040 80c0 	bne.w	80059e8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_UART_Receive+0x28>
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0b8      	b.n	80059ea <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_UART_Receive+0x3a>
 8005882:	2302      	movs	r3, #2
 8005884:	e0b1      	b.n	80059ea <HAL_UART_Receive+0x19e>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2222      	movs	r2, #34	; 0x22
 800589a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a4:	f7fb fec4 	bl	8001630 <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	d10e      	bne.n	80058e2 <HAL_UART_Receive+0x96>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_UART_Receive+0x8c>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d6:	e02d      	b.n	8005934 <HAL_UART_Receive+0xe8>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e0:	e028      	b.n	8005934 <HAL_UART_Receive+0xe8>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <HAL_UART_Receive+0xba>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_UART_Receive+0xb0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058fa:	e01b      	b.n	8005934 <HAL_UART_Receive+0xe8>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	227f      	movs	r2, #127	; 0x7f
 8005900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005904:	e016      	b.n	8005934 <HAL_UART_Receive+0xe8>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590e:	d10d      	bne.n	800592c <HAL_UART_Receive+0xe0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <HAL_UART_Receive+0xd6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	227f      	movs	r2, #127	; 0x7f
 800591c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005920:	e008      	b.n	8005934 <HAL_UART_Receive+0xe8>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	223f      	movs	r2, #63	; 0x3f
 8005926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800592a:	e003      	b.n	8005934 <HAL_UART_Receive+0xe8>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800593a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005944:	d108      	bne.n	8005958 <HAL_UART_Receive+0x10c>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e003      	b.n	8005960 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005968:	e032      	b.n	80059d0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	2120      	movs	r1, #32
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fe8a 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e032      	b.n	80059ea <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	b29a      	uxth	r2, r3
 8005992:	8a7b      	ldrh	r3, [r7, #18]
 8005994:	4013      	ands	r3, r2
 8005996:	b29a      	uxth	r2, r3
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	3302      	adds	r3, #2
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e00c      	b.n	80059be <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	8a7b      	ldrh	r3, [r7, #18]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4013      	ands	r3, r2
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1c6      	bne.n	800596a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4bbf      	ldr	r3, [pc, #764]	; (8005d20 <UART_SetConfig+0x32c>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4ab5      	ldr	r2, [pc, #724]	; (8005d24 <UART_SetConfig+0x330>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4bb0      	ldr	r3, [pc, #704]	; (8005d28 <UART_SetConfig+0x334>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f023 010f 	bic.w	r1, r3, #15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4aa7      	ldr	r2, [pc, #668]	; (8005d2c <UART_SetConfig+0x338>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d176      	bne.n	8005b80 <UART_SetConfig+0x18c>
 8005a92:	4ba7      	ldr	r3, [pc, #668]	; (8005d30 <UART_SetConfig+0x33c>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9a:	2b28      	cmp	r3, #40	; 0x28
 8005a9c:	d86c      	bhi.n	8005b78 <UART_SetConfig+0x184>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0xb0>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005b49 	.word	0x08005b49
 8005aa8:	08005b79 	.word	0x08005b79
 8005aac:	08005b79 	.word	0x08005b79
 8005ab0:	08005b79 	.word	0x08005b79
 8005ab4:	08005b79 	.word	0x08005b79
 8005ab8:	08005b79 	.word	0x08005b79
 8005abc:	08005b79 	.word	0x08005b79
 8005ac0:	08005b79 	.word	0x08005b79
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b79 	.word	0x08005b79
 8005acc:	08005b79 	.word	0x08005b79
 8005ad0:	08005b79 	.word	0x08005b79
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005b79 	.word	0x08005b79
 8005adc:	08005b79 	.word	0x08005b79
 8005ae0:	08005b79 	.word	0x08005b79
 8005ae4:	08005b59 	.word	0x08005b59
 8005ae8:	08005b79 	.word	0x08005b79
 8005aec:	08005b79 	.word	0x08005b79
 8005af0:	08005b79 	.word	0x08005b79
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005b79 	.word	0x08005b79
 8005afc:	08005b79 	.word	0x08005b79
 8005b00:	08005b79 	.word	0x08005b79
 8005b04:	08005b61 	.word	0x08005b61
 8005b08:	08005b79 	.word	0x08005b79
 8005b0c:	08005b79 	.word	0x08005b79
 8005b10:	08005b79 	.word	0x08005b79
 8005b14:	08005b79 	.word	0x08005b79
 8005b18:	08005b79 	.word	0x08005b79
 8005b1c:	08005b79 	.word	0x08005b79
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b79 	.word	0x08005b79
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b79 	.word	0x08005b79
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e222      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e21e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e21a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e216      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b68:	2320      	movs	r3, #32
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e212      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e20e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e20a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a6b      	ldr	r2, [pc, #428]	; (8005d34 <UART_SetConfig+0x340>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d130      	bne.n	8005bec <UART_SetConfig+0x1f8>
 8005b8a:	4b69      	ldr	r3, [pc, #420]	; (8005d30 <UART_SetConfig+0x33c>)
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d826      	bhi.n	8005be4 <UART_SetConfig+0x1f0>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x1a8>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bb5 	.word	0x08005bb5
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bc5 	.word	0x08005bc5
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e1ec      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e1e8      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e1e4      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd2:	e1e0      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bda:	e1dc      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bdc:	2340      	movs	r3, #64	; 0x40
 8005bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be2:	e1d8      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bea:	e1d4      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a51      	ldr	r2, [pc, #324]	; (8005d38 <UART_SetConfig+0x344>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d130      	bne.n	8005c58 <UART_SetConfig+0x264>
 8005bf6:	4b4e      	ldr	r3, [pc, #312]	; (8005d30 <UART_SetConfig+0x33c>)
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d826      	bhi.n	8005c50 <UART_SetConfig+0x25c>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0x214>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e1b6      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e1b2      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e1ae      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e1aa      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e1a6      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c48:	2340      	movs	r3, #64	; 0x40
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e1a2      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e19e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a37      	ldr	r2, [pc, #220]	; (8005d3c <UART_SetConfig+0x348>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d130      	bne.n	8005cc4 <UART_SetConfig+0x2d0>
 8005c62:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <UART_SetConfig+0x33c>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d826      	bhi.n	8005cbc <UART_SetConfig+0x2c8>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x280>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005c9d 	.word	0x08005c9d
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c92:	e180      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e17c      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e178      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005caa:	e174      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005cac:	2320      	movs	r3, #32
 8005cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb2:	e170      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cba:	e16c      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc2:	e168      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <UART_SetConfig+0x34c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d142      	bne.n	8005d54 <UART_SetConfig+0x360>
 8005cce:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <UART_SetConfig+0x33c>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d838      	bhi.n	8005d4c <UART_SetConfig+0x358>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x2ec>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d45 	.word	0x08005d45
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfe:	e14a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e146      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e142      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e13e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e13a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d20:	cfff69f3 	.word	0xcfff69f3
 8005d24:	58000c00 	.word	0x58000c00
 8005d28:	11fff4ff 	.word	0x11fff4ff
 8005d2c:	40011000 	.word	0x40011000
 8005d30:	58024400 	.word	0x58024400
 8005d34:	40004400 	.word	0x40004400
 8005d38:	40004800 	.word	0x40004800
 8005d3c:	40004c00 	.word	0x40004c00
 8005d40:	40005000 	.word	0x40005000
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e124      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e120      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4acc      	ldr	r2, [pc, #816]	; (800608c <UART_SetConfig+0x698>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d176      	bne.n	8005e4c <UART_SetConfig+0x458>
 8005d5e:	4bcc      	ldr	r3, [pc, #816]	; (8006090 <UART_SetConfig+0x69c>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d66:	2b28      	cmp	r3, #40	; 0x28
 8005d68:	d86c      	bhi.n	8005e44 <UART_SetConfig+0x450>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x37c>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005e15 	.word	0x08005e15
 8005d74:	08005e45 	.word	0x08005e45
 8005d78:	08005e45 	.word	0x08005e45
 8005d7c:	08005e45 	.word	0x08005e45
 8005d80:	08005e45 	.word	0x08005e45
 8005d84:	08005e45 	.word	0x08005e45
 8005d88:	08005e45 	.word	0x08005e45
 8005d8c:	08005e45 	.word	0x08005e45
 8005d90:	08005e1d 	.word	0x08005e1d
 8005d94:	08005e45 	.word	0x08005e45
 8005d98:	08005e45 	.word	0x08005e45
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e45 	.word	0x08005e45
 8005da8:	08005e45 	.word	0x08005e45
 8005dac:	08005e45 	.word	0x08005e45
 8005db0:	08005e25 	.word	0x08005e25
 8005db4:	08005e45 	.word	0x08005e45
 8005db8:	08005e45 	.word	0x08005e45
 8005dbc:	08005e45 	.word	0x08005e45
 8005dc0:	08005e45 	.word	0x08005e45
 8005dc4:	08005e45 	.word	0x08005e45
 8005dc8:	08005e45 	.word	0x08005e45
 8005dcc:	08005e45 	.word	0x08005e45
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005e45 	.word	0x08005e45
 8005dd8:	08005e45 	.word	0x08005e45
 8005ddc:	08005e45 	.word	0x08005e45
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08005e45 	.word	0x08005e45
 8005de8:	08005e45 	.word	0x08005e45
 8005dec:	08005e45 	.word	0x08005e45
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005e45 	.word	0x08005e45
 8005dfc:	08005e45 	.word	0x08005e45
 8005e00:	08005e45 	.word	0x08005e45
 8005e04:	08005e45 	.word	0x08005e45
 8005e08:	08005e45 	.word	0x08005e45
 8005e0c:	08005e45 	.word	0x08005e45
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e0bc      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e0b8      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e0b4      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e0b0      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e0ac      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e0a8      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e0a4      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a90      	ldr	r2, [pc, #576]	; (8006094 <UART_SetConfig+0x6a0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d130      	bne.n	8005eb8 <UART_SetConfig+0x4c4>
 8005e56:	4b8e      	ldr	r3, [pc, #568]	; (8006090 <UART_SetConfig+0x69c>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d826      	bhi.n	8005eb0 <UART_SetConfig+0x4bc>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x474>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e086      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e082      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e07e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e07a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e076      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e072      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e06e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a76      	ldr	r2, [pc, #472]	; (8006098 <UART_SetConfig+0x6a4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d130      	bne.n	8005f24 <UART_SetConfig+0x530>
 8005ec2:	4b73      	ldr	r3, [pc, #460]	; (8006090 <UART_SetConfig+0x69c>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d826      	bhi.n	8005f1c <UART_SetConfig+0x528>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x4e0>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e050      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e04c      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e048      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e044      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e040      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	e03c      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	e038      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5c      	ldr	r2, [pc, #368]	; (800609c <UART_SetConfig+0x6a8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d130      	bne.n	8005f90 <UART_SetConfig+0x59c>
 8005f2e:	4b58      	ldr	r3, [pc, #352]	; (8006090 <UART_SetConfig+0x69c>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d826      	bhi.n	8005f88 <UART_SetConfig+0x594>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x54c>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e01a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e016      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e012      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e00e      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e00a      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e006      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	e002      	b.n	8005f96 <UART_SetConfig+0x5a2>
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a40      	ldr	r2, [pc, #256]	; (800609c <UART_SetConfig+0x6a8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	f040 80ef 	bne.w	8006180 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	dc46      	bgt.n	8006038 <UART_SetConfig+0x644>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	f2c0 8081 	blt.w	80060b2 <UART_SetConfig+0x6be>
 8005fb0:	3b02      	subs	r3, #2
 8005fb2:	2b1e      	cmp	r3, #30
 8005fb4:	d87d      	bhi.n	80060b2 <UART_SetConfig+0x6be>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x5c8>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	0800603f 	.word	0x0800603f
 8005fc0:	080060b3 	.word	0x080060b3
 8005fc4:	08006047 	.word	0x08006047
 8005fc8:	080060b3 	.word	0x080060b3
 8005fcc:	080060b3 	.word	0x080060b3
 8005fd0:	080060b3 	.word	0x080060b3
 8005fd4:	08006057 	.word	0x08006057
 8005fd8:	080060b3 	.word	0x080060b3
 8005fdc:	080060b3 	.word	0x080060b3
 8005fe0:	080060b3 	.word	0x080060b3
 8005fe4:	080060b3 	.word	0x080060b3
 8005fe8:	080060b3 	.word	0x080060b3
 8005fec:	080060b3 	.word	0x080060b3
 8005ff0:	080060b3 	.word	0x080060b3
 8005ff4:	08006067 	.word	0x08006067
 8005ff8:	080060b3 	.word	0x080060b3
 8005ffc:	080060b3 	.word	0x080060b3
 8006000:	080060b3 	.word	0x080060b3
 8006004:	080060b3 	.word	0x080060b3
 8006008:	080060b3 	.word	0x080060b3
 800600c:	080060b3 	.word	0x080060b3
 8006010:	080060b3 	.word	0x080060b3
 8006014:	080060b3 	.word	0x080060b3
 8006018:	080060b3 	.word	0x080060b3
 800601c:	080060b3 	.word	0x080060b3
 8006020:	080060b3 	.word	0x080060b3
 8006024:	080060b3 	.word	0x080060b3
 8006028:	080060b3 	.word	0x080060b3
 800602c:	080060b3 	.word	0x080060b3
 8006030:	080060b3 	.word	0x080060b3
 8006034:	080060a5 	.word	0x080060a5
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d036      	beq.n	80060aa <UART_SetConfig+0x6b6>
 800603c:	e039      	b.n	80060b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800603e:	f7fe fc2b 	bl	8004898 <HAL_RCCEx_GetD3PCLK1Freq>
 8006042:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006044:	e03b      	b.n	80060be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006046:	f107 0314 	add.w	r3, r7, #20
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fc3a 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006054:	e033      	b.n	80060be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fd86 	bl	8004b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006064:	e02b      	b.n	80060be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <UART_SetConfig+0x69c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <UART_SetConfig+0x69c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <UART_SetConfig+0x6ac>)
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006084:	e01b      	b.n	80060be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <UART_SetConfig+0x6ac>)
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800608a:	e018      	b.n	80060be <UART_SetConfig+0x6ca>
 800608c:	40011400 	.word	0x40011400
 8006090:	58024400 	.word	0x58024400
 8006094:	40007800 	.word	0x40007800
 8006098:	40007c00 	.word	0x40007c00
 800609c:	58000c00 	.word	0x58000c00
 80060a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060a4:	4bc4      	ldr	r3, [pc, #784]	; (80063b8 <UART_SetConfig+0x9c4>)
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060a8:	e009      	b.n	80060be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060b0:	e005      	b.n	80060be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 81da 	beq.w	800647a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	4abc      	ldr	r2, [pc, #752]	; (80063bc <UART_SetConfig+0x9c8>)
 80060cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d0:	461a      	mov	r2, r3
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d305      	bcc.n	80060f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060fc:	e1bd      	b.n	800647a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	4618      	mov	r0, r3
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	4aac      	ldr	r2, [pc, #688]	; (80063bc <UART_SetConfig+0x9c8>)
 800610c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006110:	b29a      	uxth	r2, r3
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	f7fa f8e3 	bl	80002e0 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	020b      	lsls	r3, r1, #8
 800612c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006130:	0202      	lsls	r2, r0, #8
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	6849      	ldr	r1, [r1, #4]
 8006136:	0849      	lsrs	r1, r1, #1
 8006138:	4608      	mov	r0, r1
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	1814      	adds	r4, r2, r0
 8006140:	eb43 0501 	adc.w	r5, r3, r1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	461a      	mov	r2, r3
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	4620      	mov	r0, r4
 8006150:	4629      	mov	r1, r5
 8006152:	f7fa f8c5 	bl	80002e0 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4613      	mov	r3, r2
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006164:	d308      	bcc.n	8006178 <UART_SetConfig+0x784>
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616c:	d204      	bcs.n	8006178 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	e180      	b.n	800647a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800617e:	e17c      	b.n	800647a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006188:	f040 80bf 	bne.w	800630a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800618c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006190:	2b20      	cmp	r3, #32
 8006192:	dc49      	bgt.n	8006228 <UART_SetConfig+0x834>
 8006194:	2b00      	cmp	r3, #0
 8006196:	db7c      	blt.n	8006292 <UART_SetConfig+0x89e>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d87a      	bhi.n	8006292 <UART_SetConfig+0x89e>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0x7b0>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	0800622f 	.word	0x0800622f
 80061a8:	08006237 	.word	0x08006237
 80061ac:	08006293 	.word	0x08006293
 80061b0:	08006293 	.word	0x08006293
 80061b4:	0800623f 	.word	0x0800623f
 80061b8:	08006293 	.word	0x08006293
 80061bc:	08006293 	.word	0x08006293
 80061c0:	08006293 	.word	0x08006293
 80061c4:	0800624f 	.word	0x0800624f
 80061c8:	08006293 	.word	0x08006293
 80061cc:	08006293 	.word	0x08006293
 80061d0:	08006293 	.word	0x08006293
 80061d4:	08006293 	.word	0x08006293
 80061d8:	08006293 	.word	0x08006293
 80061dc:	08006293 	.word	0x08006293
 80061e0:	08006293 	.word	0x08006293
 80061e4:	0800625f 	.word	0x0800625f
 80061e8:	08006293 	.word	0x08006293
 80061ec:	08006293 	.word	0x08006293
 80061f0:	08006293 	.word	0x08006293
 80061f4:	08006293 	.word	0x08006293
 80061f8:	08006293 	.word	0x08006293
 80061fc:	08006293 	.word	0x08006293
 8006200:	08006293 	.word	0x08006293
 8006204:	08006293 	.word	0x08006293
 8006208:	08006293 	.word	0x08006293
 800620c:	08006293 	.word	0x08006293
 8006210:	08006293 	.word	0x08006293
 8006214:	08006293 	.word	0x08006293
 8006218:	08006293 	.word	0x08006293
 800621c:	08006293 	.word	0x08006293
 8006220:	08006293 	.word	0x08006293
 8006224:	08006285 	.word	0x08006285
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d02e      	beq.n	800628a <UART_SetConfig+0x896>
 800622c:	e031      	b.n	8006292 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fd fb55 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8006232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006234:	e033      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006236:	f7fd fb67 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 800623a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800623c:	e02f      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623e:	f107 0314 	add.w	r3, r7, #20
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fb3e 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800624c:	e027      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fc8a 	bl	8004b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800625c:	e01f      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625e:	4b58      	ldr	r3, [pc, #352]	; (80063c0 <UART_SetConfig+0x9cc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800626a:	4b55      	ldr	r3, [pc, #340]	; (80063c0 <UART_SetConfig+0x9cc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	4a53      	ldr	r2, [pc, #332]	; (80063c4 <UART_SetConfig+0x9d0>)
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800627c:	e00f      	b.n	800629e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800627e:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <UART_SetConfig+0x9d0>)
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006282:	e00c      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006284:	4b4c      	ldr	r3, [pc, #304]	; (80063b8 <UART_SetConfig+0x9c4>)
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006288:	e009      	b.n	800629e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006290:	e005      	b.n	800629e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800629c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80ea 	beq.w	800647a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	4a44      	ldr	r2, [pc, #272]	; (80063bc <UART_SetConfig+0x9c8>)
 80062ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b0:	461a      	mov	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b8:	005a      	lsls	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d916      	bls.n	8006302 <UART_SetConfig+0x90e>
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062da:	d212      	bcs.n	8006302 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f023 030f 	bic.w	r3, r3, #15
 80062e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f4:	4313      	orrs	r3, r2
 80062f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062fe:	60da      	str	r2, [r3, #12]
 8006300:	e0bb      	b.n	800647a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006308:	e0b7      	b.n	800647a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800630a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800630e:	2b20      	cmp	r3, #32
 8006310:	dc4a      	bgt.n	80063a8 <UART_SetConfig+0x9b4>
 8006312:	2b00      	cmp	r3, #0
 8006314:	f2c0 8086 	blt.w	8006424 <UART_SetConfig+0xa30>
 8006318:	2b20      	cmp	r3, #32
 800631a:	f200 8083 	bhi.w	8006424 <UART_SetConfig+0xa30>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x930>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	080063af 	.word	0x080063af
 8006328:	080063c9 	.word	0x080063c9
 800632c:	08006425 	.word	0x08006425
 8006330:	08006425 	.word	0x08006425
 8006334:	080063d1 	.word	0x080063d1
 8006338:	08006425 	.word	0x08006425
 800633c:	08006425 	.word	0x08006425
 8006340:	08006425 	.word	0x08006425
 8006344:	080063e1 	.word	0x080063e1
 8006348:	08006425 	.word	0x08006425
 800634c:	08006425 	.word	0x08006425
 8006350:	08006425 	.word	0x08006425
 8006354:	08006425 	.word	0x08006425
 8006358:	08006425 	.word	0x08006425
 800635c:	08006425 	.word	0x08006425
 8006360:	08006425 	.word	0x08006425
 8006364:	080063f1 	.word	0x080063f1
 8006368:	08006425 	.word	0x08006425
 800636c:	08006425 	.word	0x08006425
 8006370:	08006425 	.word	0x08006425
 8006374:	08006425 	.word	0x08006425
 8006378:	08006425 	.word	0x08006425
 800637c:	08006425 	.word	0x08006425
 8006380:	08006425 	.word	0x08006425
 8006384:	08006425 	.word	0x08006425
 8006388:	08006425 	.word	0x08006425
 800638c:	08006425 	.word	0x08006425
 8006390:	08006425 	.word	0x08006425
 8006394:	08006425 	.word	0x08006425
 8006398:	08006425 	.word	0x08006425
 800639c:	08006425 	.word	0x08006425
 80063a0:	08006425 	.word	0x08006425
 80063a4:	08006417 	.word	0x08006417
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d037      	beq.n	800641c <UART_SetConfig+0xa28>
 80063ac:	e03a      	b.n	8006424 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fd fa95 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 80063b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063b4:	e03c      	b.n	8006430 <UART_SetConfig+0xa3c>
 80063b6:	bf00      	nop
 80063b8:	003d0900 	.word	0x003d0900
 80063bc:	0800a5b0 	.word	0x0800a5b0
 80063c0:	58024400 	.word	0x58024400
 80063c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fd fa9e 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 80063cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063ce:	e02f      	b.n	8006430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d0:	f107 0314 	add.w	r3, r7, #20
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fa75 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063de:	e027      	b.n	8006430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fbc1 	bl	8004b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ee:	e01f      	b.n	8006430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063f0:	4b2c      	ldr	r3, [pc, #176]	; (80064a4 <UART_SetConfig+0xab0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063fc:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <UART_SetConfig+0xab0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <UART_SetConfig+0xab4>)
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800640e:	e00f      	b.n	8006430 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <UART_SetConfig+0xab4>)
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006414:	e00c      	b.n	8006430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006416:	4b25      	ldr	r3, [pc, #148]	; (80064ac <UART_SetConfig+0xab8>)
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641a:	e009      	b.n	8006430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006422:	e005      	b.n	8006430 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800642e:	bf00      	nop
    }

    if (pclk != 0U)
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d021      	beq.n	800647a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <UART_SetConfig+0xabc>)
 800643c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006440:	461a      	mov	r2, r3
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	fbb3 f2f2 	udiv	r2, r3, r2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	b29b      	uxth	r3, r3
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d908      	bls.n	8006474 <UART_SetConfig+0xa80>
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d204      	bcs.n	8006474 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	e002      	b.n	800647a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006496:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800649a:	4618      	mov	r0, r3
 800649c:	3738      	adds	r7, #56	; 0x38
 800649e:	46bd      	mov	sp, r7
 80064a0:	bdb0      	pop	{r4, r5, r7, pc}
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	003d0900 	.word	0x003d0900
 80064b0:	0800a5b0 	.word	0x0800a5b0

080064b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01a      	beq.n	80065ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d10a      	bne.n	80065ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006608:	f7fb f812 	bl	8001630 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d10e      	bne.n	800663a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f82f 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e025      	b.n	8006686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d10e      	bne.n	8006666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f819 	bl	800668e <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00f      	b.n	8006686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669e:	e062      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d05e      	beq.n	8006766 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a8:	f7fa ffc2 	bl	8001630 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d302      	bcc.n	80066be <UART_WaitOnFlagUntilTimeout+0x30>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11d      	bne.n	80066fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e045      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02e      	beq.n	8006766 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006716:	d126      	bne.n	8006766 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006720:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006730:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0201 	bic.w	r2, r2, #1
 8006740:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e00f      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4013      	ands	r3, r2
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d08d      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e027      	b.n	80067f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2224      	movs	r2, #36	; 0x24
 80067b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e02d      	b.n	8006874 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f84f 	bl	80068f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006890:	2302      	movs	r3, #2
 8006892:	e02d      	b.n	80068f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f811 	bl	80068f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006904:	2b00      	cmp	r3, #0
 8006906:	d108      	bne.n	800691a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006918:	e031      	b.n	800697e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800691a:	2310      	movs	r3, #16
 800691c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800691e:	2310      	movs	r3, #16
 8006920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	0e5b      	lsrs	r3, r3, #25
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	0f5b      	lsrs	r3, r3, #29
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	7b3a      	ldrb	r2, [r7, #12]
 8006946:	4911      	ldr	r1, [pc, #68]	; (800698c <UARTEx_SetNbDataToProcess+0x94>)
 8006948:	5c8a      	ldrb	r2, [r1, r2]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800694e:	7b3a      	ldrb	r2, [r7, #12]
 8006950:	490f      	ldr	r1, [pc, #60]	; (8006990 <UARTEx_SetNbDataToProcess+0x98>)
 8006952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006954:	fb93 f3f2 	sdiv	r3, r3, r2
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	7b7a      	ldrb	r2, [r7, #13]
 8006964:	4909      	ldr	r1, [pc, #36]	; (800698c <UARTEx_SetNbDataToProcess+0x94>)
 8006966:	5c8a      	ldrb	r2, [r1, r2]
 8006968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800696c:	7b7a      	ldrb	r2, [r7, #13]
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <UARTEx_SetNbDataToProcess+0x98>)
 8006970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006972:	fb93 f3f2 	sdiv	r3, r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	0800a5c8 	.word	0x0800a5c8
 8006990:	0800a5d0 	.word	0x0800a5d0

08006994 <__NVIC_SetPriority>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db0a      	blt.n	80069be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	490c      	ldr	r1, [pc, #48]	; (80069e0 <__NVIC_SetPriority+0x4c>)
 80069ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069b2:	0112      	lsls	r2, r2, #4
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069bc:	e00a      	b.n	80069d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <__NVIC_SetPriority+0x50>)
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	3b04      	subs	r3, #4
 80069cc:	0112      	lsls	r2, r2, #4
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	440b      	add	r3, r1
 80069d2:	761a      	strb	r2, [r3, #24]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	e000e100 	.word	0xe000e100
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <SysTick_Handler+0x1c>)
 80069ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069f0:	f002 fc3c 	bl	800926c <xTaskGetSchedulerState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d001      	beq.n	80069fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069fa:	f000 fef5 	bl	80077e8 <xPortSysTickHandler>
  }
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000e010 	.word	0xe000e010

08006a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f06f 0004 	mvn.w	r0, #4
 8006a12:	f7ff ffbf 	bl	8006994 <__NVIC_SetPriority>
#endif
}
 8006a16:	bf00      	nop
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	603b      	str	r3, [r7, #0]
  return(result);
 8006a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a2e:	f06f 0305 	mvn.w	r3, #5
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e00c      	b.n	8006a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <osKernelInitialize+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a3e:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <osKernelInitialize+0x44>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	e002      	b.n	8006a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a50:	687b      	ldr	r3, [r7, #4]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	24000098 	.word	0x24000098

08006a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6a:	f3ef 8305 	mrs	r3, IPSR
 8006a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a76:	f06f 0305 	mvn.w	r3, #5
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	e010      	b.n	8006aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <osKernelStart+0x48>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d109      	bne.n	8006a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a86:	f7ff ffbf 	bl	8006a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <osKernelStart+0x48>)
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a90:	f001 ff90 	bl	80089b4 <vTaskStartScheduler>
      stat = osOK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e002      	b.n	8006aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	24000098 	.word	0x24000098

08006ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08e      	sub	sp, #56	; 0x38
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac0:	f3ef 8305 	mrs	r3, IPSR
 8006ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d17e      	bne.n	8006bca <osThreadNew+0x11a>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d07b      	beq.n	8006bca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ad6:	2318      	movs	r3, #24
 8006ad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d045      	beq.n	8006b76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <osThreadNew+0x48>
        name = attr->name;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <osThreadNew+0x6e>
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b38      	cmp	r3, #56	; 0x38
 8006b10:	d805      	bhi.n	8006b1e <osThreadNew+0x6e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <osThreadNew+0x72>
        return (NULL);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e054      	b.n	8006bcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <osThreadNew+0xa8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2bbb      	cmp	r3, #187	; 0xbb
 8006b40:	d90a      	bls.n	8006b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <osThreadNew+0xa8>
        mem = 1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e010      	b.n	8006b7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <osThreadNew+0xca>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <osThreadNew+0xca>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <osThreadNew+0xca>
          mem = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e001      	b.n	8006b7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d110      	bne.n	8006ba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b88:	9202      	str	r2, [sp, #8]
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f001 fd20 	bl	80085dc <xTaskCreateStatic>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e013      	b.n	8006bca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 fd6b 	bl	8008696 <xTaskCreate>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d001      	beq.n	8006bca <osThreadNew+0x11a>
            hTask = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bca:	693b      	ldr	r3, [r7, #16]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3728      	adds	r7, #40	; 0x28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bdc:	f3ef 8305 	mrs	r3, IPSR
 8006be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8006be8:	f06f 0305 	mvn.w	r3, #5
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e007      	b.n	8006c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fea6 	bl	800894c <vTaskDelay>
    }
  }

  return (stat);
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c16:	f3ef 8305 	mrs	r3, IPSR
 8006c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c1c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d12d      	bne.n	8006c7e <osEventFlagsNew+0x74>
    mem = -1;
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295
 8006c26:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <osEventFlagsNew+0x3a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b1f      	cmp	r3, #31
 8006c3c:	d902      	bls.n	8006c44 <osEventFlagsNew+0x3a>
        mem = 1;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e00c      	b.n	8006c5e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <osEventFlagsNew+0x54>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <osEventFlagsNew+0x54>
          mem = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	e001      	b.n	8006c5e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d106      	bne.n	8006c72 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f90f 	bl	8006e8c <xEventGroupCreateStatic>
 8006c6e:	6178      	str	r0, [r7, #20]
 8006c70:	e005      	b.n	8006c7e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006c78:	f000 f93f 	bl	8006efa <xEventGroupCreate>
 8006c7c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006c7e:	697b      	ldr	r3, [r7, #20]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c98:	f3ef 8305 	mrs	r3, IPSR
 8006c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d175      	bne.n	8006d90 <osSemaphoreNew+0x108>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d072      	beq.n	8006d90 <osSemaphoreNew+0x108>
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d86e      	bhi.n	8006d90 <osSemaphoreNew+0x108>
    mem = -1;
 8006cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d015      	beq.n	8006cea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <osSemaphoreNew+0x4c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b4f      	cmp	r3, #79	; 0x4f
 8006ccc:	d902      	bls.n	8006cd4 <osSemaphoreNew+0x4c>
        mem = 1;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e00c      	b.n	8006cee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <osSemaphoreNew+0x66>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <osSemaphoreNew+0x66>
          mem = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e001      	b.n	8006cee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d04c      	beq.n	8006d90 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d128      	bne.n	8006d4e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10a      	bne.n	8006d18 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2203      	movs	r2, #3
 8006d08:	9200      	str	r2, [sp, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f000 fe62 	bl	80079d8 <xQueueGenericCreateStatic>
 8006d14:	61f8      	str	r0, [r7, #28]
 8006d16:	e005      	b.n	8006d24 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d18:	2203      	movs	r2, #3
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	f000 fed3 	bl	8007ac8 <xQueueGenericCreate>
 8006d22:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d022      	beq.n	8006d70 <osSemaphoreNew+0xe8>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01f      	beq.n	8006d70 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d30:	2300      	movs	r3, #0
 8006d32:	2200      	movs	r2, #0
 8006d34:	2100      	movs	r1, #0
 8006d36:	69f8      	ldr	r0, [r7, #28]
 8006d38:	f000 ff8e 	bl	8007c58 <xQueueGenericSend>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d016      	beq.n	8006d70 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d42:	69f8      	ldr	r0, [r7, #28]
 8006d44:	f001 fa8e 	bl	8008264 <vQueueDelete>
            hSemaphore = NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e010      	b.n	8006d70 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d108      	bne.n	8006d66 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 ff10 	bl	8007b82 <xQueueCreateCountingSemaphoreStatic>
 8006d62:	61f8      	str	r0, [r7, #28]
 8006d64:	e004      	b.n	8006d70 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 ff41 	bl	8007bf0 <xQueueCreateCountingSemaphore>
 8006d6e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e001      	b.n	8006d88 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	69f8      	ldr	r0, [r7, #28]
 8006d8c:	f001 fb9e 	bl	80084cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006d90:	69fb      	ldr	r3, [r7, #28]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006db2:	f06f 0303 	mvn.w	r3, #3
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e02c      	b.n	8006e14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dba:	f3ef 8305 	mrs	r3, IPSR
 8006dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01a      	beq.n	8006dfc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006dca:	f107 0308 	add.w	r3, r7, #8
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6938      	ldr	r0, [r7, #16]
 8006dd2:	f001 f8da 	bl	8007f8a <xQueueGiveFromISR>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d003      	beq.n	8006de4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006ddc:	f06f 0302 	mvn.w	r3, #2
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e017      	b.n	8006e14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <osSemaphoreRelease+0x78>
 8006dea:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <osSemaphoreRelease+0x84>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	e00b      	b.n	8006e14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	6938      	ldr	r0, [r7, #16]
 8006e04:	f000 ff28 	bl	8007c58 <xQueueGenericSend>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d002      	beq.n	8006e14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006e0e:	f06f 0302 	mvn.w	r3, #2
 8006e12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a07      	ldr	r2, [pc, #28]	; (8006e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4a06      	ldr	r2, [pc, #24]	; (8006e54 <vApplicationGetIdleTaskMemory+0x30>)
 8006e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2280      	movs	r2, #128	; 0x80
 8006e40:	601a      	str	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	2400009c 	.word	0x2400009c
 8006e54:	24000158 	.word	0x24000158

08006e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a06      	ldr	r2, [pc, #24]	; (8006e88 <vApplicationGetTimerTaskMemory+0x30>)
 8006e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e76:	601a      	str	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	24000358 	.word	0x24000358
 8006e88:	24000414 	.word	0x24000414

08006e8c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d00a      	beq.n	8006ed0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	60fb      	str	r3, [r7, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fa0d 	bl	8007304 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006ef0:	697b      	ldr	r3, [r7, #20]
	}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006f00:	2020      	movs	r0, #32
 8006f02:	f000 f815 	bl	8006f30 <pvPortMalloc>
 8006f06:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f9f3 	bl	8007304 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006f24:	687b      	ldr	r3, [r7, #4]
	}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f3c:	f001 fdaa 	bl	8008a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f40:	4b5b      	ldr	r3, [pc, #364]	; (80070b0 <pvPortMalloc+0x180>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f48:	f000 f920 	bl	800718c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f4c:	4b59      	ldr	r3, [pc, #356]	; (80070b4 <pvPortMalloc+0x184>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 8093 	bne.w	8007080 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01d      	beq.n	8006f9c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f60:	2208      	movs	r2, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d014      	beq.n	8006f9c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f023 0307 	bic.w	r3, r3, #7
 8006f78:	3308      	adds	r3, #8
 8006f7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <pvPortMalloc+0x6c>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	617b      	str	r3, [r7, #20]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d06e      	beq.n	8007080 <pvPortMalloc+0x150>
 8006fa2:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <pvPortMalloc+0x188>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d869      	bhi.n	8007080 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fac:	4b43      	ldr	r3, [pc, #268]	; (80070bc <pvPortMalloc+0x18c>)
 8006fae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fb0:	4b42      	ldr	r3, [pc, #264]	; (80070bc <pvPortMalloc+0x18c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fb6:	e004      	b.n	8006fc2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d903      	bls.n	8006fd4 <pvPortMalloc+0xa4>
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f1      	bne.n	8006fb8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <pvPortMalloc+0x180>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d050      	beq.n	8007080 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	4413      	add	r3, r2
 8006fe6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d91f      	bls.n	8007040 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <pvPortMalloc+0xf8>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	613b      	str	r3, [r7, #16]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800703a:	69b8      	ldr	r0, [r7, #24]
 800703c:	f000 f908 	bl	8007250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <pvPortMalloc+0x188>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <pvPortMalloc+0x188>)
 800704c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800704e:	4b1a      	ldr	r3, [pc, #104]	; (80070b8 <pvPortMalloc+0x188>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <pvPortMalloc+0x190>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d203      	bcs.n	8007062 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <pvPortMalloc+0x188>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <pvPortMalloc+0x190>)
 8007060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <pvPortMalloc+0x184>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	431a      	orrs	r2, r3
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <pvPortMalloc+0x194>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <pvPortMalloc+0x194>)
 800707e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007080:	f001 fd16 	bl	8008ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <pvPortMalloc+0x174>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	60fb      	str	r3, [r7, #12]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <pvPortMalloc+0x172>
	return pvReturn;
 80070a4:	69fb      	ldr	r3, [r7, #28]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3728      	adds	r7, #40	; 0x28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2400441c 	.word	0x2400441c
 80070b4:	24004430 	.word	0x24004430
 80070b8:	24004420 	.word	0x24004420
 80070bc:	24004414 	.word	0x24004414
 80070c0:	24004424 	.word	0x24004424
 80070c4:	24004428 	.word	0x24004428

080070c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04d      	beq.n	8007176 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070da:	2308      	movs	r3, #8
 80070dc:	425b      	negs	r3, r3
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4b24      	ldr	r3, [pc, #144]	; (8007180 <vPortFree+0xb8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <vPortFree+0x44>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <vPortFree+0x62>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60bb      	str	r3, [r7, #8]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <vPortFree+0xb8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01e      	beq.n	8007176 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11a      	bne.n	8007176 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <vPortFree+0xb8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007150:	f001 fca0 	bl	8008a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <vPortFree+0xbc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4413      	add	r3, r2
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <vPortFree+0xbc>)
 8007160:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007162:	6938      	ldr	r0, [r7, #16]
 8007164:	f000 f874 	bl	8007250 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <vPortFree+0xc0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <vPortFree+0xc0>)
 8007170:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007172:	f001 fc9d 	bl	8008ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007176:	bf00      	nop
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	24004430 	.word	0x24004430
 8007184:	24004420 	.word	0x24004420
 8007188:	2400442c 	.word	0x2400442c

0800718c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007192:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007198:	4b27      	ldr	r3, [pc, #156]	; (8007238 <prvHeapInit+0xac>)
 800719a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0307 	bic.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <prvHeapInit+0xac>)
 80071bc:	4413      	add	r3, r2
 80071be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <prvHeapInit+0xb0>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <prvHeapInit+0xb0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <prvHeapInit+0xb4>)
 80071ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071ee:	4b14      	ldr	r3, [pc, #80]	; (8007240 <prvHeapInit+0xb4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071f6:	4b12      	ldr	r3, [pc, #72]	; (8007240 <prvHeapInit+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800720c:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <prvHeapInit+0xb4>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <prvHeapInit+0xb8>)
 800721a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a09      	ldr	r2, [pc, #36]	; (8007248 <prvHeapInit+0xbc>)
 8007222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <prvHeapInit+0xc0>)
 8007226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800722a:	601a      	str	r2, [r3, #0]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	24000814 	.word	0x24000814
 800723c:	24004414 	.word	0x24004414
 8007240:	2400441c 	.word	0x2400441c
 8007244:	24004424 	.word	0x24004424
 8007248:	24004420 	.word	0x24004420
 800724c:	24004430 	.word	0x24004430

08007250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007258:	4b28      	ldr	r3, [pc, #160]	; (80072fc <prvInsertBlockIntoFreeList+0xac>)
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e002      	b.n	8007264 <prvInsertBlockIntoFreeList+0x14>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d8f7      	bhi.n	800725e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d108      	bne.n	8007292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d118      	bne.n	80072d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b15      	ldr	r3, [pc, #84]	; (8007300 <prvInsertBlockIntoFreeList+0xb0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d00d      	beq.n	80072ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e008      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ce:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <prvInsertBlockIntoFreeList+0xb0>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e003      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d002      	beq.n	80072ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	24004414 	.word	0x24004414
 8007300:	2400441c 	.word	0x2400441c

08007304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f103 0208 	add.w	r2, r3, #8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f04f 32ff 	mov.w	r2, #4294967295
 800731c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f103 0208 	add.w	r2, r3, #8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f103 0208 	add.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d103      	bne.n	80073c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e00c      	b.n	80073e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3308      	adds	r3, #8
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e002      	b.n	80073d4 <vListInsert+0x2e>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d2f6      	bcs.n	80073ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	601a      	str	r2, [r3, #0]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6892      	ldr	r2, [r2, #8]
 800742e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6852      	ldr	r2, [r2, #4]
 8007438:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d103      	bne.n	800744c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3b04      	subs	r3, #4
 800747c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3b04      	subs	r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0201 	bic.w	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3b04      	subs	r3, #4
 800749a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800749c:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <pxPortInitialiseStack+0x64>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b14      	subs	r3, #20
 80074a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b04      	subs	r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f06f 0202 	mvn.w	r2, #2
 80074ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3b20      	subs	r3, #32
 80074c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	080074d5 	.word	0x080074d5

080074d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <prvTaskExitError+0x54>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d00a      	beq.n	80074fe <prvTaskExitError+0x2a>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	60fb      	str	r3, [r7, #12]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <prvTaskExitError+0x28>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60bb      	str	r3, [r7, #8]
}
 8007510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007512:	bf00      	nop
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0fc      	beq.n	8007514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	24000010 	.word	0x24000010
 800752c:	00000000 	.word	0x00000000

08007530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <pxCurrentTCBConst2>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	f380 8809 	msr	PSP, r0
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	4770      	bx	lr
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst2>:
 8007550:	2400443c 	.word	0x2400443c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007558:	4808      	ldr	r0, [pc, #32]	; (800757c <prvPortStartFirstTask+0x24>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8814 	msr	CONTROL, r0
 800756a:	b662      	cpsie	i
 800756c:	b661      	cpsie	f
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	df00      	svc	0
 8007578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800757a:	bf00      	nop
 800757c:	e000ed08 	.word	0xe000ed08

08007580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007586:	4b46      	ldr	r3, [pc, #280]	; (80076a0 <xPortStartScheduler+0x120>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a46      	ldr	r2, [pc, #280]	; (80076a4 <xPortStartScheduler+0x124>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	613b      	str	r3, [r7, #16]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075a6:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <xPortStartScheduler+0x120>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <xPortStartScheduler+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10a      	bne.n	80075c6 <xPortStartScheduler+0x46>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075c6:	4b39      	ldr	r3, [pc, #228]	; (80076ac <xPortStartScheduler+0x12c>)
 80075c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	22ff      	movs	r2, #255	; 0xff
 80075d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <xPortStartScheduler+0x130>)
 80075ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <xPortStartScheduler+0x134>)
 80075f0:	2207      	movs	r2, #7
 80075f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075f4:	e009      	b.n	800760a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075f6:	4b2f      	ldr	r3, [pc, #188]	; (80076b4 <xPortStartScheduler+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <xPortStartScheduler+0x134>)
 80075fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007612:	2b80      	cmp	r3, #128	; 0x80
 8007614:	d0ef      	beq.n	80075f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007616:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <xPortStartScheduler+0x134>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1c3 0307 	rsb	r3, r3, #7
 800761e:	2b04      	cmp	r3, #4
 8007620:	d00a      	beq.n	8007638 <xPortStartScheduler+0xb8>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60bb      	str	r3, [r7, #8]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007638:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <xPortStartScheduler+0x134>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <xPortStartScheduler+0x134>)
 8007640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <xPortStartScheduler+0x134>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800764a:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <xPortStartScheduler+0x134>)
 800764c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <xPortStartScheduler+0x138>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <xPortStartScheduler+0x138>)
 800765c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <xPortStartScheduler+0x138>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <xPortStartScheduler+0x138>)
 8007668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800766c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800766e:	f000 f8dd 	bl	800782c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <xPortStartScheduler+0x13c>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007678:	f000 f8fc 	bl	8007874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <xPortStartScheduler+0x140>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <xPortStartScheduler+0x140>)
 8007682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007688:	f7ff ff66 	bl	8007558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800768c:	f001 fb78 	bl	8008d80 <vTaskSwitchContext>
	prvTaskExitError();
 8007690:	f7ff ff20 	bl	80074d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000ed00 	.word	0xe000ed00
 80076a4:	410fc271 	.word	0x410fc271
 80076a8:	410fc270 	.word	0x410fc270
 80076ac:	e000e400 	.word	0xe000e400
 80076b0:	24004434 	.word	0x24004434
 80076b4:	24004438 	.word	0x24004438
 80076b8:	e000ed20 	.word	0xe000ed20
 80076bc:	24000010 	.word	0x24000010
 80076c0:	e000ef34 	.word	0xe000ef34

080076c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
}
 80076dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <vPortEnterCritical+0x58>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <vPortEnterCritical+0x58>)
 80076e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <vPortEnterCritical+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10f      	bne.n	8007710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <vPortEnterCritical+0x5c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <vPortEnterCritical+0x4c>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	603b      	str	r3, [r7, #0]
}
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <vPortEnterCritical+0x4a>
	}
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	24000010 	.word	0x24000010
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <vPortExitCritical+0x50>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <vPortExitCritical+0x24>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	607b      	str	r3, [r7, #4]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <vPortExitCritical+0x50>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <vPortExitCritical+0x50>)
 8007750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007752:	4b08      	ldr	r3, [pc, #32]	; (8007774 <vPortExitCritical+0x50>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <vPortExitCritical+0x42>
 800775a:	2300      	movs	r3, #0
 800775c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	24000010 	.word	0x24000010
	...

08007780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007780:	f3ef 8009 	mrs	r0, PSP
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <pxCurrentTCBConst>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	f01e 0f10 	tst.w	lr, #16
 8007790:	bf08      	it	eq
 8007792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077a4:	f380 8811 	msr	BASEPRI, r0
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f001 fae6 	bl	8008d80 <vTaskSwitchContext>
 80077b4:	f04f 0000 	mov.w	r0, #0
 80077b8:	f380 8811 	msr	BASEPRI, r0
 80077bc:	bc09      	pop	{r0, r3}
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	6808      	ldr	r0, [r1, #0]
 80077c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c6:	f01e 0f10 	tst.w	lr, #16
 80077ca:	bf08      	it	eq
 80077cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077d0:	f380 8809 	msr	PSP, r0
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst>:
 80077e0:	2400443c 	.word	0x2400443c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007802:	f001 fa03 	bl	8008c0c <xTaskIncrementTick>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <xPortSysTickHandler+0x40>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f383 8811 	msr	BASEPRI, r3
}
 800781e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <vPortSetupTimerInterrupt+0x38>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <vPortSetupTimerInterrupt+0x3c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <vPortSetupTimerInterrupt+0x40>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <vPortSetupTimerInterrupt+0x44>)
 800784a:	3b01      	subs	r3, #1
 800784c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800784e:	4b04      	ldr	r3, [pc, #16]	; (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007850:	2207      	movs	r2, #7
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	e000e010 	.word	0xe000e010
 8007864:	e000e018 	.word	0xe000e018
 8007868:	24000000 	.word	0x24000000
 800786c:	10624dd3 	.word	0x10624dd3
 8007870:	e000e014 	.word	0xe000e014

08007874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007884 <vPortEnableVFP+0x10>
 8007878:	6801      	ldr	r1, [r0, #0]
 800787a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800787e:	6001      	str	r1, [r0, #0]
 8007880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007882:	bf00      	nop
 8007884:	e000ed88 	.word	0xe000ed88

08007888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d914      	bls.n	80078c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <vPortValidateInterruptPriority+0x70>)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078a4:	4b15      	ldr	r3, [pc, #84]	; (80078fc <vPortValidateInterruptPriority+0x74>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	7afa      	ldrb	r2, [r7, #11]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d20a      	bcs.n	80078c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <vPortValidateInterruptPriority+0x78>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <vPortValidateInterruptPriority+0x7c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d90a      	bls.n	80078ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	603b      	str	r3, [r7, #0]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <vPortValidateInterruptPriority+0x60>
	}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	e000e3f0 	.word	0xe000e3f0
 80078fc:	24004434 	.word	0x24004434
 8007900:	e000ed0c 	.word	0xe000ed0c
 8007904:	24004438 	.word	0x24004438

08007908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueGenericReset+0x2a>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007932:	f7ff fec7 	bl	80076c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	441a      	add	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	3b01      	subs	r3, #1
 8007964:	68f9      	ldr	r1, [r7, #12]
 8007966:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	441a      	add	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d114      	bne.n	80079b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01a      	beq.n	80079c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3310      	adds	r3, #16
 8007994:	4618      	mov	r0, r3
 8007996:	f001 faa7 	bl	8008ee8 <xTaskRemoveFromEventList>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d012      	beq.n	80079c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <xQueueGenericReset+0xcc>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	e009      	b.n	80079c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3310      	adds	r3, #16
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fca4 	bl	8007304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3324      	adds	r3, #36	; 0x24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fc9f 	bl	8007304 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079c6:	f7ff fead 	bl	8007724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079ca:	2301      	movs	r3, #1
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08e      	sub	sp, #56	; 0x38
 80079dc:	af02      	add	r7, sp, #8
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <xQueueGenericCreateStatic+0x52>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <xQueueGenericCreateStatic+0x56>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <xQueueGenericCreateStatic+0x58>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	623b      	str	r3, [r7, #32]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <xQueueGenericCreateStatic+0x7e>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <xQueueGenericCreateStatic+0x82>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericCreateStatic+0x84>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	61fb      	str	r3, [r7, #28]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a76:	2350      	movs	r3, #80	; 0x50
 8007a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b50      	cmp	r3, #80	; 0x50
 8007a7e:	d00a      	beq.n	8007a96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	61bb      	str	r3, [r7, #24]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f83f 	bl	8007b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3730      	adds	r7, #48	; 0x30
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	613b      	str	r3, [r7, #16]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	3350      	adds	r3, #80	; 0x50
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fa15 	bl	8006f30 <pvPortMalloc>
 8007b06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d011      	beq.n	8007b32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	3350      	adds	r3, #80	; 0x50
 8007b16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b20:	79fa      	ldrb	r2, [r7, #7]
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4613      	mov	r3, r2
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f805 	bl	8007b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b32:	69bb      	ldr	r3, [r7, #24]
	}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d103      	bne.n	8007b58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e002      	b.n	8007b5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	69b8      	ldr	r0, [r7, #24]
 8007b6e:	f7ff fecb 	bl	8007908 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b08a      	sub	sp, #40	; 0x28
 8007b86:	af02      	add	r7, sp, #8
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61bb      	str	r3, [r7, #24]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d90a      	bls.n	8007bc8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	617b      	str	r3, [r7, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007bc8:	2302      	movs	r3, #2
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff ff00 	bl	80079d8 <xQueueGenericCreateStatic>
 8007bd8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007be6:	69fb      	ldr	r3, [r7, #28]
	}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d90a      	bls.n	8007c34 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c34:	2202      	movs	r2, #2
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff45 	bl	8007ac8 <xQueueGenericCreate>
 8007c3e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c4c:	697b      	ldr	r3, [r7, #20]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	; 0x38
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c66:	2300      	movs	r3, #0
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <xQueueGenericSend+0x32>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <xQueueGenericSend+0x40>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <xQueueGenericSend+0x44>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <xQueueGenericSend+0x46>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x6e>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0x72>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0x74>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	623b      	str	r3, [r7, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ce6:	f001 fac1 	bl	800926c <xTaskGetSchedulerState>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <xQueueGenericSend+0x9e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSend+0xa2>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSend+0xa4>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61fb      	str	r3, [r7, #28]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d16:	f7ff fcd5 	bl	80076c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d302      	bcc.n	8007d2c <xQueueGenericSend+0xd4>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d129      	bne.n	8007d80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d32:	f000 faba 	bl	80082aa <prvCopyDataToQueue>
 8007d36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	3324      	adds	r3, #36	; 0x24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f8cf 	bl	8008ee8 <xTaskRemoveFromEventList>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d013      	beq.n	8007d78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d50:	4b3f      	ldr	r3, [pc, #252]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	e00a      	b.n	8007d78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d68:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d78:	f7ff fcd4 	bl	8007724 <vPortExitCritical>
				return pdPASS;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e063      	b.n	8007e48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d86:	f7ff fccd 	bl	8007724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e05c      	b.n	8007e48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 f909 	bl	8008fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007da2:	f7ff fcbf 	bl	8007724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007da6:	f000 fe75 	bl	8008a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007daa:	f7ff fc8b 	bl	80076c4 <vPortEnterCritical>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d103      	bne.n	8007dc4 <xQueueGenericSend+0x16c>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d103      	bne.n	8007dda <xQueueGenericSend+0x182>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dda:	f7ff fca3 	bl	8007724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 f8f8 	bl	8008fdc <xTaskCheckForTimeOut>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d124      	bne.n	8007e3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df4:	f000 fb51 	bl	800849a <prvIsQueueFull>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	3310      	adds	r3, #16
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 f81e 	bl	8008e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fadc 	bl	80083ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e12:	f000 fe4d 	bl	8008ab0 <xTaskResumeAll>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f af7c 	bne.w	8007d16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	e772      	b.n	8007d16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f000 faca 	bl	80083ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e36:	f000 fe3b 	bl	8008ab0 <xTaskResumeAll>
 8007e3a:	e76c      	b.n	8007d16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e3e:	f000 fac4 	bl	80083ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e42:	f000 fe35 	bl	8008ab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3738      	adds	r7, #56	; 0x38
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b090      	sub	sp, #64	; 0x40
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <xQueueGenericSendFromISR+0x3c>
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <xQueueGenericSendFromISR+0x40>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <xQueueGenericSendFromISR+0x42>
 8007e94:	2300      	movs	r3, #0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSendFromISR+0x6a>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x6e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueGenericSendFromISR+0x70>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ede:	f7ff fcd3 	bl	8007888 <vPortValidateInterruptPriority>
	__asm volatile
 8007ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61fa      	str	r2, [r7, #28]
 8007ef8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007efa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <xQueueGenericSendFromISR+0xbc>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d12f      	bne.n	8007f70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f26:	f000 f9c0 	bl	80082aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d112      	bne.n	8007f5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 ffd1 	bl	8008ee8 <xTaskRemoveFromEventList>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e007      	b.n	8007f6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	b25a      	sxtb	r2, r3
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f6e:	e001      	b.n	8007f74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f76:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f383 8811 	msr	BASEPRI, r3
}
 8007f7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3740      	adds	r7, #64	; 0x40
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08e      	sub	sp, #56	; 0x38
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	623b      	str	r3, [r7, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	61fb      	str	r3, [r7, #28]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGiveFromISR+0x58>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <xQueueGiveFromISR+0x5c>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xQueueGiveFromISR+0x5e>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	61bb      	str	r3, [r7, #24]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008002:	f7ff fc41 	bl	8007888 <vPortValidateInterruptPriority>
	__asm volatile
 8008006:	f3ef 8211 	mrs	r2, BASEPRI
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	617a      	str	r2, [r7, #20]
 800801c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800801e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800802e:	429a      	cmp	r2, r3
 8008030:	d22b      	bcs.n	800808a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d112      	bne.n	8008074 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b00      	cmp	r3, #0
 8008054:	d016      	beq.n	8008084 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	3324      	adds	r3, #36	; 0x24
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff44 	bl	8008ee8 <xTaskRemoveFromEventList>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00e      	beq.n	8008084 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e007      	b.n	8008084 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008078:	3301      	adds	r3, #1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	b25a      	sxtb	r2, r3
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
 8008088:	e001      	b.n	800808e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800808a:	2300      	movs	r3, #0
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f383 8811 	msr	BASEPRI, r3
}
 8008098:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800809c:	4618      	mov	r0, r3
 800809e:	3738      	adds	r7, #56	; 0x38
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08c      	sub	sp, #48	; 0x30
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <xQueueReceive+0x30>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	623b      	str	r3, [r7, #32]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <xQueueReceive+0x3e>
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <xQueueReceive+0x42>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <xQueueReceive+0x44>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueReceive+0x5e>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61fb      	str	r3, [r7, #28]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008102:	f001 f8b3 	bl	800926c <xTaskGetSchedulerState>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <xQueueReceive+0x6e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <xQueueReceive+0x72>
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <xQueueReceive+0x74>
 8008116:	2300      	movs	r3, #0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xQueueReceive+0x8e>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	61bb      	str	r3, [r7, #24]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008132:	f7ff fac7 	bl	80076c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01f      	beq.n	8008182 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008146:	f000 f91a 	bl	800837e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	1e5a      	subs	r2, r3, #1
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00f      	beq.n	800817a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	3310      	adds	r3, #16
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fec2 	bl	8008ee8 <xTaskRemoveFromEventList>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800816a:	4b3d      	ldr	r3, [pc, #244]	; (8008260 <xQueueReceive+0x1bc>)
 800816c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800817a:	f7ff fad3 	bl	8007724 <vPortExitCritical>
				return pdPASS;
 800817e:	2301      	movs	r3, #1
 8008180:	e069      	b.n	8008256 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008188:	f7ff facc 	bl	8007724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800818c:	2300      	movs	r3, #0
 800818e:	e062      	b.n	8008256 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008196:	f107 0310 	add.w	r3, r7, #16
 800819a:	4618      	mov	r0, r3
 800819c:	f000 ff08 	bl	8008fb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a4:	f7ff fabe 	bl	8007724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a8:	f000 fc74 	bl	8008a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ac:	f7ff fa8a 	bl	80076c4 <vPortEnterCritical>
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d103      	bne.n	80081c6 <xQueueReceive+0x122>
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d103      	bne.n	80081dc <xQueueReceive+0x138>
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081dc:	f7ff faa2 	bl	8007724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081e0:	1d3a      	adds	r2, r7, #4
 80081e2:	f107 0310 	add.w	r3, r7, #16
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fef7 	bl	8008fdc <xTaskCheckForTimeOut>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d123      	bne.n	800823c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f6:	f000 f93a 	bl	800846e <prvIsQueueEmpty>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	3324      	adds	r3, #36	; 0x24
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fe1d 	bl	8008e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800820e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008210:	f000 f8db 	bl	80083ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008214:	f000 fc4c 	bl	8008ab0 <xTaskResumeAll>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d189      	bne.n	8008132 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800821e:	4b10      	ldr	r3, [pc, #64]	; (8008260 <xQueueReceive+0x1bc>)
 8008220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	e780      	b.n	8008132 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008232:	f000 f8ca 	bl	80083ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008236:	f000 fc3b 	bl	8008ab0 <xTaskResumeAll>
 800823a:	e77a      	b.n	8008132 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800823c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823e:	f000 f8c4 	bl	80083ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008242:	f000 fc35 	bl	8008ab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008248:	f000 f911 	bl	800846e <prvIsQueueEmpty>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	f43f af6f 	beq.w	8008132 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008256:	4618      	mov	r0, r3
 8008258:	3730      	adds	r7, #48	; 0x30
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	e000ed04 	.word	0xe000ed04

08008264 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <vQueueDelete+0x28>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60bb      	str	r3, [r7, #8]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f947 	bl	8008520 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7fe ff13 	bl	80070c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10d      	bne.n	80082e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d14d      	bne.n	800836c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 ffe7 	bl	80092a8 <xTaskPriorityDisinherit>
 80082da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	609a      	str	r2, [r3, #8]
 80082e2:	e043      	b.n	800836c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d119      	bne.n	800831e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6858      	ldr	r0, [r3, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	461a      	mov	r2, r3
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	f001 ff87 	bl	800a208 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	441a      	add	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d32b      	bcc.n	800836c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	605a      	str	r2, [r3, #4]
 800831c:	e026      	b.n	800836c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68d8      	ldr	r0, [r3, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	461a      	mov	r2, r3
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	f001 ff6d 	bl	800a208 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	425b      	negs	r3, r3
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d207      	bcs.n	800835a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	425b      	negs	r3, r3
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d105      	bne.n	800836c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008374:	697b      	ldr	r3, [r7, #20]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d018      	beq.n	80083c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	441a      	add	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d303      	bcc.n	80083b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68d9      	ldr	r1, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	461a      	mov	r2, r3
 80083bc:	6838      	ldr	r0, [r7, #0]
 80083be:	f001 ff23 	bl	800a208 <memcpy>
	}
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083d2:	f7ff f977 	bl	80076c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083de:	e011      	b.n	8008404 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d012      	beq.n	800840e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3324      	adds	r3, #36	; 0x24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fd7b 	bl	8008ee8 <xTaskRemoveFromEventList>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083f8:	f000 fe52 	bl	80090a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	3b01      	subs	r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008408:	2b00      	cmp	r3, #0
 800840a:	dce9      	bgt.n	80083e0 <prvUnlockQueue+0x16>
 800840c:	e000      	b.n	8008410 <prvUnlockQueue+0x46>
					break;
 800840e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	22ff      	movs	r2, #255	; 0xff
 8008414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008418:	f7ff f984 	bl	8007724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800841c:	f7ff f952 	bl	80076c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008426:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008428:	e011      	b.n	800844e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d012      	beq.n	8008458 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3310      	adds	r3, #16
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fd56 	bl	8008ee8 <xTaskRemoveFromEventList>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008442:	f000 fe2d 	bl	80090a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	3b01      	subs	r3, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800844e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dce9      	bgt.n	800842a <prvUnlockQueue+0x60>
 8008456:	e000      	b.n	800845a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008458:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	22ff      	movs	r2, #255	; 0xff
 800845e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008462:	f7ff f95f 	bl	8007724 <vPortExitCritical>
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008476:	f7ff f925 	bl	80076c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008482:	2301      	movs	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	e001      	b.n	800848c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800848c:	f7ff f94a 	bl	8007724 <vPortExitCritical>

	return xReturn;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084a2:	f7ff f90f 	bl	80076c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d102      	bne.n	80084b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084b2:	2301      	movs	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e001      	b.n	80084bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084bc:	f7ff f932 	bl	8007724 <vPortExitCritical>

	return xReturn;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	e014      	b.n	8008506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084dc:	4a0f      	ldr	r2, [pc, #60]	; (800851c <vQueueAddToRegistry+0x50>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084e8:	490c      	ldr	r1, [pc, #48]	; (800851c <vQueueAddToRegistry+0x50>)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084f2:	4a0a      	ldr	r2, [pc, #40]	; (800851c <vQueueAddToRegistry+0x50>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	4413      	add	r3, r2
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084fe:	e006      	b.n	800850e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b07      	cmp	r3, #7
 800850a:	d9e7      	bls.n	80084dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	24004c30 	.word	0x24004c30

08008520 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e016      	b.n	800855c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800852e:	4a10      	ldr	r2, [pc, #64]	; (8008570 <vQueueUnregisterQueue+0x50>)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	4413      	add	r3, r2
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d10b      	bne.n	8008556 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800853e:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <vQueueUnregisterQueue+0x50>)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2100      	movs	r1, #0
 8008544:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008548:	4a09      	ldr	r2, [pc, #36]	; (8008570 <vQueueUnregisterQueue+0x50>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	4413      	add	r3, r2
 8008550:	2200      	movs	r2, #0
 8008552:	605a      	str	r2, [r3, #4]
				break;
 8008554:	e006      	b.n	8008564 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b07      	cmp	r3, #7
 8008560:	d9e5      	bls.n	800852e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	24004c30 	.word	0x24004c30

08008574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008584:	f7ff f89e 	bl	80076c4 <vPortEnterCritical>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800858e:	b25b      	sxtb	r3, r3
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d103      	bne.n	800859e <vQueueWaitForMessageRestricted+0x2a>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085aa:	d103      	bne.n	80085b4 <vQueueWaitForMessageRestricted+0x40>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085b4:	f7ff f8b6 	bl	8007724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	3324      	adds	r3, #36	; 0x24
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 fc61 	bl	8008e90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085ce:	6978      	ldr	r0, [r7, #20]
 80085d0:	f7ff fefb 	bl	80083ca <prvUnlockQueue>
	}
 80085d4:	bf00      	nop
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08e      	sub	sp, #56	; 0x38
 80085e0:	af04      	add	r7, sp, #16
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xTaskCreateStatic+0x2a>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	623b      	str	r3, [r7, #32]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <xTaskCreateStatic+0x46>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	61fb      	str	r3, [r7, #28]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008622:	23bc      	movs	r3, #188	; 0xbc
 8008624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2bbc      	cmp	r3, #188	; 0xbc
 800862a:	d00a      	beq.n	8008642 <xTaskCreateStatic+0x66>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61bb      	str	r3, [r7, #24]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	2b00      	cmp	r3, #0
 8008648:	d01e      	beq.n	8008688 <xTaskCreateStatic+0xac>
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	2202      	movs	r2, #2
 800865e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008662:	2300      	movs	r3, #0
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	9302      	str	r3, [sp, #8]
 800866a:	f107 0314 	add.w	r3, r7, #20
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f850 	bl	8008720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008682:	f000 f8f3 	bl	800886c <prvAddNewTaskToReadyList>
 8008686:	e001      	b.n	800868c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800868c:	697b      	ldr	r3, [r7, #20]
	}
 800868e:	4618      	mov	r0, r3
 8008690:	3728      	adds	r7, #40	; 0x28
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008696:	b580      	push	{r7, lr}
 8008698:	b08c      	sub	sp, #48	; 0x30
 800869a:	af04      	add	r7, sp, #16
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fc40 	bl	8006f30 <pvPortMalloc>
 80086b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00e      	beq.n	80086d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086b8:	20bc      	movs	r0, #188	; 0xbc
 80086ba:	f7fe fc39 	bl	8006f30 <pvPortMalloc>
 80086be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
 80086cc:	e005      	b.n	80086da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086ce:	6978      	ldr	r0, [r7, #20]
 80086d0:	f7fe fcfa 	bl	80070c8 <vPortFree>
 80086d4:	e001      	b.n	80086da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d017      	beq.n	8008710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	2300      	movs	r3, #0
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	9302      	str	r3, [sp, #8]
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f80e 	bl	8008720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008704:	69f8      	ldr	r0, [r7, #28]
 8008706:	f000 f8b1 	bl	800886c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800870a:	2301      	movs	r3, #1
 800870c:	61bb      	str	r3, [r7, #24]
 800870e:	e002      	b.n	8008716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008710:	f04f 33ff 	mov.w	r3, #4294967295
 8008714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008716:	69bb      	ldr	r3, [r7, #24]
	}
 8008718:	4618      	mov	r0, r3
 800871a:	3720      	adds	r7, #32
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	461a      	mov	r2, r3
 8008738:	21a5      	movs	r1, #165	; 0xa5
 800873a:	f001 fd73 	bl	800a224 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008748:	440b      	add	r3, r1
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	617b      	str	r3, [r7, #20]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01f      	beq.n	80087be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	e012      	b.n	80087aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	7819      	ldrb	r1, [r3, #0]
 800878c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	3334      	adds	r3, #52	; 0x34
 8008794:	460a      	mov	r2, r1
 8008796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d006      	beq.n	80087b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3301      	adds	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b0f      	cmp	r3, #15
 80087ae:	d9e9      	bls.n	8008784 <prvInitialiseNewTask+0x64>
 80087b0:	e000      	b.n	80087b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80087b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087bc:	e003      	b.n	80087c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	2b37      	cmp	r3, #55	; 0x37
 80087ca:	d901      	bls.n	80087d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087cc:	2337      	movs	r3, #55	; 0x37
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2200      	movs	r2, #0
 80087e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	3304      	adds	r3, #4
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fdac 	bl	8007344 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	3318      	adds	r3, #24
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fda7 	bl	8007344 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	2200      	movs	r2, #0
 8008818:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	3354      	adds	r3, #84	; 0x54
 8008820:	2260      	movs	r2, #96	; 0x60
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fcfd 	bl	800a224 <memset>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	4a0c      	ldr	r2, [pc, #48]	; (8008860 <prvInitialiseNewTask+0x140>)
 800882e:	659a      	str	r2, [r3, #88]	; 0x58
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	4a0c      	ldr	r2, [pc, #48]	; (8008864 <prvInitialiseNewTask+0x144>)
 8008834:	65da      	str	r2, [r3, #92]	; 0x5c
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	4a0b      	ldr	r2, [pc, #44]	; (8008868 <prvInitialiseNewTask+0x148>)
 800883a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	f7fe fe13 	bl	800746c <pxPortInitialiseStack>
 8008846:	4602      	mov	r2, r0
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008856:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008858:	bf00      	nop
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	0800beb0 	.word	0x0800beb0
 8008864:	0800bed0 	.word	0x0800bed0
 8008868:	0800be90 	.word	0x0800be90

0800886c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008874:	f7fe ff26 	bl	80076c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008878:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a2c      	ldr	r2, [pc, #176]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 8008880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008882:	4b2c      	ldr	r3, [pc, #176]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800888a:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008890:	4b27      	ldr	r3, [pc, #156]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d110      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008898:	f000 fc26 	bl	80090e8 <prvInitialiseTaskLists>
 800889c:	e00d      	b.n	80088ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800889e:	4b26      	ldr	r3, [pc, #152]	; (8008938 <prvAddNewTaskToReadyList+0xcc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088a6:	4b23      	ldr	r3, [pc, #140]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d802      	bhi.n	80088ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088b4:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088ba:	4b20      	ldr	r3, [pc, #128]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3301      	adds	r3, #1
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088c4:	4b1d      	ldr	r3, [pc, #116]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <prvAddNewTaskToReadyList+0xd4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d903      	bls.n	80088e0 <prvAddNewTaskToReadyList+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a18      	ldr	r2, [pc, #96]	; (8008940 <prvAddNewTaskToReadyList+0xd4>)
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <prvAddNewTaskToReadyList+0xd8>)
 80088ee:	441a      	add	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7fe fd31 	bl	800735e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088fc:	f7fe ff12 	bl	8007724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008900:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <prvAddNewTaskToReadyList+0xcc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00e      	beq.n	8008926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	429a      	cmp	r2, r3
 8008914:	d207      	bcs.n	8008926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <prvAddNewTaskToReadyList+0xdc>)
 8008918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	24004910 	.word	0x24004910
 8008934:	2400443c 	.word	0x2400443c
 8008938:	2400491c 	.word	0x2400491c
 800893c:	2400492c 	.word	0x2400492c
 8008940:	24004918 	.word	0x24004918
 8008944:	24004440 	.word	0x24004440
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d017      	beq.n	800898e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800895e:	4b13      	ldr	r3, [pc, #76]	; (80089ac <vTaskDelay+0x60>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <vTaskDelay+0x30>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60bb      	str	r3, [r7, #8]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800897c:	f000 f88a 	bl	8008a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fcfe 	bl	8009384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008988:	f000 f892 	bl	8008ab0 <xTaskResumeAll>
 800898c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d107      	bne.n	80089a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <vTaskDelay+0x64>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	24004938 	.word	0x24004938
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	; 0x28
 80089b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089c2:	463a      	mov	r2, r7
 80089c4:	1d39      	adds	r1, r7, #4
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fa2a 	bl	8006e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	9202      	str	r2, [sp, #8]
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	2300      	movs	r3, #0
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	460a      	mov	r2, r1
 80089e2:	4924      	ldr	r1, [pc, #144]	; (8008a74 <vTaskStartScheduler+0xc0>)
 80089e4:	4824      	ldr	r0, [pc, #144]	; (8008a78 <vTaskStartScheduler+0xc4>)
 80089e6:	f7ff fdf9 	bl	80085dc <xTaskCreateStatic>
 80089ea:	4603      	mov	r3, r0
 80089ec:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <vTaskStartScheduler+0xc8>)
 80089ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089f0:	4b22      	ldr	r3, [pc, #136]	; (8008a7c <vTaskStartScheduler+0xc8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e001      	b.n	8008a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d102      	bne.n	8008a0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a08:	f000 fd10 	bl	800942c <xTimerCreateTimerTask>
 8008a0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d11b      	bne.n	8008a4c <vTaskStartScheduler+0x98>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	613b      	str	r3, [r7, #16]
}
 8008a26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a28:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <vTaskStartScheduler+0xcc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3354      	adds	r3, #84	; 0x54
 8008a2e:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <vTaskStartScheduler+0xd0>)
 8008a30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <vTaskStartScheduler+0xd4>)
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <vTaskStartScheduler+0xd8>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <vTaskStartScheduler+0xdc>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a46:	f7fe fd9b 	bl	8007580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a4a:	e00e      	b.n	8008a6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d10a      	bne.n	8008a6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <vTaskStartScheduler+0xb4>
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	0800a524 	.word	0x0800a524
 8008a78:	080090b9 	.word	0x080090b9
 8008a7c:	24004934 	.word	0x24004934
 8008a80:	2400443c 	.word	0x2400443c
 8008a84:	24000014 	.word	0x24000014
 8008a88:	24004930 	.word	0x24004930
 8008a8c:	2400491c 	.word	0x2400491c
 8008a90:	24004914 	.word	0x24004914

08008a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <vTaskSuspendAll+0x18>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	4a03      	ldr	r2, [pc, #12]	; (8008aac <vTaskSuspendAll+0x18>)
 8008aa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aa2:	bf00      	nop
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	24004938 	.word	0x24004938

08008ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008abe:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <xTaskResumeAll+0x118>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <xTaskResumeAll+0x2c>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	603b      	str	r3, [r7, #0]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008adc:	f7fe fdf2 	bl	80076c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ae0:	4b39      	ldr	r3, [pc, #228]	; (8008bc8 <xTaskResumeAll+0x118>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4a38      	ldr	r2, [pc, #224]	; (8008bc8 <xTaskResumeAll+0x118>)
 8008ae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aea:	4b37      	ldr	r3, [pc, #220]	; (8008bc8 <xTaskResumeAll+0x118>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d162      	bne.n	8008bb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008af2:	4b36      	ldr	r3, [pc, #216]	; (8008bcc <xTaskResumeAll+0x11c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d05e      	beq.n	8008bb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008afa:	e02f      	b.n	8008b5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afc:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <xTaskResumeAll+0x120>)
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3318      	adds	r3, #24
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe fc85 	bl	8007418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fc80 	bl	8007418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4b2d      	ldr	r3, [pc, #180]	; (8008bd4 <xTaskResumeAll+0x124>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d903      	bls.n	8008b2c <xTaskResumeAll+0x7c>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a2a      	ldr	r2, [pc, #168]	; (8008bd4 <xTaskResumeAll+0x124>)
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <xTaskResumeAll+0x128>)
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7fe fc0b 	bl	800735e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	4b23      	ldr	r3, [pc, #140]	; (8008bdc <xTaskResumeAll+0x12c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d302      	bcc.n	8008b5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b56:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <xTaskResumeAll+0x130>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b5c:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <xTaskResumeAll+0x120>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1cb      	bne.n	8008afc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b6a:	f000 fb5f 	bl	800922c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <xTaskResumeAll+0x134>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d010      	beq.n	8008b9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b7a:	f000 f847 	bl	8008c0c <xTaskIncrementTick>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b84:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <xTaskResumeAll+0x130>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f1      	bne.n	8008b7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <xTaskResumeAll+0x134>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xTaskResumeAll+0x130>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <xTaskResumeAll+0x138>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bb8:	f7fe fdb4 	bl	8007724 <vPortExitCritical>

	return xAlreadyYielded;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	24004938 	.word	0x24004938
 8008bcc:	24004910 	.word	0x24004910
 8008bd0:	240048d0 	.word	0x240048d0
 8008bd4:	24004918 	.word	0x24004918
 8008bd8:	24004440 	.word	0x24004440
 8008bdc:	2400443c 	.word	0x2400443c
 8008be0:	24004924 	.word	0x24004924
 8008be4:	24004920 	.word	0x24004920
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bf2:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <xTaskGetTickCount+0x1c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008bf8:	687b      	ldr	r3, [r7, #4]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	24004914 	.word	0x24004914

08008c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c16:	4b4f      	ldr	r3, [pc, #316]	; (8008d54 <xTaskIncrementTick+0x148>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 808f 	bne.w	8008d3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c20:	4b4d      	ldr	r3, [pc, #308]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c28:	4a4b      	ldr	r2, [pc, #300]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d120      	bne.n	8008c76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c34:	4b49      	ldr	r3, [pc, #292]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	603b      	str	r3, [r7, #0]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xTaskIncrementTick+0x46>
 8008c54:	4b41      	ldr	r3, [pc, #260]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	4b41      	ldr	r3, [pc, #260]	; (8008d60 <xTaskIncrementTick+0x154>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a3f      	ldr	r2, [pc, #252]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	4a3f      	ldr	r2, [pc, #252]	; (8008d60 <xTaskIncrementTick+0x154>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <xTaskIncrementTick+0x158>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	4a3d      	ldr	r2, [pc, #244]	; (8008d64 <xTaskIncrementTick+0x158>)
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	f000 fadb 	bl	800922c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c76:	4b3c      	ldr	r3, [pc, #240]	; (8008d68 <xTaskIncrementTick+0x15c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d349      	bcc.n	8008d14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c80:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c8a:	4b37      	ldr	r3, [pc, #220]	; (8008d68 <xTaskIncrementTick+0x15c>)
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	601a      	str	r2, [r3, #0]
					break;
 8008c92:	e03f      	b.n	8008d14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c94:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d203      	bcs.n	8008cb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cac:	4a2e      	ldr	r2, [pc, #184]	; (8008d68 <xTaskIncrementTick+0x15c>)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cb2:	e02f      	b.n	8008d14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe fbad 	bl	8007418 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3318      	adds	r3, #24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fba4 	bl	8007418 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <xTaskIncrementTick+0x160>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d903      	bls.n	8008ce4 <xTaskIncrementTick+0xd8>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a22      	ldr	r2, [pc, #136]	; (8008d6c <xTaskIncrementTick+0x160>)
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <xTaskIncrementTick+0x164>)
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fe fb2f 	bl	800735e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <xTaskIncrementTick+0x168>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d3b8      	bcc.n	8008c80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d12:	e7b5      	b.n	8008c80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d14:	4b17      	ldr	r3, [pc, #92]	; (8008d74 <xTaskIncrementTick+0x168>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	4915      	ldr	r1, [pc, #84]	; (8008d70 <xTaskIncrementTick+0x164>)
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d901      	bls.n	8008d30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d30:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <xTaskIncrementTick+0x16c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e004      	b.n	8008d48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <xTaskIncrementTick+0x170>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	4a0d      	ldr	r2, [pc, #52]	; (8008d7c <xTaskIncrementTick+0x170>)
 8008d46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d48:	697b      	ldr	r3, [r7, #20]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	24004938 	.word	0x24004938
 8008d58:	24004914 	.word	0x24004914
 8008d5c:	240048c8 	.word	0x240048c8
 8008d60:	240048cc 	.word	0x240048cc
 8008d64:	24004928 	.word	0x24004928
 8008d68:	24004930 	.word	0x24004930
 8008d6c:	24004918 	.word	0x24004918
 8008d70:	24004440 	.word	0x24004440
 8008d74:	2400443c 	.word	0x2400443c
 8008d78:	24004924 	.word	0x24004924
 8008d7c:	24004920 	.word	0x24004920

08008d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d86:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <vTaskSwitchContext+0xb0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <vTaskSwitchContext+0xb4>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d94:	e046      	b.n	8008e24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <vTaskSwitchContext+0xb4>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9c:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <vTaskSwitchContext+0xb8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	e010      	b.n	8008dc6 <vTaskSwitchContext+0x46>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	607b      	str	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <vTaskSwitchContext+0x3e>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	491d      	ldr	r1, [pc, #116]	; (8008e3c <vTaskSwitchContext+0xbc>)
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0e4      	beq.n	8008da4 <vTaskSwitchContext+0x24>
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4a15      	ldr	r2, [pc, #84]	; (8008e3c <vTaskSwitchContext+0xbc>)
 8008de6:	4413      	add	r3, r2
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	605a      	str	r2, [r3, #4]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d104      	bne.n	8008e0a <vTaskSwitchContext+0x8a>
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	605a      	str	r2, [r3, #4]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <vTaskSwitchContext+0xc0>)
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <vTaskSwitchContext+0xb8>)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e1a:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <vTaskSwitchContext+0xc0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3354      	adds	r3, #84	; 0x54
 8008e20:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <vTaskSwitchContext+0xc4>)
 8008e22:	6013      	str	r3, [r2, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	24004938 	.word	0x24004938
 8008e34:	24004924 	.word	0x24004924
 8008e38:	24004918 	.word	0x24004918
 8008e3c:	24004440 	.word	0x24004440
 8008e40:	2400443c 	.word	0x2400443c
 8008e44:	24000014 	.word	0x24000014

08008e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	60fb      	str	r3, [r7, #12]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <vTaskPlaceOnEventList+0x44>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3318      	adds	r3, #24
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7fe fa95 	bl	80073a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	6838      	ldr	r0, [r7, #0]
 8008e80:	f000 fa80 	bl	8009384 <prvAddCurrentTaskToDelayedList>
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	2400443c 	.word	0x2400443c

08008e90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	617b      	str	r3, [r7, #20]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7fe fa4c 	bl	800735e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	68b8      	ldr	r0, [r7, #8]
 8008ed6:	f000 fa55 	bl	8009384 <prvAddCurrentTaskToDelayedList>
	}
 8008eda:	bf00      	nop
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2400443c 	.word	0x2400443c

08008ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60fb      	str	r3, [r7, #12]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3318      	adds	r3, #24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fa7d 	bl	8007418 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <xTaskRemoveFromEventList+0xb0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d11d      	bne.n	8008f62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fa74 	bl	8007418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f34:	4b19      	ldr	r3, [pc, #100]	; (8008f9c <xTaskRemoveFromEventList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d903      	bls.n	8008f44 <xTaskRemoveFromEventList+0x5c>
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	4a16      	ldr	r2, [pc, #88]	; (8008f9c <xTaskRemoveFromEventList+0xb4>)
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4a13      	ldr	r2, [pc, #76]	; (8008fa0 <xTaskRemoveFromEventList+0xb8>)
 8008f52:	441a      	add	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7fe f9ff 	bl	800735e <vListInsertEnd>
 8008f60:	e005      	b.n	8008f6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3318      	adds	r3, #24
 8008f66:	4619      	mov	r1, r3
 8008f68:	480e      	ldr	r0, [pc, #56]	; (8008fa4 <xTaskRemoveFromEventList+0xbc>)
 8008f6a:	f7fe f9f8 	bl	800735e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <xTaskRemoveFromEventList+0xc0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d905      	bls.n	8008f88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <xTaskRemoveFromEventList+0xc4>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	e001      	b.n	8008f8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f8c:	697b      	ldr	r3, [r7, #20]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	24004938 	.word	0x24004938
 8008f9c:	24004918 	.word	0x24004918
 8008fa0:	24004440 	.word	0x24004440
 8008fa4:	240048d0 	.word	0x240048d0
 8008fa8:	2400443c 	.word	0x2400443c
 8008fac:	24004924 	.word	0x24004924

08008fb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <vTaskInternalSetTimeOutState+0x24>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fc0:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <vTaskInternalSetTimeOutState+0x28>)
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	24004928 	.word	0x24004928
 8008fd8:	24004914 	.word	0x24004914

08008fdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	613b      	str	r3, [r7, #16]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60fb      	str	r3, [r7, #12]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800901e:	f7fe fb51 	bl	80076c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009022:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <xTaskCheckForTimeOut+0xbc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d102      	bne.n	8009042 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e023      	b.n	800908a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <xTaskCheckForTimeOut+0xc0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d007      	beq.n	800905e <xTaskCheckForTimeOut+0x82>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	429a      	cmp	r2, r3
 8009056:	d302      	bcc.n	800905e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009058:	2301      	movs	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e015      	b.n	800908a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	429a      	cmp	r2, r3
 8009066:	d20b      	bcs.n	8009080 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ff9b 	bl	8008fb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	e004      	b.n	800908a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009086:	2301      	movs	r3, #1
 8009088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800908a:	f7fe fb4b 	bl	8007724 <vPortExitCritical>

	return xReturn;
 800908e:	69fb      	ldr	r3, [r7, #28]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	24004914 	.word	0x24004914
 800909c:	24004928 	.word	0x24004928

080090a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090a4:	4b03      	ldr	r3, [pc, #12]	; (80090b4 <vTaskMissedYield+0x14>)
 80090a6:	2201      	movs	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
}
 80090aa:	bf00      	nop
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	24004924 	.word	0x24004924

080090b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090c0:	f000 f852 	bl	8009168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <prvIdleTask+0x28>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d9f9      	bls.n	80090c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <prvIdleTask+0x2c>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090dc:	e7f0      	b.n	80090c0 <prvIdleTask+0x8>
 80090de:	bf00      	nop
 80090e0:	24004440 	.word	0x24004440
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ee:	2300      	movs	r3, #0
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	e00c      	b.n	800910e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4a12      	ldr	r2, [pc, #72]	; (8009148 <prvInitialiseTaskLists+0x60>)
 8009100:	4413      	add	r3, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe f8fe 	bl	8007304 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3301      	adds	r3, #1
 800910c:	607b      	str	r3, [r7, #4]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b37      	cmp	r3, #55	; 0x37
 8009112:	d9ef      	bls.n	80090f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009114:	480d      	ldr	r0, [pc, #52]	; (800914c <prvInitialiseTaskLists+0x64>)
 8009116:	f7fe f8f5 	bl	8007304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800911a:	480d      	ldr	r0, [pc, #52]	; (8009150 <prvInitialiseTaskLists+0x68>)
 800911c:	f7fe f8f2 	bl	8007304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009120:	480c      	ldr	r0, [pc, #48]	; (8009154 <prvInitialiseTaskLists+0x6c>)
 8009122:	f7fe f8ef 	bl	8007304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009126:	480c      	ldr	r0, [pc, #48]	; (8009158 <prvInitialiseTaskLists+0x70>)
 8009128:	f7fe f8ec 	bl	8007304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800912c:	480b      	ldr	r0, [pc, #44]	; (800915c <prvInitialiseTaskLists+0x74>)
 800912e:	f7fe f8e9 	bl	8007304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009132:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <prvInitialiseTaskLists+0x78>)
 8009134:	4a05      	ldr	r2, [pc, #20]	; (800914c <prvInitialiseTaskLists+0x64>)
 8009136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <prvInitialiseTaskLists+0x7c>)
 800913a:	4a05      	ldr	r2, [pc, #20]	; (8009150 <prvInitialiseTaskLists+0x68>)
 800913c:	601a      	str	r2, [r3, #0]
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	24004440 	.word	0x24004440
 800914c:	240048a0 	.word	0x240048a0
 8009150:	240048b4 	.word	0x240048b4
 8009154:	240048d0 	.word	0x240048d0
 8009158:	240048e4 	.word	0x240048e4
 800915c:	240048fc 	.word	0x240048fc
 8009160:	240048c8 	.word	0x240048c8
 8009164:	240048cc 	.word	0x240048cc

08009168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800916e:	e019      	b.n	80091a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009170:	f7fe faa8 	bl	80076c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009174:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <prvCheckTasksWaitingTermination+0x50>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3304      	adds	r3, #4
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe f949 	bl	8007418 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <prvCheckTasksWaitingTermination+0x54>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3b01      	subs	r3, #1
 800918c:	4a0b      	ldr	r2, [pc, #44]	; (80091bc <prvCheckTasksWaitingTermination+0x54>)
 800918e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009190:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <prvCheckTasksWaitingTermination+0x58>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3b01      	subs	r3, #1
 8009196:	4a0a      	ldr	r2, [pc, #40]	; (80091c0 <prvCheckTasksWaitingTermination+0x58>)
 8009198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800919a:	f7fe fac3 	bl	8007724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f810 	bl	80091c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <prvCheckTasksWaitingTermination+0x58>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e1      	bne.n	8009170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	240048e4 	.word	0x240048e4
 80091bc:	24004910 	.word	0x24004910
 80091c0:	240048f8 	.word	0x240048f8

080091c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3354      	adds	r3, #84	; 0x54
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 f8e7 	bl	800a3a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d108      	bne.n	80091f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd ff6f 	bl	80070c8 <vPortFree>
				vPortFree( pxTCB );
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fd ff6c 	bl	80070c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091f0:	e018      	b.n	8009224 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d103      	bne.n	8009204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7fd ff63 	bl	80070c8 <vPortFree>
	}
 8009202:	e00f      	b.n	8009224 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800920a:	2b02      	cmp	r3, #2
 800920c:	d00a      	beq.n	8009224 <prvDeleteTCB+0x60>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60fb      	str	r3, [r7, #12]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <prvDeleteTCB+0x5e>
	}
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009232:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <prvResetNextTaskUnblockTime+0x38>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800923c:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <prvResetNextTaskUnblockTime+0x3c>)
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009244:	e008      	b.n	8009258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009246:	4b07      	ldr	r3, [pc, #28]	; (8009264 <prvResetNextTaskUnblockTime+0x38>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4a04      	ldr	r2, [pc, #16]	; (8009268 <prvResetNextTaskUnblockTime+0x3c>)
 8009256:	6013      	str	r3, [r2, #0]
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	240048c8 	.word	0x240048c8
 8009268:	24004930 	.word	0x24004930

0800926c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009272:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <xTaskGetSchedulerState+0x34>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800927a:	2301      	movs	r3, #1
 800927c:	607b      	str	r3, [r7, #4]
 800927e:	e008      	b.n	8009292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009280:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <xTaskGetSchedulerState+0x38>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009288:	2302      	movs	r3, #2
 800928a:	607b      	str	r3, [r7, #4]
 800928c:	e001      	b.n	8009292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009292:	687b      	ldr	r3, [r7, #4]
	}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	2400491c 	.word	0x2400491c
 80092a4:	24004938 	.word	0x24004938

080092a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d056      	beq.n	800936c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092be:	4b2e      	ldr	r3, [pc, #184]	; (8009378 <xTaskPriorityDisinherit+0xd0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d00a      	beq.n	80092de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	60fb      	str	r3, [r7, #12]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	60bb      	str	r3, [r7, #8]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009300:	1e5a      	subs	r2, r3, #1
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930e:	429a      	cmp	r2, r3
 8009310:	d02c      	beq.n	800936c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009316:	2b00      	cmp	r3, #0
 8009318:	d128      	bne.n	800936c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3304      	adds	r3, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe f87a 	bl	8007418 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4b0f      	ldr	r3, [pc, #60]	; (800937c <xTaskPriorityDisinherit+0xd4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d903      	bls.n	800934c <xTaskPriorityDisinherit+0xa4>
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	4a0c      	ldr	r2, [pc, #48]	; (800937c <xTaskPriorityDisinherit+0xd4>)
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4a09      	ldr	r2, [pc, #36]	; (8009380 <xTaskPriorityDisinherit+0xd8>)
 800935a:	441a      	add	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7fd fffb 	bl	800735e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800936c:	697b      	ldr	r3, [r7, #20]
	}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2400443c 	.word	0x2400443c
 800937c:	24004918 	.word	0x24004918
 8009380:	24004440 	.word	0x24004440

08009384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800938e:	4b21      	ldr	r3, [pc, #132]	; (8009414 <prvAddCurrentTaskToDelayedList+0x90>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009394:	4b20      	ldr	r3, [pc, #128]	; (8009418 <prvAddCurrentTaskToDelayedList+0x94>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3304      	adds	r3, #4
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe f83c 	bl	8007418 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a6:	d10a      	bne.n	80093be <prvAddCurrentTaskToDelayedList+0x3a>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ae:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <prvAddCurrentTaskToDelayedList+0x94>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	4819      	ldr	r0, [pc, #100]	; (800941c <prvAddCurrentTaskToDelayedList+0x98>)
 80093b8:	f7fd ffd1 	bl	800735e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093bc:	e026      	b.n	800940c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d209      	bcs.n	80093ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <prvAddCurrentTaskToDelayedList+0x9c>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <prvAddCurrentTaskToDelayedList+0x94>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7fd ffdf 	bl	80073a6 <vListInsert>
}
 80093e8:	e010      	b.n	800940c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ea:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f7fd ffd5 	bl	80073a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	429a      	cmp	r2, r3
 8009404:	d202      	bcs.n	800940c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009406:	4a08      	ldr	r2, [pc, #32]	; (8009428 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	6013      	str	r3, [r2, #0]
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	24004914 	.word	0x24004914
 8009418:	2400443c 	.word	0x2400443c
 800941c:	240048fc 	.word	0x240048fc
 8009420:	240048cc 	.word	0x240048cc
 8009424:	240048c8 	.word	0x240048c8
 8009428:	24004930 	.word	0x24004930

0800942c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009432:	2300      	movs	r3, #0
 8009434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009436:	f000 fb07 	bl	8009a48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800943a:	4b1c      	ldr	r3, [pc, #112]	; (80094ac <xTimerCreateTimerTask+0x80>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d021      	beq.n	8009486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800944a:	1d3a      	adds	r2, r7, #4
 800944c:	f107 0108 	add.w	r1, r7, #8
 8009450:	f107 030c 	add.w	r3, r7, #12
 8009454:	4618      	mov	r0, r3
 8009456:	f7fd fcff 	bl	8006e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	9202      	str	r2, [sp, #8]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	2302      	movs	r3, #2
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	460a      	mov	r2, r1
 800946c:	4910      	ldr	r1, [pc, #64]	; (80094b0 <xTimerCreateTimerTask+0x84>)
 800946e:	4811      	ldr	r0, [pc, #68]	; (80094b4 <xTimerCreateTimerTask+0x88>)
 8009470:	f7ff f8b4 	bl	80085dc <xTaskCreateStatic>
 8009474:	4603      	mov	r3, r0
 8009476:	4a10      	ldr	r2, [pc, #64]	; (80094b8 <xTimerCreateTimerTask+0x8c>)
 8009478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <xTimerCreateTimerTask+0x8c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009482:	2301      	movs	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	613b      	str	r3, [r7, #16]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	2400496c 	.word	0x2400496c
 80094b0:	0800a52c 	.word	0x0800a52c
 80094b4:	080095f1 	.word	0x080095f1
 80094b8:	24004970 	.word	0x24004970

080094bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08a      	sub	sp, #40	; 0x28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	623b      	str	r3, [r7, #32]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094ea:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <xTimerGenericCommand+0x98>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d02a      	beq.n	8009548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b05      	cmp	r3, #5
 8009502:	dc18      	bgt.n	8009536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009504:	f7ff feb2 	bl	800926c <xTaskGetSchedulerState>
 8009508:	4603      	mov	r3, r0
 800950a:	2b02      	cmp	r3, #2
 800950c:	d109      	bne.n	8009522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800950e:	4b11      	ldr	r3, [pc, #68]	; (8009554 <xTimerGenericCommand+0x98>)
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	f107 0110 	add.w	r1, r7, #16
 8009516:	2300      	movs	r3, #0
 8009518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951a:	f7fe fb9d 	bl	8007c58 <xQueueGenericSend>
 800951e:	6278      	str	r0, [r7, #36]	; 0x24
 8009520:	e012      	b.n	8009548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009522:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <xTimerGenericCommand+0x98>)
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	f107 0110 	add.w	r1, r7, #16
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	f7fe fb93 	bl	8007c58 <xQueueGenericSend>
 8009532:	6278      	str	r0, [r7, #36]	; 0x24
 8009534:	e008      	b.n	8009548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <xTimerGenericCommand+0x98>)
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	f107 0110 	add.w	r1, r7, #16
 800953e:	2300      	movs	r3, #0
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	f7fe fc87 	bl	8007e54 <xQueueGenericSendFromISR>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800954a:	4618      	mov	r0, r3
 800954c:	3728      	adds	r7, #40	; 0x28
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	2400496c 	.word	0x2400496c

08009558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009562:	4b22      	ldr	r3, [pc, #136]	; (80095ec <prvProcessExpiredTimer+0x94>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	3304      	adds	r3, #4
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd ff51 	bl	8007418 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d022      	beq.n	80095ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	18d1      	adds	r1, r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	6978      	ldr	r0, [r7, #20]
 8009592:	f000 f8d1 	bl	8009738 <prvInsertTimerInActiveList>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01f      	beq.n	80095dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800959c:	2300      	movs	r3, #0
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	2100      	movs	r1, #0
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f7ff ff88 	bl	80094bc <xTimerGenericCommand>
 80095ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d113      	bne.n	80095dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	6978      	ldr	r0, [r7, #20]
 80095e2:	4798      	blx	r3
}
 80095e4:	bf00      	nop
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	24004964 	.word	0x24004964

080095f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f857 	bl	80096b0 <prvGetNextExpireTime>
 8009602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f803 	bl	8009614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800960e:	f000 f8d5 	bl	80097bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009612:	e7f1      	b.n	80095f8 <prvTimerTask+0x8>

08009614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800961e:	f7ff fa39 	bl	8008a94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f866 	bl	80096f8 <prvSampleTimeNow>
 800962c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d130      	bne.n	8009696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <prvProcessTimerOrBlockTask+0x3c>
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	429a      	cmp	r2, r3
 8009640:	d806      	bhi.n	8009650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009642:	f7ff fa35 	bl	8008ab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ff85 	bl	8009558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800964e:	e024      	b.n	800969a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d008      	beq.n	8009668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009656:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <prvProcessTimerOrBlockTask+0x90>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <prvProcessTimerOrBlockTask+0x50>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <prvProcessTimerOrBlockTask+0x52>
 8009664:	2300      	movs	r3, #0
 8009666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009668:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <prvProcessTimerOrBlockTask+0x94>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4619      	mov	r1, r3
 8009676:	f7fe ff7d 	bl	8008574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800967a:	f7ff fa19 	bl	8008ab0 <xTaskResumeAll>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <prvProcessTimerOrBlockTask+0x98>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
}
 8009694:	e001      	b.n	800969a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009696:	f7ff fa0b 	bl	8008ab0 <xTaskResumeAll>
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	24004968 	.word	0x24004968
 80096a8:	2400496c 	.word	0x2400496c
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b8:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <prvGetNextExpireTime+0x44>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <prvGetNextExpireTime+0x16>
 80096c2:	2201      	movs	r2, #1
 80096c4:	e000      	b.n	80096c8 <prvGetNextExpireTime+0x18>
 80096c6:	2200      	movs	r2, #0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <prvGetNextExpireTime+0x44>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	e001      	b.n	80096e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096e4:	68fb      	ldr	r3, [r7, #12]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	24004964 	.word	0x24004964

080096f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009700:	f7ff fa74 	bl	8008bec <xTaskGetTickCount>
 8009704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009706:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <prvSampleTimeNow+0x3c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	429a      	cmp	r2, r3
 800970e:	d205      	bcs.n	800971c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009710:	f000 f936 	bl	8009980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	e002      	b.n	8009722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009722:	4a04      	ldr	r2, [pc, #16]	; (8009734 <prvSampleTimeNow+0x3c>)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009728:	68fb      	ldr	r3, [r7, #12]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	24004974 	.word	0x24004974

08009738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	d812      	bhi.n	8009784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	429a      	cmp	r2, r3
 800976a:	d302      	bcc.n	8009772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	e01b      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <prvInsertTimerInActiveList+0x7c>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fd fe12 	bl	80073a6 <vListInsert>
 8009782:	e012      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d206      	bcs.n	800979a <prvInsertTimerInActiveList+0x62>
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d302      	bcc.n	800979a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e007      	b.n	80097aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <prvInsertTimerInActiveList+0x80>)
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fd fdfe 	bl	80073a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097aa:	697b      	ldr	r3, [r7, #20]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	24004968 	.word	0x24004968
 80097b8:	24004964 	.word	0x24004964

080097bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08e      	sub	sp, #56	; 0x38
 80097c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097c2:	e0ca      	b.n	800995a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da18      	bge.n	80097fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097ca:	1d3b      	adds	r3, r7, #4
 80097cc:	3304      	adds	r3, #4
 80097ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	61fb      	str	r3, [r7, #28]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f2:	6850      	ldr	r0, [r2, #4]
 80097f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f6:	6892      	ldr	r2, [r2, #8]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f2c0 80aa 	blt.w	8009958 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	3304      	adds	r3, #4
 8009814:	4618      	mov	r0, r3
 8009816:	f7fd fdff 	bl	8007418 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800981a:	463b      	mov	r3, r7
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ff6b 	bl	80096f8 <prvSampleTimeNow>
 8009822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b09      	cmp	r3, #9
 8009828:	f200 8097 	bhi.w	800995a <prvProcessReceivedCommands+0x19e>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <prvProcessReceivedCommands+0x78>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	0800985d 	.word	0x0800985d
 8009838:	0800985d 	.word	0x0800985d
 800983c:	0800985d 	.word	0x0800985d
 8009840:	080098d1 	.word	0x080098d1
 8009844:	080098e5 	.word	0x080098e5
 8009848:	0800992f 	.word	0x0800992f
 800984c:	0800985d 	.word	0x0800985d
 8009850:	0800985d 	.word	0x0800985d
 8009854:	080098d1 	.word	0x080098d1
 8009858:	080098e5 	.word	0x080098e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	b2da      	uxtb	r2, r3
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	18d1      	adds	r1, r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987c:	f7ff ff5c 	bl	8009738 <prvInsertTimerInActiveList>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d069      	beq.n	800995a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800988c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d05e      	beq.n	800995a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	441a      	add	r2, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ae:	f7ff fe05 	bl	80094bc <xTimerGenericCommand>
 80098b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d14f      	bne.n	800995a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	61bb      	str	r3, [r7, #24]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80098e2:	e03a      	b.n	800995a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	617b      	str	r3, [r7, #20]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	699a      	ldr	r2, [r3, #24]
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	18d1      	adds	r1, r2, r3
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009928:	f7ff ff06 	bl	8009738 <prvInsertTimerInActiveList>
					break;
 800992c:	e015      	b.n	800995a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800993c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993e:	f7fd fbc3 	bl	80070c8 <vPortFree>
 8009942:	e00a      	b.n	800995a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800994a:	f023 0301 	bic.w	r3, r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009956:	e000      	b.n	800995a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800995a:	4b08      	ldr	r3, [pc, #32]	; (800997c <prvProcessReceivedCommands+0x1c0>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	1d39      	adds	r1, r7, #4
 8009960:	2200      	movs	r2, #0
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fb9e 	bl	80080a4 <xQueueReceive>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	f47f af2a 	bne.w	80097c4 <prvProcessReceivedCommands+0x8>
	}
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	3730      	adds	r7, #48	; 0x30
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	2400496c 	.word	0x2400496c

08009980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009986:	e048      	b.n	8009a1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009988:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009992:	4b2b      	ldr	r3, [pc, #172]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3304      	adds	r3, #4
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fd fd39 	bl	8007418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d02e      	beq.n	8009a1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	4413      	add	r3, r2
 80099c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d90e      	bls.n	80099ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099da:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3304      	adds	r3, #4
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f7fd fcde 	bl	80073a6 <vListInsert>
 80099ea:	e016      	b.n	8009a1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099ec:	2300      	movs	r3, #0
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff fd60 	bl	80094bc <xTimerGenericCommand>
 80099fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	603b      	str	r3, [r7, #0]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1a:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1b1      	bne.n	8009988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a24:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <prvSwitchTimerLists+0xc4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a04      	ldr	r2, [pc, #16]	; (8009a40 <prvSwitchTimerLists+0xc0>)
 8009a30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a32:	4a04      	ldr	r2, [pc, #16]	; (8009a44 <prvSwitchTimerLists+0xc4>)
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	24004964 	.word	0x24004964
 8009a44:	24004968 	.word	0x24004968

08009a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a4e:	f7fd fe39 	bl	80076c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a52:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <prvCheckForValidListAndQueue+0x60>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d120      	bne.n	8009a9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a5a:	4814      	ldr	r0, [pc, #80]	; (8009aac <prvCheckForValidListAndQueue+0x64>)
 8009a5c:	f7fd fc52 	bl	8007304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a60:	4813      	ldr	r0, [pc, #76]	; (8009ab0 <prvCheckForValidListAndQueue+0x68>)
 8009a62:	f7fd fc4f 	bl	8007304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a66:	4b13      	ldr	r3, [pc, #76]	; (8009ab4 <prvCheckForValidListAndQueue+0x6c>)
 8009a68:	4a10      	ldr	r2, [pc, #64]	; (8009aac <prvCheckForValidListAndQueue+0x64>)
 8009a6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a6c:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <prvCheckForValidListAndQueue+0x70>)
 8009a6e:	4a10      	ldr	r2, [pc, #64]	; (8009ab0 <prvCheckForValidListAndQueue+0x68>)
 8009a70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a72:	2300      	movs	r3, #0
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4b11      	ldr	r3, [pc, #68]	; (8009abc <prvCheckForValidListAndQueue+0x74>)
 8009a78:	4a11      	ldr	r2, [pc, #68]	; (8009ac0 <prvCheckForValidListAndQueue+0x78>)
 8009a7a:	2110      	movs	r1, #16
 8009a7c:	200a      	movs	r0, #10
 8009a7e:	f7fd ffab 	bl	80079d8 <xQueueGenericCreateStatic>
 8009a82:	4603      	mov	r3, r0
 8009a84:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <prvCheckForValidListAndQueue+0x60>)
 8009a86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a88:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <prvCheckForValidListAndQueue+0x60>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <prvCheckForValidListAndQueue+0x60>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	490b      	ldr	r1, [pc, #44]	; (8009ac4 <prvCheckForValidListAndQueue+0x7c>)
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fd18 	bl	80084cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a9c:	f7fd fe42 	bl	8007724 <vPortExitCritical>
}
 8009aa0:	bf00      	nop
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	2400496c 	.word	0x2400496c
 8009aac:	2400493c 	.word	0x2400493c
 8009ab0:	24004950 	.word	0x24004950
 8009ab4:	24004964 	.word	0x24004964
 8009ab8:	24004968 	.word	0x24004968
 8009abc:	24004a18 	.word	0x24004a18
 8009ac0:	24004978 	.word	0x24004978
 8009ac4:	0800a534 	.word	0x0800a534

08009ac8 <checkint>:
 8009ac8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009acc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad4:	dd2b      	ble.n	8009b2e <checkint+0x66>
 8009ad6:	f240 4333 	movw	r3, #1075	; 0x433
 8009ada:	429a      	cmp	r2, r3
 8009adc:	dc25      	bgt.n	8009b2a <checkint+0x62>
 8009ade:	1a9b      	subs	r3, r3, r2
 8009ae0:	f1a3 0620 	sub.w	r6, r3, #32
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	fa02 f606 	lsl.w	r6, r2, r6
 8009aec:	fa02 f403 	lsl.w	r4, r2, r3
 8009af0:	f1c3 0520 	rsb	r5, r3, #32
 8009af4:	4334      	orrs	r4, r6
 8009af6:	fa22 f505 	lsr.w	r5, r2, r5
 8009afa:	432c      	orrs	r4, r5
 8009afc:	409a      	lsls	r2, r3
 8009afe:	ea20 0602 	bic.w	r6, r0, r2
 8009b02:	ea21 0704 	bic.w	r7, r1, r4
 8009b06:	ea56 0207 	orrs.w	r2, r6, r7
 8009b0a:	f1a3 0420 	sub.w	r4, r3, #32
 8009b0e:	f1c3 0220 	rsb	r2, r3, #32
 8009b12:	d10c      	bne.n	8009b2e <checkint+0x66>
 8009b14:	40d8      	lsrs	r0, r3
 8009b16:	fa01 f302 	lsl.w	r3, r1, r2
 8009b1a:	4318      	orrs	r0, r3
 8009b1c:	40e1      	lsrs	r1, r4
 8009b1e:	4308      	orrs	r0, r1
 8009b20:	f000 0301 	and.w	r3, r0, #1
 8009b24:	f1c3 0002 	rsb	r0, r3, #2
 8009b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2a:	2002      	movs	r0, #2
 8009b2c:	e7fc      	b.n	8009b28 <checkint+0x60>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	e7fa      	b.n	8009b28 <checkint+0x60>
 8009b32:	0000      	movs	r0, r0
 8009b34:	0000      	movs	r0, r0
	...

08009b38 <pow>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	ed2d 8b0a 	vpush	{d8-d12}
 8009b40:	b09b      	sub	sp, #108	; 0x6c
 8009b42:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b4a:	ed8d 1b00 	vstr	d1, [sp]
 8009b4e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8009b52:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b56:	f109 30ff 	add.w	r0, r9, #4294967295
 8009b5a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8009b5e:	4288      	cmp	r0, r1
 8009b60:	46cc      	mov	ip, r9
 8009b62:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8009b66:	d806      	bhi.n	8009b76 <pow+0x3e>
 8009b68:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8009b6c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8009b70:	297f      	cmp	r1, #127	; 0x7f
 8009b72:	f240 81ab 	bls.w	8009ecc <pow+0x394>
 8009b76:	19b1      	adds	r1, r6, r6
 8009b78:	9104      	str	r1, [sp, #16]
 8009b7a:	eb47 0107 	adc.w	r1, r7, r7
 8009b7e:	9105      	str	r1, [sp, #20]
 8009b80:	9904      	ldr	r1, [sp, #16]
 8009b82:	f111 31ff 	adds.w	r1, r1, #4294967295
 8009b86:	460a      	mov	r2, r1
 8009b88:	9905      	ldr	r1, [sp, #20]
 8009b8a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8009b94:	f06f 0001 	mvn.w	r0, #1
 8009b98:	4299      	cmp	r1, r3
 8009b9a:	bf08      	it	eq
 8009b9c:	4290      	cmpeq	r0, r2
 8009b9e:	d260      	bcs.n	8009c62 <pow+0x12a>
 8009ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d11a      	bne.n	8009bde <pow+0xa6>
 8009ba8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8009bac:	1923      	adds	r3, r4, r4
 8009bae:	930c      	str	r3, [sp, #48]	; 0x30
 8009bb0:	eb42 0302 	adc.w	r3, r2, r2
 8009bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bba:	4bcf      	ldr	r3, [pc, #828]	; (8009ef8 <pow+0x3c0>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	428b      	cmp	r3, r1
 8009bc0:	bf08      	it	eq
 8009bc2:	4282      	cmpeq	r2, r0
 8009bc4:	f080 8265 	bcs.w	800a092 <pow+0x55a>
 8009bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bcc:	ed9d 6b00 	vldr	d6, [sp]
 8009bd0:	ee37 0b06 	vadd.f64	d0, d7, d6
 8009bd4:	b01b      	add	sp, #108	; 0x6c
 8009bd6:	ecbd 8b0a 	vpop	{d8-d12}
 8009bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bde:	49c7      	ldr	r1, [pc, #796]	; (8009efc <pow+0x3c4>)
 8009be0:	2000      	movs	r0, #0
 8009be2:	428d      	cmp	r5, r1
 8009be4:	bf08      	it	eq
 8009be6:	4284      	cmpeq	r4, r0
 8009be8:	d10b      	bne.n	8009c02 <pow+0xca>
 8009bea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009bee:	19b3      	adds	r3, r6, r6
 8009bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf2:	eb42 0302 	adc.w	r3, r2, r2
 8009bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009bfc:	4bbe      	ldr	r3, [pc, #760]	; (8009ef8 <pow+0x3c0>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	e7dd      	b.n	8009bbe <pow+0x86>
 8009c02:	1921      	adds	r1, r4, r4
 8009c04:	9106      	str	r1, [sp, #24]
 8009c06:	eb45 0105 	adc.w	r1, r5, r5
 8009c0a:	9107      	str	r1, [sp, #28]
 8009c0c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009c10:	49bb      	ldr	r1, [pc, #748]	; (8009f00 <pow+0x3c8>)
 8009c12:	2000      	movs	r0, #0
 8009c14:	42a1      	cmp	r1, r4
 8009c16:	bf08      	it	eq
 8009c18:	4298      	cmpeq	r0, r3
 8009c1a:	d3d5      	bcc.n	8009bc8 <pow+0x90>
 8009c1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c20:	428c      	cmp	r4, r1
 8009c22:	bf08      	it	eq
 8009c24:	4283      	cmpeq	r3, r0
 8009c26:	d1cf      	bne.n	8009bc8 <pow+0x90>
 8009c28:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009c2c:	49b5      	ldr	r1, [pc, #724]	; (8009f04 <pow+0x3cc>)
 8009c2e:	2000      	movs	r0, #0
 8009c30:	428c      	cmp	r4, r1
 8009c32:	bf08      	it	eq
 8009c34:	4283      	cmpeq	r3, r0
 8009c36:	f000 822c 	beq.w	800a092 <pow+0x55a>
 8009c3a:	49b3      	ldr	r1, [pc, #716]	; (8009f08 <pow+0x3d0>)
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	42a1      	cmp	r1, r4
 8009c42:	bf08      	it	eq
 8009c44:	4298      	cmpeq	r0, r3
 8009c46:	ea6f 0307 	mvn.w	r3, r7
 8009c4a:	bf34      	ite	cc
 8009c4c:	2201      	movcc	r2, #1
 8009c4e:	2200      	movcs	r2, #0
 8009c50:	0fdb      	lsrs	r3, r3, #31
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f040 821a 	bne.w	800a08c <pow+0x554>
 8009c58:	ed9d 7b00 	vldr	d7, [sp]
 8009c5c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009c60:	e7b8      	b.n	8009bd4 <pow+0x9c>
 8009c62:	1923      	adds	r3, r4, r4
 8009c64:	9308      	str	r3, [sp, #32]
 8009c66:	eb45 0305 	adc.w	r3, r5, r5
 8009c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6c:	9b08      	ldr	r3, [sp, #32]
 8009c6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009c72:	9310      	str	r3, [sp, #64]	; 0x40
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	f143 33ff 	adc.w	r3, r3, #4294967295
 8009c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c80:	4299      	cmp	r1, r3
 8009c82:	bf08      	it	eq
 8009c84:	4290      	cmpeq	r0, r2
 8009c86:	d22d      	bcs.n	8009ce4 <pow+0x1ac>
 8009c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	f175 0300 	sbcs.w	r3, r5, #0
 8009c92:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009c96:	da16      	bge.n	8009cc6 <pow+0x18e>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7ff ff14 	bl	8009ac8 <checkint>
 8009ca0:	2801      	cmp	r0, #1
 8009ca2:	d110      	bne.n	8009cc6 <pow+0x18e>
 8009ca4:	eeb1 0b40 	vneg.f64	d0, d0
 8009ca8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009cac:	4323      	orrs	r3, r4
 8009cae:	d10c      	bne.n	8009cca <pow+0x192>
 8009cb0:	2e00      	cmp	r6, #0
 8009cb2:	f177 0300 	sbcs.w	r3, r7, #0
 8009cb6:	da8d      	bge.n	8009bd4 <pow+0x9c>
 8009cb8:	b01b      	add	sp, #108	; 0x6c
 8009cba:	ecbd 8b0a 	vpop	{d8-d12}
 8009cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc2:	f000 ba29 	b.w	800a118 <__math_divzero>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7ee      	b.n	8009ca8 <pow+0x170>
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	f177 0300 	sbcs.w	r3, r7, #0
 8009cd0:	da80      	bge.n	8009bd4 <pow+0x9c>
 8009cd2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009cd6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009cda:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8009cde:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8009ce2:	e777      	b.n	8009bd4 <pow+0x9c>
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	f175 0300 	sbcs.w	r3, r5, #0
 8009cea:	da35      	bge.n	8009d58 <pow+0x220>
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7ff feea 	bl	8009ac8 <checkint>
 8009cf4:	b940      	cbnz	r0, 8009d08 <pow+0x1d0>
 8009cf6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009cfa:	b01b      	add	sp, #108	; 0x6c
 8009cfc:	ecbd 8b0a 	vpop	{d8-d12}
 8009d00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	f000 ba20 	b.w	800a148 <__math_invalid>
 8009d08:	2801      	cmp	r0, #1
 8009d0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d0e:	bf14      	ite	ne
 8009d10:	2000      	movne	r0, #0
 8009d12:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8009d16:	461d      	mov	r5, r3
 8009d18:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8009d1c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8009d20:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8009d24:	2a7f      	cmp	r2, #127	; 0x7f
 8009d26:	d933      	bls.n	8009d90 <pow+0x258>
 8009d28:	4974      	ldr	r1, [pc, #464]	; (8009efc <pow+0x3c4>)
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	428d      	cmp	r5, r1
 8009d2e:	bf08      	it	eq
 8009d30:	4284      	cmpeq	r4, r0
 8009d32:	f000 81ae 	beq.w	800a092 <pow+0x55a>
 8009d36:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d80e      	bhi.n	8009d5c <pow+0x224>
 8009d3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009d42:	ed9d 7b00 	vldr	d7, [sp]
 8009d46:	42a9      	cmp	r1, r5
 8009d48:	bf08      	it	eq
 8009d4a:	42a0      	cmpeq	r0, r4
 8009d4c:	bf34      	ite	cc
 8009d4e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8009d52:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8009d56:	e73d      	b.n	8009bd4 <pow+0x9c>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	e7df      	b.n	8009d1c <pow+0x1e4>
 8009d5c:	42a9      	cmp	r1, r5
 8009d5e:	bf08      	it	eq
 8009d60:	42a0      	cmpeq	r0, r4
 8009d62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009d66:	bf2c      	ite	cs
 8009d68:	2301      	movcs	r3, #1
 8009d6a:	2300      	movcc	r3, #0
 8009d6c:	4590      	cmp	r8, r2
 8009d6e:	bf8c      	ite	hi
 8009d70:	f04f 0800 	movhi.w	r8, #0
 8009d74:	f04f 0801 	movls.w	r8, #1
 8009d78:	4543      	cmp	r3, r8
 8009d7a:	f04f 0000 	mov.w	r0, #0
 8009d7e:	f000 80af 	beq.w	8009ee0 <pow+0x3a8>
 8009d82:	b01b      	add	sp, #108	; 0x6c
 8009d84:	ecbd 8b0a 	vpop	{d8-d12}
 8009d88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	f000 b9bc 	b.w	800a108 <__math_oflow>
 8009d90:	f1bc 0f00 	cmp.w	ip, #0
 8009d94:	d10e      	bne.n	8009db4 <pow+0x27c>
 8009d96:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8009ef0 <pow+0x3b8>
 8009d9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009da2:	ec57 6b17 	vmov	r6, r7, d7
 8009da6:	4b59      	ldr	r3, [pc, #356]	; (8009f0c <pow+0x3d4>)
 8009da8:	2100      	movs	r1, #0
 8009daa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009dae:	1874      	adds	r4, r6, r1
 8009db0:	eb42 0503 	adc.w	r5, r2, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	18e3      	adds	r3, r4, r3
 8009db8:	4b55      	ldr	r3, [pc, #340]	; (8009f10 <pow+0x3d8>)
 8009dba:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009dbe:	eb45 0303 	adc.w	r3, r5, r3
 8009dc2:	1519      	asrs	r1, r3, #20
 8009dc4:	ee03 1a10 	vmov	s6, r1
 8009dc8:	0d1e      	lsrs	r6, r3, #20
 8009dca:	2100      	movs	r1, #0
 8009dcc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009dd0:	0536      	lsls	r6, r6, #20
 8009dd2:	1a63      	subs	r3, r4, r1
 8009dd4:	9312      	str	r3, [sp, #72]	; 0x48
 8009dd6:	eb65 0306 	sbc.w	r3, r5, r6
 8009dda:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ddc:	4b4d      	ldr	r3, [pc, #308]	; (8009f14 <pow+0x3dc>)
 8009dde:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8009de2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009de6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8009dea:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009dee:	ed93 7b00 	vldr	d7, [r3]
 8009df2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8009df6:	ed93 4b02 	vldr	d4, [r3, #8]
 8009dfa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8009dfe:	eea3 5b07 	vfma.f64	d5, d3, d7
 8009e02:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8009e06:	ee36 9b05 	vadd.f64	d9, d6, d5
 8009e0a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8009e0e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8009e12:	ed93 4b04 	vldr	d4, [r3, #16]
 8009e16:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009e1a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009e1e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8009e22:	ed93 3b08 	vldr	d3, [r3, #32]
 8009e26:	ee26 0b04 	vmul.f64	d0, d6, d4
 8009e2a:	eeb0 8b40 	vmov.f64	d8, d0
 8009e2e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8009e32:	ed93 4b06 	vldr	d4, [r3, #24]
 8009e36:	ee26 ab00 	vmul.f64	d10, d6, d0
 8009e3a:	ee39 1b00 	vadd.f64	d1, d9, d0
 8009e3e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8009e42:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009e46:	ee39 9b41 	vsub.f64	d9, d9, d1
 8009e4a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8009e4e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8009e52:	ee39 9b00 	vadd.f64	d9, d9, d0
 8009e56:	eea6 3b02 	vfma.f64	d3, d6, d2
 8009e5a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8009e5e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8009e62:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8009e66:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8009e6a:	ed9d 6b00 	vldr	d6, [sp]
 8009e6e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8009e72:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009e76:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8009e7a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8009e7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009e82:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009e86:	eeb0 3b46 	vmov.f64	d3, d6
 8009e8a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8009e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e92:	ee31 9b09 	vadd.f64	d9, d1, d9
 8009e96:	ed9d 6b00 	vldr	d6, [sp]
 8009e9a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8009e9e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8009ea2:	193c      	adds	r4, r7, r4
 8009ea4:	2c3e      	cmp	r4, #62	; 0x3e
 8009ea6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8009eaa:	eea6 3b09 	vfma.f64	d3, d6, d9
 8009eae:	d934      	bls.n	8009f1a <pow+0x3e2>
 8009eb0:	428c      	cmp	r4, r1
 8009eb2:	da0d      	bge.n	8009ed0 <pow+0x398>
 8009eb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ebc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f43f ae87 	beq.w	8009bd4 <pow+0x9c>
 8009ec6:	eeb1 0b40 	vneg.f64	d0, d0
 8009eca:	e683      	b.n	8009bd4 <pow+0x9c>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e771      	b.n	8009db4 <pow+0x27c>
 8009ed0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8009ed4:	d920      	bls.n	8009f18 <pow+0x3e0>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	f173 0300 	sbcs.w	r3, r3, #0
 8009edc:	f6bf af51 	bge.w	8009d82 <pow+0x24a>
 8009ee0:	b01b      	add	sp, #108	; 0x6c
 8009ee2:	ecbd 8b0a 	vpop	{d8-d12}
 8009ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f000 b905 	b.w	800a0f8 <__math_uflow>
 8009eee:	bf00      	nop
 8009ef0:	00000000 	.word	0x00000000
 8009ef4:	43300000 	.word	0x43300000
 8009ef8:	fff00000 	.word	0xfff00000
 8009efc:	3ff00000 	.word	0x3ff00000
 8009f00:	ffe00000 	.word	0xffe00000
 8009f04:	7fe00000 	.word	0x7fe00000
 8009f08:	7fdfffff 	.word	0x7fdfffff
 8009f0c:	fcc00000 	.word	0xfcc00000
 8009f10:	c0196aab 	.word	0xc0196aab
 8009f14:	0800a5d8 	.word	0x0800a5d8
 8009f18:	460f      	mov	r7, r1
 8009f1a:	4e65      	ldr	r6, [pc, #404]	; (800a0b0 <pow+0x578>)
 8009f1c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8009f20:	ed96 6b02 	vldr	d6, [r6, #8]
 8009f24:	ed96 7b00 	vldr	d7, [r6]
 8009f28:	eeb0 5b46 	vmov.f64	d5, d6
 8009f2c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8009f30:	ed8d 5b00 	vstr	d5, [sp]
 8009f34:	ee35 6b46 	vsub.f64	d6, d5, d6
 8009f38:	eeb0 5b44 	vmov.f64	d5, d4
 8009f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f40:	ed96 7b04 	vldr	d7, [r6, #16]
 8009f44:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8009f48:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009f4c:	eeb0 7b45 	vmov.f64	d7, d5
 8009f50:	ed96 5b06 	vldr	d5, [r6, #24]
 8009f54:	1849      	adds	r1, r1, r1
 8009f56:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8009f5a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8009f5e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009f62:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8009f66:	ee33 3b07 	vadd.f64	d3, d3, d7
 8009f6a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8009f6e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8009f72:	ed96 5b08 	vldr	d5, [r6, #32]
 8009f76:	ee33 7b07 	vadd.f64	d7, d3, d7
 8009f7a:	1814      	adds	r4, r2, r0
 8009f7c:	0365      	lsls	r5, r4, #13
 8009f7e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8009f82:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009f86:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009f8a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8009f8e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8009f92:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8009f96:	2000      	movs	r0, #0
 8009f98:	eb10 0a04 	adds.w	sl, r0, r4
 8009f9c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8009fa0:	eb45 0b0c 	adc.w	fp, r5, ip
 8009fa4:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	d16a      	bne.n	800a082 <pow+0x54a>
 8009fac:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	ea50 0301 	orrs.w	r3, r0, r1
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	d115      	bne.n	8009fe8 <pow+0x4b0>
 8009fbc:	eb1a 0303 	adds.w	r3, sl, r3
 8009fc0:	ee0b 3a10 	vmov	s22, r3
 8009fc4:	4b3b      	ldr	r3, [pc, #236]	; (800a0b4 <pow+0x57c>)
 8009fc6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800a098 <pow+0x560>
 8009fca:	eb4b 0303 	adc.w	r3, fp, r3
 8009fce:	ee0b 3a90 	vmov	s23, r3
 8009fd2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8009fd6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8009fda:	b01b      	add	sp, #108	; 0x6c
 8009fdc:	ecbd 8b0a 	vpop	{d8-d12}
 8009fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	f000 b8c8 	b.w	800a178 <__math_check_oflow>
 8009fe8:	eb1a 0303 	adds.w	r3, sl, r3
 8009fec:	930a      	str	r3, [sp, #40]	; 0x28
 8009fee:	4b32      	ldr	r3, [pc, #200]	; (800a0b8 <pow+0x580>)
 8009ff0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8009ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffa:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009ffe:	ee27 6b05 	vmul.f64	d6, d7, d5
 800a002:	ee35 7b06 	vadd.f64	d7, d5, d6
 800a006:	eeb0 3bc7 	vabs.f64	d3, d7
 800a00a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800a00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a012:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800a0a0 <pow+0x568>
 800a016:	d52b      	bpl.n	800a070 <pow+0x538>
 800a018:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a01c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800a028:	ee35 6b06 	vadd.f64	d6, d5, d6
 800a02c:	bf48      	it	mi
 800a02e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800a032:	ee37 3b04 	vadd.f64	d3, d7, d4
 800a036:	ee34 5b43 	vsub.f64	d5, d4, d3
 800a03a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a03e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a042:	ee37 7b03 	vadd.f64	d7, d7, d3
 800a046:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a04a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	d105      	bne.n	800a060 <pow+0x528>
 800a054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a056:	463a      	mov	r2, r7
 800a058:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a05c:	ec43 2b17 	vmov	d7, r2, r3
 800a060:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800a064:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800a068:	ee26 6b00 	vmul.f64	d6, d6, d0
 800a06c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800a070:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a074:	b01b      	add	sp, #108	; 0x6c
 800a076:	ecbd 8b0a 	vpop	{d8-d12}
 800a07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07e:	f000 b872 	b.w	800a166 <__math_check_uflow>
 800a082:	ec4b ab10 	vmov	d0, sl, fp
 800a086:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a08a:	e5a3      	b.n	8009bd4 <pow+0x9c>
 800a08c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800a0a8 <pow+0x570>
 800a090:	e5a0      	b.n	8009bd4 <pow+0x9c>
 800a092:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a096:	e59d      	b.n	8009bd4 <pow+0x9c>
 800a098:	00000000 	.word	0x00000000
 800a09c:	7f000000 	.word	0x7f000000
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	00100000 	.word	0x00100000
	...
 800a0b0:	0800b620 	.word	0x0800b620
 800a0b4:	c0f00000 	.word	0xc0f00000
 800a0b8:	3fe00000 	.word	0x3fe00000

0800a0bc <with_errno>:
 800a0bc:	b513      	push	{r0, r1, r4, lr}
 800a0be:	4604      	mov	r4, r0
 800a0c0:	ed8d 0b00 	vstr	d0, [sp]
 800a0c4:	f000 f86c 	bl	800a1a0 <__errno>
 800a0c8:	ed9d 0b00 	vldr	d0, [sp]
 800a0cc:	6004      	str	r4, [r0, #0]
 800a0ce:	b002      	add	sp, #8
 800a0d0:	bd10      	pop	{r4, pc}

0800a0d2 <xflow>:
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	b158      	cbz	r0, 800a0ee <xflow+0x1c>
 800a0d6:	eeb1 7b40 	vneg.f64	d7, d0
 800a0da:	ed8d 7b00 	vstr	d7, [sp]
 800a0de:	ed9d 7b00 	vldr	d7, [sp]
 800a0e2:	2022      	movs	r0, #34	; 0x22
 800a0e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a0e8:	b002      	add	sp, #8
 800a0ea:	f7ff bfe7 	b.w	800a0bc <with_errno>
 800a0ee:	eeb0 7b40 	vmov.f64	d7, d0
 800a0f2:	e7f2      	b.n	800a0da <xflow+0x8>
 800a0f4:	0000      	movs	r0, r0
	...

0800a0f8 <__math_uflow>:
 800a0f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a100 <__math_uflow+0x8>
 800a0fc:	f7ff bfe9 	b.w	800a0d2 <xflow>
 800a100:	00000000 	.word	0x00000000
 800a104:	10000000 	.word	0x10000000

0800a108 <__math_oflow>:
 800a108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a110 <__math_oflow+0x8>
 800a10c:	f7ff bfe1 	b.w	800a0d2 <xflow>
 800a110:	00000000 	.word	0x00000000
 800a114:	70000000 	.word	0x70000000

0800a118 <__math_divzero>:
 800a118:	b082      	sub	sp, #8
 800a11a:	2800      	cmp	r0, #0
 800a11c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a120:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800a124:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800a128:	ed8d 7b00 	vstr	d7, [sp]
 800a12c:	ed9d 0b00 	vldr	d0, [sp]
 800a130:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800a140 <__math_divzero+0x28>
 800a134:	2022      	movs	r0, #34	; 0x22
 800a136:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800a13a:	b002      	add	sp, #8
 800a13c:	f7ff bfbe 	b.w	800a0bc <with_errno>
	...

0800a148 <__math_invalid>:
 800a148:	eeb0 7b40 	vmov.f64	d7, d0
 800a14c:	eeb4 7b47 	vcmp.f64	d7, d7
 800a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a154:	ee30 6b40 	vsub.f64	d6, d0, d0
 800a158:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800a15c:	d602      	bvs.n	800a164 <__math_invalid+0x1c>
 800a15e:	2021      	movs	r0, #33	; 0x21
 800a160:	f7ff bfac 	b.w	800a0bc <with_errno>
 800a164:	4770      	bx	lr

0800a166 <__math_check_uflow>:
 800a166:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16e:	d102      	bne.n	800a176 <__math_check_uflow+0x10>
 800a170:	2022      	movs	r0, #34	; 0x22
 800a172:	f7ff bfa3 	b.w	800a0bc <with_errno>
 800a176:	4770      	bx	lr

0800a178 <__math_check_oflow>:
 800a178:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a198 <__math_check_oflow+0x20>
 800a17c:	eeb0 7bc0 	vabs.f64	d7, d0
 800a180:	eeb4 7b46 	vcmp.f64	d7, d6
 800a184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a188:	dd02      	ble.n	800a190 <__math_check_oflow+0x18>
 800a18a:	2022      	movs	r0, #34	; 0x22
 800a18c:	f7ff bf96 	b.w	800a0bc <with_errno>
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
 800a198:	ffffffff 	.word	0xffffffff
 800a19c:	7fefffff 	.word	0x7fefffff

0800a1a0 <__errno>:
 800a1a0:	4b01      	ldr	r3, [pc, #4]	; (800a1a8 <__errno+0x8>)
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	24000014 	.word	0x24000014

0800a1ac <__libc_init_array>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4d0d      	ldr	r5, [pc, #52]	; (800a1e4 <__libc_init_array+0x38>)
 800a1b0:	4c0d      	ldr	r4, [pc, #52]	; (800a1e8 <__libc_init_array+0x3c>)
 800a1b2:	1b64      	subs	r4, r4, r5
 800a1b4:	10a4      	asrs	r4, r4, #2
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	42a6      	cmp	r6, r4
 800a1ba:	d109      	bne.n	800a1d0 <__libc_init_array+0x24>
 800a1bc:	4d0b      	ldr	r5, [pc, #44]	; (800a1ec <__libc_init_array+0x40>)
 800a1be:	4c0c      	ldr	r4, [pc, #48]	; (800a1f0 <__libc_init_array+0x44>)
 800a1c0:	f000 f968 	bl	800a494 <_init>
 800a1c4:	1b64      	subs	r4, r4, r5
 800a1c6:	10a4      	asrs	r4, r4, #2
 800a1c8:	2600      	movs	r6, #0
 800a1ca:	42a6      	cmp	r6, r4
 800a1cc:	d105      	bne.n	800a1da <__libc_init_array+0x2e>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d4:	4798      	blx	r3
 800a1d6:	3601      	adds	r6, #1
 800a1d8:	e7ee      	b.n	800a1b8 <__libc_init_array+0xc>
 800a1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1de:	4798      	blx	r3
 800a1e0:	3601      	adds	r6, #1
 800a1e2:	e7f2      	b.n	800a1ca <__libc_init_array+0x1e>
 800a1e4:	0800bef8 	.word	0x0800bef8
 800a1e8:	0800bef8 	.word	0x0800bef8
 800a1ec:	0800bef8 	.word	0x0800bef8
 800a1f0:	0800befc 	.word	0x0800befc

0800a1f4 <__retarget_lock_acquire_recursive>:
 800a1f4:	4770      	bx	lr

0800a1f6 <__retarget_lock_release_recursive>:
 800a1f6:	4770      	bx	lr

0800a1f8 <malloc>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <malloc+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f000 b869 	b.w	800a2d4 <_malloc_r>
 800a202:	bf00      	nop
 800a204:	24000014 	.word	0x24000014

0800a208 <memcpy>:
 800a208:	440a      	add	r2, r1
 800a20a:	4291      	cmp	r1, r2
 800a20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a210:	d100      	bne.n	800a214 <memcpy+0xc>
 800a212:	4770      	bx	lr
 800a214:	b510      	push	{r4, lr}
 800a216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21e:	4291      	cmp	r1, r2
 800a220:	d1f9      	bne.n	800a216 <memcpy+0xe>
 800a222:	bd10      	pop	{r4, pc}

0800a224 <memset>:
 800a224:	4402      	add	r2, r0
 800a226:	4603      	mov	r3, r0
 800a228:	4293      	cmp	r3, r2
 800a22a:	d100      	bne.n	800a22e <memset+0xa>
 800a22c:	4770      	bx	lr
 800a22e:	f803 1b01 	strb.w	r1, [r3], #1
 800a232:	e7f9      	b.n	800a228 <memset+0x4>

0800a234 <_free_r>:
 800a234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a236:	2900      	cmp	r1, #0
 800a238:	d048      	beq.n	800a2cc <_free_r+0x98>
 800a23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a23e:	9001      	str	r0, [sp, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f1a1 0404 	sub.w	r4, r1, #4
 800a246:	bfb8      	it	lt
 800a248:	18e4      	addlt	r4, r4, r3
 800a24a:	f000 f917 	bl	800a47c <__malloc_lock>
 800a24e:	4a20      	ldr	r2, [pc, #128]	; (800a2d0 <_free_r+0x9c>)
 800a250:	9801      	ldr	r0, [sp, #4]
 800a252:	6813      	ldr	r3, [r2, #0]
 800a254:	4615      	mov	r5, r2
 800a256:	b933      	cbnz	r3, 800a266 <_free_r+0x32>
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6014      	str	r4, [r2, #0]
 800a25c:	b003      	add	sp, #12
 800a25e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a262:	f000 b911 	b.w	800a488 <__malloc_unlock>
 800a266:	42a3      	cmp	r3, r4
 800a268:	d90b      	bls.n	800a282 <_free_r+0x4e>
 800a26a:	6821      	ldr	r1, [r4, #0]
 800a26c:	1862      	adds	r2, r4, r1
 800a26e:	4293      	cmp	r3, r2
 800a270:	bf04      	itt	eq
 800a272:	681a      	ldreq	r2, [r3, #0]
 800a274:	685b      	ldreq	r3, [r3, #4]
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	bf04      	itt	eq
 800a27a:	1852      	addeq	r2, r2, r1
 800a27c:	6022      	streq	r2, [r4, #0]
 800a27e:	602c      	str	r4, [r5, #0]
 800a280:	e7ec      	b.n	800a25c <_free_r+0x28>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x58>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x4e>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1855      	adds	r5, r2, r1
 800a290:	42a5      	cmp	r5, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x78>
 800a294:	6824      	ldr	r4, [r4, #0]
 800a296:	4421      	add	r1, r4
 800a298:	1854      	adds	r4, r2, r1
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1dd      	bne.n	800a25c <_free_r+0x28>
 800a2a0:	681c      	ldr	r4, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	6053      	str	r3, [r2, #4]
 800a2a6:	4421      	add	r1, r4
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	e7d7      	b.n	800a25c <_free_r+0x28>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x80>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	e7d3      	b.n	800a25c <_free_r+0x28>
 800a2b4:	6825      	ldr	r5, [r4, #0]
 800a2b6:	1961      	adds	r1, r4, r5
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf04      	itt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	bf04      	itt	eq
 800a2c4:	1949      	addeq	r1, r1, r5
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	6054      	str	r4, [r2, #4]
 800a2ca:	e7c7      	b.n	800a25c <_free_r+0x28>
 800a2cc:	b003      	add	sp, #12
 800a2ce:	bd30      	pop	{r4, r5, pc}
 800a2d0:	24004a68 	.word	0x24004a68

0800a2d4 <_malloc_r>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	1ccd      	adds	r5, r1, #3
 800a2d8:	f025 0503 	bic.w	r5, r5, #3
 800a2dc:	3508      	adds	r5, #8
 800a2de:	2d0c      	cmp	r5, #12
 800a2e0:	bf38      	it	cc
 800a2e2:	250c      	movcc	r5, #12
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	db01      	blt.n	800a2ee <_malloc_r+0x1a>
 800a2ea:	42a9      	cmp	r1, r5
 800a2ec:	d903      	bls.n	800a2f6 <_malloc_r+0x22>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	6033      	str	r3, [r6, #0]
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f6:	f000 f8c1 	bl	800a47c <__malloc_lock>
 800a2fa:	4921      	ldr	r1, [pc, #132]	; (800a380 <_malloc_r+0xac>)
 800a2fc:	680a      	ldr	r2, [r1, #0]
 800a2fe:	4614      	mov	r4, r2
 800a300:	b99c      	cbnz	r4, 800a32a <_malloc_r+0x56>
 800a302:	4f20      	ldr	r7, [pc, #128]	; (800a384 <_malloc_r+0xb0>)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	b923      	cbnz	r3, 800a312 <_malloc_r+0x3e>
 800a308:	4621      	mov	r1, r4
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 f8a6 	bl	800a45c <_sbrk_r>
 800a310:	6038      	str	r0, [r7, #0]
 800a312:	4629      	mov	r1, r5
 800a314:	4630      	mov	r0, r6
 800a316:	f000 f8a1 	bl	800a45c <_sbrk_r>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d123      	bne.n	800a366 <_malloc_r+0x92>
 800a31e:	230c      	movs	r3, #12
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	4630      	mov	r0, r6
 800a324:	f000 f8b0 	bl	800a488 <__malloc_unlock>
 800a328:	e7e3      	b.n	800a2f2 <_malloc_r+0x1e>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	1b5b      	subs	r3, r3, r5
 800a32e:	d417      	bmi.n	800a360 <_malloc_r+0x8c>
 800a330:	2b0b      	cmp	r3, #11
 800a332:	d903      	bls.n	800a33c <_malloc_r+0x68>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	441c      	add	r4, r3
 800a338:	6025      	str	r5, [r4, #0]
 800a33a:	e004      	b.n	800a346 <_malloc_r+0x72>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	42a2      	cmp	r2, r4
 800a340:	bf0c      	ite	eq
 800a342:	600b      	streq	r3, [r1, #0]
 800a344:	6053      	strne	r3, [r2, #4]
 800a346:	4630      	mov	r0, r6
 800a348:	f000 f89e 	bl	800a488 <__malloc_unlock>
 800a34c:	f104 000b 	add.w	r0, r4, #11
 800a350:	1d23      	adds	r3, r4, #4
 800a352:	f020 0007 	bic.w	r0, r0, #7
 800a356:	1ac2      	subs	r2, r0, r3
 800a358:	d0cc      	beq.n	800a2f4 <_malloc_r+0x20>
 800a35a:	1a1b      	subs	r3, r3, r0
 800a35c:	50a3      	str	r3, [r4, r2]
 800a35e:	e7c9      	b.n	800a2f4 <_malloc_r+0x20>
 800a360:	4622      	mov	r2, r4
 800a362:	6864      	ldr	r4, [r4, #4]
 800a364:	e7cc      	b.n	800a300 <_malloc_r+0x2c>
 800a366:	1cc4      	adds	r4, r0, #3
 800a368:	f024 0403 	bic.w	r4, r4, #3
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d0e3      	beq.n	800a338 <_malloc_r+0x64>
 800a370:	1a21      	subs	r1, r4, r0
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f872 	bl	800a45c <_sbrk_r>
 800a378:	3001      	adds	r0, #1
 800a37a:	d1dd      	bne.n	800a338 <_malloc_r+0x64>
 800a37c:	e7cf      	b.n	800a31e <_malloc_r+0x4a>
 800a37e:	bf00      	nop
 800a380:	24004a68 	.word	0x24004a68
 800a384:	24004a6c 	.word	0x24004a6c

0800a388 <cleanup_glue>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	6809      	ldr	r1, [r1, #0]
 800a38e:	4605      	mov	r5, r0
 800a390:	b109      	cbz	r1, 800a396 <cleanup_glue+0xe>
 800a392:	f7ff fff9 	bl	800a388 <cleanup_glue>
 800a396:	4621      	mov	r1, r4
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a39e:	f7ff bf49 	b.w	800a234 <_free_r>
	...

0800a3a4 <_reclaim_reent>:
 800a3a4:	4b2c      	ldr	r3, [pc, #176]	; (800a458 <_reclaim_reent+0xb4>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	b570      	push	{r4, r5, r6, lr}
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	d051      	beq.n	800a454 <_reclaim_reent+0xb0>
 800a3b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a3b2:	b143      	cbz	r3, 800a3c6 <_reclaim_reent+0x22>
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d14a      	bne.n	800a450 <_reclaim_reent+0xac>
 800a3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3bc:	6819      	ldr	r1, [r3, #0]
 800a3be:	b111      	cbz	r1, 800a3c6 <_reclaim_reent+0x22>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff ff37 	bl	800a234 <_free_r>
 800a3c6:	6961      	ldr	r1, [r4, #20]
 800a3c8:	b111      	cbz	r1, 800a3d0 <_reclaim_reent+0x2c>
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff ff32 	bl	800a234 <_free_r>
 800a3d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3d2:	b111      	cbz	r1, 800a3da <_reclaim_reent+0x36>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7ff ff2d 	bl	800a234 <_free_r>
 800a3da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a3dc:	b111      	cbz	r1, 800a3e4 <_reclaim_reent+0x40>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff ff28 	bl	800a234 <_free_r>
 800a3e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a3e6:	b111      	cbz	r1, 800a3ee <_reclaim_reent+0x4a>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff ff23 	bl	800a234 <_free_r>
 800a3ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3f0:	b111      	cbz	r1, 800a3f8 <_reclaim_reent+0x54>
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff ff1e 	bl	800a234 <_free_r>
 800a3f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a3fa:	b111      	cbz	r1, 800a402 <_reclaim_reent+0x5e>
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7ff ff19 	bl	800a234 <_free_r>
 800a402:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a404:	b111      	cbz	r1, 800a40c <_reclaim_reent+0x68>
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff ff14 	bl	800a234 <_free_r>
 800a40c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a40e:	b111      	cbz	r1, 800a416 <_reclaim_reent+0x72>
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff ff0f 	bl	800a234 <_free_r>
 800a416:	69a3      	ldr	r3, [r4, #24]
 800a418:	b1e3      	cbz	r3, 800a454 <_reclaim_reent+0xb0>
 800a41a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a41c:	4620      	mov	r0, r4
 800a41e:	4798      	blx	r3
 800a420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a422:	b1b9      	cbz	r1, 800a454 <_reclaim_reent+0xb0>
 800a424:	4620      	mov	r0, r4
 800a426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a42a:	f7ff bfad 	b.w	800a388 <cleanup_glue>
 800a42e:	5949      	ldr	r1, [r1, r5]
 800a430:	b941      	cbnz	r1, 800a444 <_reclaim_reent+0xa0>
 800a432:	3504      	adds	r5, #4
 800a434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a436:	2d80      	cmp	r5, #128	; 0x80
 800a438:	68d9      	ldr	r1, [r3, #12]
 800a43a:	d1f8      	bne.n	800a42e <_reclaim_reent+0x8a>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff fef9 	bl	800a234 <_free_r>
 800a442:	e7ba      	b.n	800a3ba <_reclaim_reent+0x16>
 800a444:	680e      	ldr	r6, [r1, #0]
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff fef4 	bl	800a234 <_free_r>
 800a44c:	4631      	mov	r1, r6
 800a44e:	e7ef      	b.n	800a430 <_reclaim_reent+0x8c>
 800a450:	2500      	movs	r5, #0
 800a452:	e7ef      	b.n	800a434 <_reclaim_reent+0x90>
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	bf00      	nop
 800a458:	24000014 	.word	0x24000014

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f6 ffdc 	bl	8001424 <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	24004c7c 	.word	0x24004c7c

0800a47c <__malloc_lock>:
 800a47c:	4801      	ldr	r0, [pc, #4]	; (800a484 <__malloc_lock+0x8>)
 800a47e:	f7ff beb9 	b.w	800a1f4 <__retarget_lock_acquire_recursive>
 800a482:	bf00      	nop
 800a484:	24004c74 	.word	0x24004c74

0800a488 <__malloc_unlock>:
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <__malloc_unlock+0x8>)
 800a48a:	f7ff beb4 	b.w	800a1f6 <__retarget_lock_release_recursive>
 800a48e:	bf00      	nop
 800a490:	24004c74 	.word	0x24004c74

0800a494 <_init>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_fini>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr
